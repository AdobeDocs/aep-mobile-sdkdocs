"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[613],{56174:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return d},default:function(){return f}});var i=t(87462),a=t(63366),o=(t(15007),t(64983)),s=t(91515),r=["components"],d={},c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",n)}},p=c("CodeBlock"),l=c("InlineAlert"),u={_frontmatter:d},m=s.Z;function f(e){var n=e.components,t=(0,a.Z)(e,r);return(0,o.mdx)(m,(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"push-notification---api-reference"},"Push Notification - API reference"),(0,o.mdx)("p",null,"This document details how to use the APIs provided by the AEPMessaging framework for tracking and displaying push notifications."),(0,o.mdx)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,o.mdx)("p",null,(0,o.mdx)("a",{parentName:"p",href:"../../index.md#implement-extension-in-mobile-app"},"Integrate and register AEPMessaging extension")," in your app."),(0,o.mdx)("h2",{id:"sync-the-push-token"},"Sync the push token"),(0,o.mdx)("p",null,"To retrieve the push token in iOS, refer to the ",(0,o.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/usernotifications/registering_your_app_with_apns"},"Apple documentation for registering your app with APNs"),". Then add the following code to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"application(_: didRegisterForRemoteNotificationsWithDeviceToken:)")," method in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"AppDelegate")," to sync the device's push token with profile in Adobe Experience Platform."),(0,o.mdx)(p,{slots:"heading, code",repeat:"2",languages:"Swift, Objective-C",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"swift"},"Swift"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},"func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    MobileCore.setPushIdentifier(deviceToken)\n}\n")),(0,o.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-objc"},"- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n    [AEPMobileCore setPushIdentifier:deviceToken];\n}\n")),(0,o.mdx)("h2",{id:"track-push-notification-interactions"},"Track push notification interactions"),(0,o.mdx)("p",null,"Use ",(0,o.mdx)("a",{parentName:"p",href:"./../../api-reference/#handlenotificationresponse"},(0,o.mdx)("inlineCode",{parentName:"a"},"handleNotificationResponse"))," API to send push notification interaction data to Adobe Experience Platform."),(0,o.mdx)("p",null,"In iOS, ",(0,o.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/usernotifications/unusernotificationcenterdelegate"},"UNUserNotificationCenterDelegate")," is the interface for processing incoming notifications and responding to notification actions. Once the delegate is implemented, handle push notification responses in ",(0,o.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/usernotifications/unusernotificationcenterdelegate/1649501-usernotificationcenter"},"userNotificationCenter(_:didReceive:withCompletionHandler:)")," method."),(0,o.mdx)(p,{slots:"heading, code",repeat:"2",languages:"Swift, Objective-C",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"swift-1"},"Swift"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},"func userNotificationCenter(_: UNUserNotificationCenter,\n                            didReceive response: UNNotificationResponse,\n                            withCompletionHandler completionHandler: @escaping () -> Void) {\n\n    Messaging.handleNotificationResponse(response, urlHandler: { url in\n        /// return `true` if the app is handling the url or `false` if the Adobe SDK should handle it\n        let appHandlesUrl = false\n        return appHandlesUrl\n    }, closure: { pushTrackingStatus in\n        if pushTrackingStatus == .trackingInitiated {\n            // tracking was successful\n        } else {\n            // tracking failed, view the status for more information\n        }\n    })\n\n    completionHandler()\n}\n")),(0,o.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-objc"},"- (void) userNotificationCenter:(UNUserNotificationCenter *) center\n didReceiveNotificationResponse:(UNNotificationResponse *) response\n         withCompletionHandler:(void (^)(void)) completionHandler {\n\n    [AEPMobileMessaging handleNotificationResponse:response urlHandler: ^(NSURL *url) {\n        /// return `true` if the app is handling the url or `false` if the Adobe SDK should handle it\n        bool appHandlesUrl = false;\n        return appHandlesUrl;\n    } closure:^(AEPPushTrackingStatus status) {\n        if (status == AEPPushTrackingStatusTrackingInitiated) {\n            // tracking was successful\n        } else {\n            // tracking failed, view the status for more information\n        }\n    }];\n}\n")),(0,o.mdx)(l,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"This API method will automatically handle click behaviour defined for the push notification in Adobe Journey Optimizer."),(0,o.mdx)("h4",{id:"reading-push-tracking-status"},"Reading push tracking status"),(0,o.mdx)("p",null,"Implement the callback in ",(0,o.mdx)("inlineCode",{parentName:"p"},"handleNotificationResponse")," API to read ",(0,o.mdx)("a",{parentName:"p",href:"../enum-push-tracking-status.md"},"PushTrackingStatus")," enum representing tracking status of the push notification."),(0,o.mdx)(p,{slots:"heading, code",repeat:"2",languages:"Swift, Objective-C",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"swift-2"},"Swift"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},"Messaging.handleNotificationResponse(response) { trackingStatus in\n    // handle the different values of trackingStatus\n}\n")),(0,o.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-objc"},'[AEPMobileMessaging handleNotificationResponse:response urlHandler:nil closure:^(AEPPushTrackingStatus status) {\n    if (status == AEPPushTrackingStatusTrackingInitiated) {\n        NSLog(@"Successfully started push notification tracking");\n    }\n}];\n')))}f.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-edge-adobe-journey-optimizer-push-notification-ios-api-reference-md-7f575f74ac874e3a9055.js.map