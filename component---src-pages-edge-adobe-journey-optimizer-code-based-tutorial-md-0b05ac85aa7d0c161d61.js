"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[2428],{23882:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return p},default:function(){return f}});var o=n(87462),i=n(63366),a=(n(15007),n(64983)),r=n(91515),s=n(25597),d=["components"],p={},l=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.mdx)("div",t)}},m=l("TabsBlock"),c=l("InlineAlert"),h={_frontmatter:p},u=r.Z;function f(e){var t=e.components,n=(0,i.Z)(e,d);return(0,a.mdx)(u,(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"code-based-experiences-implementation-tutorial"},"Code-based experiences implementation tutorial"),(0,a.mdx)("p",null,"This document describes how to fetch, display and track code-based experiences using the Adobe Journey Optimizer extension."),(0,a.mdx)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"../index.md#implement-extension-in-mobile-app"},"Integrate and register Messaging extension")," in your app."),(0,a.mdx)("h2",{id:"fetch-and-cache-the-code-based-content"},"Fetch and cache the code-based content"),(0,a.mdx)("p",null,"To fetch the content for the surfaces configured in Adobe Journey Optimizer campaigns, call the ",(0,a.mdx)("a",{parentName:"p",href:"../api-reference.md#updatepropositionsforsurfaces"},"updatePropositionsForSurfaces")," API . You should batch requesting multiple ",(0,a.mdx)("a",{parentName:"p",href:"../public-classes/surface.md"},"Surface")," URIs in a single API call when possible. The returned code-based experiences are cached in-memory by the Messaging extension and persists through the lifecycle of the app (i.e as long as the app is running). An example of the call is shown below:"),(0,a.mdx)(m,{orientation:"horizontal",slots:"heading, content",repeat:"2",mdxType:"TabsBlock"}),(0,a.mdx)("p",null,"Android"),(0,a.mdx)(s.default,{query:"platform=android&function=updatepropositionsforsurfaces",mdxType:"Tabs"}),(0,a.mdx)("p",null,"iOS"),(0,a.mdx)(s.default,{query:"platform=ios&function=updatepropositionsforsurfaces",mdxType:"Tabs"}),(0,a.mdx)("h2",{id:"retrieve-cached-propositions"},"Retrieve cached propositions"),(0,a.mdx)("p",null,"To retrieve the previously fetched content from the in-memory cache, call the ",(0,a.mdx)("a",{parentName:"p",href:"../api-reference.md#getpropositionsforsurfaces"},"getPropositionsForSurfaces")," API with a list of required surface URIs and a completion handler. The completion handler will be invoked with a list of ",(0,a.mdx)("a",{parentName:"p",href:"../public-classes/proposition.md"},"Proposition")," objects corresponding to the requested surfaces, or ",(0,a.mdx)("inlineCode",{parentName:"p"},"AEPError")," object if an error occurs."),(0,a.mdx)(c,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,a.mdx)("p",null,"If a requested surface was not previously cached prior to calling ",(0,a.mdx)("inlineCode",{parentName:"p"},"getPropositionsForSurfaces")," (using the ",(0,a.mdx)("inlineCode",{parentName:"p"},"updatePropositionsForSurfaces")," API), no propositions will be returned for that surface."),(0,a.mdx)("p",null,"The following example shows how to retrieve the content for the previously cached surfaces:"),(0,a.mdx)(m,{orientation:"horizontal",slots:"heading, content",repeat:"2",mdxType:"TabsBlock"}),(0,a.mdx)("p",null,"Android"),(0,a.mdx)(s.default,{query:"platform=android&function=getpropositionsforsurfaces",mdxType:"Tabs"}),(0,a.mdx)("p",null,"iOS"),(0,a.mdx)(s.default,{query:"platform=ios&function=getpropositionsforsurfaces",mdxType:"Tabs"}),(0,a.mdx)("h2",{id:"using-the-retrieved-propositions"},"Using the retrieved propositions"),(0,a.mdx)("p",null,"The ",(0,a.mdx)("a",{parentName:"p",href:"../public-classes/proposition.md"},"Proposition")," object returned in the completion handler encapsulates the content specified for the corresponding surface, as well as information needed for tracking interactions with the content. Multiple ",(0,a.mdx)("inlineCode",{parentName:"p"},"Proposition")," objects can be returned for a single surface based on the number of campaigns configured for it in Adobe Journey Optimizer. Each ",(0,a.mdx)("inlineCode",{parentName:"p"},"Proposition")," object in turn can contain multiple items, represented by the ",(0,a.mdx)("a",{parentName:"p",href:"../public-classes/proposition-item.md"},"PropositionItem")," class, based on how the campaign's content is defined. To access the content, iterate through the list of ",(0,a.mdx)("inlineCode",{parentName:"p"},"PropositionItem")," present in the returned list of ",(0,a.mdx)("inlineCode",{parentName:"p"},"Proposition"),". The ",(0,a.mdx)("inlineCode",{parentName:"p"},"SchemaType")," of the ",(0,a.mdx)("inlineCode",{parentName:"p"},"PropositionItem")," indicates the type of content it contains and can be used to determine how to render or interpret the returned content. The ",(0,a.mdx)("inlineCode",{parentName:"p"},"PropositionItem")," class contains helper functions to access the different types of supported content."),(0,a.mdx)("p",null,"The following example shows how to iterate through the propositions returned earlier and retrieve the HTML content. Please adapt the solution to suit the needs of your application and use the returned proposition content appropriately."),(0,a.mdx)(m,{orientation:"horizontal",slots:"heading, content",repeat:"2",mdxType:"TabsBlock"}),(0,a.mdx)("p",null,"Android"),(0,a.mdx)(s.default,{query:"platform=android&function=using-propositions",mdxType:"Tabs"}),(0,a.mdx)("p",null,"iOS"),(0,a.mdx)(s.default,{query:"platform=ios&function=using-propositions",mdxType:"Tabs"}),(0,a.mdx)("h2",{id:"tracking-interactions-with-code-based-experiences"},"Tracking interactions with code-based experiences"),(0,a.mdx)("p",null,"Since the onus of rendering the code-based experience lies with the app developer, you must monitor the desired end user interactions and call the appropriate tracking APIs. To record an interaction with the code-based content, call the ",(0,a.mdx)("a",{parentName:"p",href:"../public-classes/proposition-item.md#track"},"track")," API provided in the ",(0,a.mdx)("inlineCode",{parentName:"p"},"PropositionItem")," class. The following code shows two examples of tracking: when the content is displayed to the user and when the user clicks on the content. These examples are for illustrating how to call the track API and not a recommendation on where it should be called. Please examine your app workflow to find the appropriate way to perform tracking."),(0,a.mdx)(m,{orientation:"horizontal",slots:"heading, content",repeat:"2",mdxType:"TabsBlock"}),(0,a.mdx)("p",null,"Android"),(0,a.mdx)(s.default,{query:"platform=android&function=track",mdxType:"Tabs"}),(0,a.mdx)("p",null,"iOS"),(0,a.mdx)(s.default,{query:"platform=ios&function=track",mdxType:"Tabs"}),(0,a.mdx)("h3",{id:"tracking-items-from-embedded-decisions"},"Tracking items from embedded decisions"),(0,a.mdx)("p",null,"When Adobe Journey Optimizer campaigns are created with embedded decisions, the server can respond with one or more items based on the number of items requested in the decision. To track these embedded items, the Adobe Journey Optimizer campaign UI provides ",(0,a.mdx)("inlineCode",{parentName:"p"},"item._trackingToken")," attributes. When authoring the campaign's content, you would need to embed the provided token as an HTML data-attribute in case of HTML content or JSON attribute in case on JSON content. The following example campaign shows content with embedded decision, where multiple paragraph tags containing image URLs can be returned."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-html"},'<html>\n   <body>\n      {{#each decisionPolicy.1234567.items as |item|}}\n      <ul id={{item._id}} data-item-token="{{item._trackingToken}}"><img src="{{item.heroimage1.sourceURL}}" alt="Winter Sale" width="80%" height="50%"></ul>\n      {{/each}}\n   </body>\n</html>\n')),(0,a.mdx)("p",null,"For the above example, the server can return a response with two decision items in the item data within a single ",(0,a.mdx)("inlineCode",{parentName:"p"},"PropositionItem")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-html"},'<html>\n   <body>\n      <ul id="mockId1" data-item-token="mockToken1"><img src="https://image1.jpeg" alt="Winter Sale" width="80%" height="50%"></ul>\n      <ul id="mockId2" data-item-token="mockToken2"><img src="https://image2.jpeg" alt="Winter Sale" width="80%" height="50%"></ul>\n   </body>\n</html>\n')),(0,a.mdx)("p",null,"Since the embedded items are located inside a single PropositionItem's data, the app developer will need to extract the ",(0,a.mdx)("inlineCode",{parentName:"p"},"data-item-token")," when tracking the interactions with the item. The token, along with the other tracking information, will need to be passed to the ",(0,a.mdx)("a",{parentName:"p",href:"../public-classes/proposition-item.md#track"},"track")," API provided by the Messaging SDK. If no tracking tokens are supplied, normal tracking events will be sent. If tracking tokens were used during authoring, it will be assumed that all the corresponding embedded items were displayed. The following code shows an example of calling the track API with tokens."),(0,a.mdx)(m,{orientation:"horizontal",slots:"heading, content",repeat:"2",mdxType:"TabsBlock"}),(0,a.mdx)("p",null,"Android"),(0,a.mdx)(s.default,{query:"platform=android&function=track-with-tokens",mdxType:"Tabs"}),(0,a.mdx)("p",null,"iOS"),(0,a.mdx)(s.default,{query:"platform=ios&function=track-with-tokens",mdxType:"Tabs"}))}f.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-edge-adobe-journey-optimizer-code-based-tutorial-md-0b05ac85aa7d0c161d61.js.map