{"version":3,"file":"component---src-pages-home-base-mobile-core-lifecycle-tabs-index-md-24da73f85482c5caaf3a.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/home/base/mobile-core/lifecycle/tabs/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Alerts from '/src/pages/resources/alerts.md';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    {/* ////////////  Add Dependencies ////////// */}\n\n    <Variant platform=\"android-kotlin\" task=\"add\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`Add the required dependencies to your project by including them in the app's Gradle file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`implementation(platform(\"com.adobe.marketing.mobile:sdk-bom:3.+\"))\nimplementation(\"com.adobe.marketing.mobile:core\")\nimplementation(\"com.adobe.marketing.mobile:lifecycle\")\n`}</code></pre>\n    <Alerts query=\"platform=android-gradle&componentClass=InlineNestedAlert\" mdxType=\"Alerts\" />\n    <Variant platform=\"android-groovy\" task=\"add\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`Add the required dependencies to your project by including them in the app's Gradle file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`implementation platform('com.adobe.marketing.mobile:sdk-bom:3.+')\nimplementation 'com.adobe.marketing.mobile:core'\nimplementation 'com.adobe.marketing.mobile:lifecycle'\n`}</code></pre>\n    <Alerts query=\"platform=android-gradle&componentClass=InlineNestedAlert\" mdxType=\"Alerts\" />\n    <Variant platform=\"ios-pods\" task=\"add\" repeat=\"2\" mdxType=\"Variant\" />\n    <p>{`Add the required dependencies to your project using CocoaPods. Add following pods in your `}<inlineCode parentName=\"p\">{`Podfile`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`use_frameworks!\n\ntarget 'YourTargetApp' do\n  pod 'AEPCore', '~> 5.0'\n  pod 'AEPLifecycle', '~> 5.0'\nend\n`}</code></pre>\n    {/* ////////////  Android Start Pause Lifecycle /////////// */}\n    <Variant platform=\"android-java\" task=\"activity-start-pause\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <p>{`Add the following to each Android Activity class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import com.adobe.marketing.mobile.MobileCore;\nimport com.adobe.marketing.mobile.Lifecycle;\n...\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`    @Override\n    public void onResume() {\n        MobileCore.setApplication(getApplication());\n        MobileCore.lifecycleStart(null);\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`    @Override\n    public void onPause() {\n        MobileCore.lifecyclePause();\n    }\n`}</code></pre>\n    <Variant platform=\"android-kotlin\" task=\"activity-start-pause\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"kotlin\"\n    }}>{`Kotlin`}</h4>\n    <p>{`Add the following to each Android Activity class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`import com.adobe.marketing.mobile.MobileCore\nimport com.adobe.marketing.mobile.Lifecycle\n...\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`    override fun onResume() {\n        MobileCore.setApplication(this.application)\n        MobileCore.lifecycleStart(null)\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`    override fun onPause() {\n        MobileCore.lifecyclePause()\n    }\n`}</code></pre>\n    {/* ///////////// Additional Context Data ////////// */}\n    <Variant platform=\"android-java\" task=\"context-data\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`HashMap<String, Object> additionalContextData = new HashMap<String, Object>();\ncontextData.put(\"myapp.category\", \"Game\");\nMobileCore.lifecycleStart(additionalContextData);\n`}</code></pre>\n    <Variant platform=\"android-kotlin\" task=\"context-data\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`MobileCore.lifecycleStart(mapOf(\"myapp.category\" to \"Game\"))\n`}</code></pre>\n    <Variant platform=\"ios-swift\" task=\"context-data\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`MobileCore.lifecycleStart(additionalContextData: [\"myapp.category\": \"Game\"])\n`}</code></pre>\n    <Variant platform=\"ios-objc\" task=\"context-data\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`[AEPMobileCore lifecycleStart:@{@\"myapp.category\": @\"Game\"}];      \n`}</code></pre>\n    {/* ///////////  Android Global Lifecycle //////////// */}\n    <Variant platform=\"android-java\" task=\"global-lifecycle\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import com.adobe.marketing.mobile.MobileCore;\nimport com.adobe.marketing.mobile.Lifecycle;\n\npublic class MobileApp extends Application {\n\n@Override\nprotected void onCreate() {\n    super.onCreate();\n\n    registerActivityLifecycleCallbacks(new ActivityLifecycleCallbacks() {\n        @Override\n        public void onActivityResumed(Activity activity) {\n            MobileCore.setApplication(activity.getApplication());\n            MobileCore.lifecycleStart(null);\n        }\n\n        @Override\n        public void onActivityPaused(Activity activity) {\n            MobileCore.lifecyclePause();\n        }\n\n        // the following methods aren't needed for our lifecycle purposes, but are\n        // required to be implemented by the ActivityLifecycleCallbacks object\n        @Override\n        public void onActivityCreated(Activity activity, Bundle savedInstanceState) {}\n        @Override\n        public void onActivityStarted(Activity activity) {}\n        @Override\n        public void onActivityStopped(Activity activity) {}\n        @Override\n        public void onActivitySaveInstanceState(Activity activity, Bundle outState) {}\n        @Override\n        public void onActivityDestroyed(Activity activity) {}\n    });\n\n    ...\n}\n ...\n}\n`}</code></pre>\n    <Variant platform=\"android-kotlin\" task=\"global-lifecycle\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`import com.adobe.marketing.mobile.MobileCore\nimport com.adobe.marketing.mobile.Lifecycle\n\nclass MobileApp : Application() {\n\noverride fun onCreate() {\n    super.onCreate()\n\n    registerActivityLifecycleCallbacks(object: ActivityLifecycleCallbacks {\n        override fun onActivityResumed(activity: Activity) {\n            MobileCore.setApplication(activity.application)\n            MobileCore.lifecycleStart(null)\n        }\n\n        override fun onActivityPaused(activity: Activity) {\n            MobileCore.lifecyclePause()\n        }\n\n        // the following methods aren't needed for our lifecycle purposes, but are\n        // required to be implemented by the ActivityLifecycleCallbacks object\n        override fun onActivityCreated(activity: Activity, savedInstanceState: Bundle?) {}\n        override fun onActivityStarted(activity: Activity) {}\n        override fun onActivityStopped(activity: Activity) {}\n        override fun onActivitySaveInstanceState(activity: Activity, outState: Bundle) {}\n        override fun onActivityDestroyed(activity: Activity) {}\n    })\n\n    ...\n}\n ...\n}\n`}</code></pre>\n    {/* ////////////  iOS Start on Launch /////////// */}\n    <Variant platform=\"ios-swift\" task=\"start-lifecycle-didfinishlaunch\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n    let appState = application.applicationState\n    MobileCore.registerExtensions([Lifecycle.self, ...], {\n        if appState != .background {\n        // only start lifecycle if the application is not in the background\n        MobileCore.lifecycleStart(additionalContextData: nil)\n        }\n    }\n}\n`}</code></pre>\n    <Variant platform=\"ios-objc\" task=\"start-lifecycle-didfinishlaunch\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (BOOL) application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    const UIApplicationState appState = application.applicationState;\n    [AEPMobileCore registerExtensions:@[AEPMobileLifecycle.class, ...] completion:^{\n    // only start lifecycle if the application is not in the background\n    if (appState != UIApplicationStateBackground) {\n        [AEPMobileCore lifecycleStart:nil];\n    }\n    }];\n}\n`}</code></pre>\n    {/* ////////////  iOS Start Pause Lifecycle /////////// */}\n    <Variant platform=\"ios-swift\" task=\"start-pause\" repeat=\"6\" mdxType=\"Variant\" />\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{` as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func sceneWillEnterForeground(_ scene: UIScene) {\n    MobileCore.lifecycleStart(additionalContextData: nil)\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func sceneDidEnterBackground(_ scene: UIScene) {\n    MobileCore.lifecyclePause()\n}\n`}</code></pre>\n    <p>{`In iOS 12 and earlier, use the `}<inlineCode parentName=\"p\">{`UIApplicationDelegate`}</inlineCode>{` as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func applicationWillEnterForeground(_ application: UIApplication) {\n    MobileCore.lifecycleStart(additionalContextData: nil)\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func applicationDidEnterBackground(_ application: UIApplication) {\n    MobileCore.lifecyclePause()\n}\n`}</code></pre>\n    <Variant platform=\"ios-objc\" task=\"start-pause\" repeat=\"6\" mdxType=\"Variant\" />\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{` as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) sceneWillEnterForeground:(UIScene *)scene {\n    [AEPMobileCore lifecycleStart:nil];\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) sceneDidEnterBackground:(UIScene *)scene {\n    [AEPMobileCore lifecyclePause];\n}\n`}</code></pre>\n    <p>{`In iOS 12 and earlier, use the `}<inlineCode parentName=\"p\">{`UIApplicationDelegate`}</inlineCode>{` as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) applicationWillEnterForeground:(UIApplication *)application {\n    [AEPMobileCore lifecycleStart:nil];\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) applicationDidEnterBackground:(UIApplication *)application {\n    [AEPMobileCore lifecyclePause];\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Variant","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","platform","task","repeat","parentName","query","isMDXComponent"],"sourceRoot":""}