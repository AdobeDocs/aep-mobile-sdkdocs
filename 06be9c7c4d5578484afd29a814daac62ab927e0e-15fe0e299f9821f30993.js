"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[7256],{59656:function(e,t,a){a.r(t),a.d(t,{_frontmatter:function(){return m},default:function(){return g}});var n,i=a(87462),o=a(63366),r=(a(15007),a(64983)),d=a(91515),s=a(47968),p=["components"],m={},l=(n="Variant",function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",e)}),c={_frontmatter:m},f=d.Z;function g(e){var t=e.components,a=(0,o.Z)(e,p);return(0,r.mdx)(f,(0,i.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)(l,{platform:"android-kotlin",task:"add",repeat:"3",mdxType:"Variant"}),(0,r.mdx)("p",null,"Add the required dependencies to your project by including them in the app's Gradle file."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin"},'implementation(platform("com.adobe.marketing.mobile:sdk-bom:3.+"))\nimplementation("com.adobe.marketing.mobile:core")\nimplementation("com.adobe.marketing.mobile:edgeidentity")\nimplementation("com.adobe.marketing.mobile:edge")\nimplementation("com.adobe.marketing.mobile:optimize")\n')),(0,r.mdx)(s.default,{query:"platform=android-gradle&componentClass=InlineNestedAlert",mdxType:"Alerts"}),(0,r.mdx)(l,{platform:"android-groovy",task:"add",repeat:"3",mdxType:"Variant"}),(0,r.mdx)("p",null,"Add the required dependencies to your project by including them in the app's Gradle file."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"implementation platform('com.adobe.marketing.mobile:sdk-bom:3.+')\nimplementation 'com.adobe.marketing.mobile:core'\nimplementation 'com.adobe.marketing.mobile:edgeidentity'\nimplementation 'com.adobe.marketing.mobile:edge'\nimplementation 'com.adobe.marketing.mobile:optimize'\n")),(0,r.mdx)(s.default,{query:"platform=android-gradle&componentClass=InlineNestedAlert",mdxType:"Alerts"}),(0,r.mdx)(l,{platform:"ios-pods",task:"add",repeat:"2",mdxType:"Variant"}),(0,r.mdx)("p",null,"Add the required dependencies to your project using CocoaPods. Add following pods in your ",(0,r.mdx)("inlineCode",{parentName:"p"},"Podfile"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"use_frameworks!\ntarget 'YourAppTarget' do\n    pod 'AEPCore', '~> 5.0'\n    pod 'AEPEdge', '~> 5.0'\n    pod 'AEPEdgeIdentity', '~> 5.0'\n    pod 'AEPOptimize', '~> 5.0'\nend\n")),(0,r.mdx)(l,{platform:"android",task:"decisionscope",repeat:"2",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'final DecisionScope decisionScope = DecisionScope("xcore:offer-activity:1111111111111111", "xcore:offer-placement:1111111111111111", 3);\n')),(0,r.mdx)(l,{platform:"ios",task:"decisionscope",repeat:"4",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'let decisionScope = DecisionScope(activityId: "xcore:offer-activity:1111111111111111", \n                                  placementId: "xcore:offer-placement:1111111111111111",\n                                  itemCount: 3)\n')),(0,r.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objc"},'AEPDecisionScope* decisionScope = [[AEPDecisionScope alloc] initWithActivityId:@"xcore:offer-activity:1111111111111111"         \n                                                                   placementId:@"xcore:offer-placement:1111111111111111" \n                                                                     itemCount:3];\n')),(0,r.mdx)(l,{platform:"android",task:"encodedscope",repeat:"2",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-1"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'final DecisionScope decisionScope = DecisionScope("eyJ4ZG06YWN0aXZpdHlJZCI6Inhjb3JlOm9mZmVyLWFjdGl2aXR5OjEyYmEyZjM4MWJjYTY3NWUiLCJ4ZG06cGxhY2VtZW50SWQiOiJ4Y29yZTpvZmZlci1wbGFjZW1lbnQ6MTJiOWEwMDA1NTUwNzM1NyIsICJ4ZG06aXRlbUNvdW50IjozfQ==");\n')),(0,r.mdx)(l,{platform:"ios",task:"encodedscope",repeat:"4",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-1"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'let decisionScope = DecisionScope(name: "eyJ4ZG06YWN0aXZpdHlJZCI6Inhjb3JlOm9mZmVyLWFjdGl2aXR5OjEyYmEyZjM4MWJjYTY3NWUiLCJ4ZG06cGxhY2VtZW50SWQiOiJ4Y29yZTpvZmZlci1wbGFjZW1lbnQ6MTJiOWEwMDA1NTUwNzM1NyIsICJ4ZG06aXRlbUNvdW50IjozfQ==")\n')),(0,r.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objc"},'AEPDecisionScope* decisionScope = [[AEPDecisionScope alloc] initWithName:@"eyJ4ZG06YWN0aXZpdHlJZCI6Inhjb3JlOm9mZmVyLWFjdGl2aXR5OjEyYmEyZjM4MWJjYTY3NWUiLCJ4ZG06cGxhY2VtZW50SWQiOiJ4Y29yZTpvZmZlci1wbGFjZW1lbnQ6MTJiOWEwMDA1NTUwNzM1NyIsICJ4ZG06aXRlbUNvdW50IjozfQ=="];\n')),(0,r.mdx)(l,{platform:"android",task:"target-location",repeat:"2",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-2"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'final DecisionScope decisionScope = DecisionScope("myTargetLocation");\n')),(0,r.mdx)(l,{platform:"ios",task:"target-location",repeat:"4",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-2"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'let decisionScope = DecisionScope(name: "myTargetLocation")\n')),(0,r.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objc"},'AEPDecisionScope* decisionScope = [[AEPDecisionScope alloc] initWithName:@"myTargetLocation"];\n')),(0,r.mdx)(l,{platform:"android",task:"target-parameters",repeat:"2",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-3"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'final Map<String, Object> data = new HashMap<>();\nfinal Map<String, String> targetParameters = new HashMap<>();\n\n// Add mbox parameters\ntargetParameters.put("someKey", "someValue");\n\n// Add profile parameters - prefix with profile.\ntargetParameters.put("profile.membershipLevel", "platinum");\n\n// Add product parameters\ntargetParameters.put("productId", "111");\ntargetParameters.put("categoryId", "Books");\n\n// Add order parameters\ntargetParameters.put("orderId", "10");\ntargetParameters.put("orderTotal", "110.56");\ntargetParameters.put("purchasedProductIds", "111");\n\ndata.put("__adobe", new HashMap<String, Object>() {\n  {\n    put("target", targetParameters);\n  }\n});\n\n\nfinal DecisionScope decisionScope = DecisionScope("myTargetLocation") // Target location (or mbox)\n\nfinal List<DecisionScope> decisionScopes = new ArrayList<>();\ndecisionScopes.add(decisionScope);\n\nOptimize.updatePropositions(decisionScopes, null, data);\n')),(0,r.mdx)(l,{platform:"ios",task:"target-parameters",repeat:"4",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-3"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'var data: [String: Any] = [:]\nvar targetParameters: [String: String] = [:]\n\n// Add mbox parameters\ntargetParameters["someKey"] = "someValue"\n\n// Add profile parameters - prefix with profile.\ntargetParameters["profile.membershipLevel"] = "platinum"\n\n// Add product parameters\ntargetParameters["productId"] = "111"\ntargetParameters["categoryId"] = "Books"\n\n// Add order parameters\ntargetParameters["orderId"] = "10"\ntargetParameters["orderTotal"] = "110.56"\ntargetParameters["purchasedProductIds"] = "111"\n\ndata["__adobe"] = [\n  "target": targetParameters\n]\n\nlet decisionScope = DecisionScope(name: "myTargetLocation") // Target location (or mbox)\nOptimize.updatePropositions(for: [decisionScope] withXdm: nil andData: data)\n')),(0,r.mdx)("h4",{id:"objective-c-3"},"Objective-C"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objc"},'NSMutableDictionary* data = [NSMutableDictionary dictionary];\nNSMutableDictionary* targetParameters = [NSMutableDictionary dictionary];\n\n// Add mbox parameters\ntargetParameters[@"someKey"] = @"someValue";\n\n// Add profile parameters - prefix with profile.\ntargetParameters[@"profile.membershipLevel"] = @"platinum";\n\n// Add product parameters\ntargetParameters[@"productId"] = @"111";\ntargetParameters[@"categoryId"] = @"Books";\n\n// Add order parameters\ntargetParameters[@"orderId"] = @"10";\ntargetParameters[@"orderTotal"] = @"110.56";\ntargetParameters[@"purchasedProductIds"] = @"111";\n\n[data setObject:[NSDictionary dictionaryWithObject:targetParameters forKey:@"target"] forKey:@"__adobe"];\n\nAEPDecisionScope* decisionScope = [[AEPDecisionScope alloc] initWithName:@"myTargetLocation"]; // Target location (or mbox)\n[AEPMobileOptimize updatePropositions:@[decisionScope] withXdm:nil andData:data];\n')),(0,r.mdx)(l,{platform:"android",task:"target-tpid",repeat:"2",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-4"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'final IdentityItem item = new IdentityItem("1111", AuthenticatedState.AUTHENTICATED, true);\nfinal IdentityMap identityMap = new IdentityMap();\nidentityMap.addItem(item, "userCRMID") // userCRMID being used as Third Party ID\nIdentity.updateIdentities(identityMap);\n')),(0,r.mdx)(l,{platform:"ios",task:"target-tpid",repeat:"4",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-4"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'let identityMap = IdentityMap()\nidentityMap.add(item: IdentityItem(id: "1111", authenticatedState: AuthenticatedState.authenticated, primary: true),\n                withNamespace: "userCRMID") // userCRMID being used as Third Party ID\nIdentity.updateIdentities(with: identityMap)\n')),(0,r.mdx)("h4",{id:"objective-c-4"},"Objective-C"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objc"},'AEPIdentityItem *item = [[AEPIdentityItem alloc] initWithId:@"1111" authenticatedState:AEPAuthenticatedStateAuthenticated primary:true];\n\nAEPIdentityMap *identityMap = [[AEPIdentityMap alloc] init];\n[identityMap addItem:item withNamespace:@"userCRMID"]; // userCRMID being used as Third Party ID\n\n[AEPMobileEdgeIdentity updateIdentities:identityMap];\n')),(0,r.mdx)(l,{platform:"android",task:"proposition-tracking-offer",repeat:"2",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-5"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public class Offer {\n  ...\n  /**\n    * Dispatches an event for the Edge network extension to send an Experience Event to the Edge network with the display interaction data for the\n    * given {@code Proposition} offer.\n    */\n  public void displayed() {...}\n\n  /**\n    * Dispatches an event for the Edge network extension to send an Experience Event to the Edge network with the tap interaction data for the\n    * given {@code Proposition} offer.\n    */\n  public void tapped() {...}\n}\n")),(0,r.mdx)(l,{platform:"ios",task:"proposition-tracking-offer",repeat:"2",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-5"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"public extension Offer {\n    /// Dispatches an event for the Edge extension to send an Experience Event to the Edge network with the display interaction data for the given proposition item.\n    func displayed() {...}\n\n    /// Dispatches an event for the Edge extension to send an Experience Event to the Edge network with the tap interaction data for the given proposition item.\n    func tapped() {...}\n}\n")),(0,r.mdx)(l,{platform:"android-java",task:"send-event-offer",repeat:"1",mdxType:"Variant"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"offer.displayed(); // Sends an Offer display notification to Edge network\n")),(0,r.mdx)(l,{platform:"android-kotlin",task:"send-event-offer",repeat:"1",mdxType:"Variant"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin"},"offer.displayed() // Sends an Offer display notification to Edge network\n")),(0,r.mdx)(l,{platform:"ios-swift",task:"send-event-offer",repeat:"1",mdxType:"Variant"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"offer.displayed() // Sends an Offer display notification to Edge network\n")),(0,r.mdx)(l,{platform:"ios-objectivec",task:"send-event-offer",repeat:"1",mdxType:"Variant"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objc"},"[offer displayed]; // Sends an Offer display notification to Edge network\n")),(0,r.mdx)(l,{platform:"android",task:"proposition-tracking-edge",repeat:"2",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-6"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public class Offer {\n  ...\n  /**\n    * Generates a map containing XDM formatted data for {@code Experience Event - Proposition Interactions} field group from this {@code Proposition} item.\n    *\n    * The returned XDM data does contain the {@code eventType} for the Experience Event with value {@code decisioning.propositionDisplay}.\n    *\n    * Note: The Edge sendEvent API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, and override\n    * dataset identifier.\n    *\n    * @return {@code Map<String, Object>} containing the XDM data for the proposition interaction.\n    */\n  public Map<String, Object> generateDisplayInteractionXdm() {...}\n\n  /**\n    * Generates a map containing XDM formatted data for {@code Experience Event - Proposition Interactions} field group from this {@code Proposition} offer.\n    *\n    * The returned XDM data contains the {@code eventType} for the Experience Event with value {@code decisioning.propositionInteract}.\n    *\n    * Note: The Edge sendEvent API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, and override\n    * dataset identifier.\n    *\n    * @return {@code Map<String, Object>} containing the XDM data for the proposition interaction.\n    */\n  public Map<String, Object> generateTapInteractionXdm() {...}\n}\n")),(0,r.mdx)(l,{platform:"ios",task:"proposition-tracking-edge",repeat:"2",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-6"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"public extension Offer {\n  /// Creates a dictionary containing XDM formatted data for `Experience Event - Proposition Interactions` field group from the given proposition option.\n  ///\n  /// The Edge `sendEvent(experienceEvent:_:)` API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, or override dataset identifier.\n  ///\n  /// - Note: The returned XDM data also contains the `eventType` for the Experience Event with value `decisioning.propositionDisplay`.\n  /// - Returns A dictionary containing XDM data for the proposition interactions.\n  func generateDisplayInteractionXdm() -> [String: Any] {...}\n\n  /// Creates a dictionary containing XDM formatted data for `Experience Event - Proposition Interactions` field group from the given proposition option.\n  ///\n  /// The Edge `sendEvent(experienceEvent:_:)` API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, or override dataset identifier.\n  ///\n  /// - Note: The returned XDM data also contains the `eventType` for the Experience Event with value `decisioning.propositionInteract`.\n  /// - Returns A dictionary containing XDM data for the proposition interactions.\n  func generateTapInteractionXdm() -> [String: Any] {...}\n}\n")),(0,r.mdx)(l,{platform:"android-kotlin",task:"send-event-edge",repeat:"1",mdxType:"Variant"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin"},'// When a proposition is retrieved using getPropositions API or onUpdatePropositions API callback \n// and the corresponding offer is displayed, invoke method on Offer object to get the XDM data.\n\nval displayInteractionXdm = offer.generateDisplayInteractionXdm() // Offer display tracking XDM\nval additionalData = mapOf("someDataKey" to "someDataValue")\n\nval experienceEvent = ExperienceEvent.Builder()\n    .setXdmSchema(displayInteractionXdm)\n    .setData(additionalData)\n    .build()\nEdge.sendEvent(experienceEvent, null)\n')),(0,r.mdx)(l,{platform:"android-java",task:"send-event-edge",repeat:"1",mdxType:"Variant"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'// When a proposition is retrieved using getPropositions API or onUpdatePropositions API callback \n// and the corresponding offer is displayed, invoke method on Offer object to get the XDM data.\n\nfinal Map<String, Object> displayInteractionXdm = offer.generateDisplayInteractionXdm() // Offer display tracking XDM\nfinal Map<String, Object> additionalData = new HashMap<>();\nadditionalData.put("someDataKey", "someDataValue");\n\nfinal ExperienceEvent experienceEvent = new ExperienceEvent.Builder().setXdmSchema(displayInteractionXdm).setData(additionalData).build();\nEdge.sendEvent(experienceEvent, null) \n')),(0,r.mdx)(l,{platform:"ios-swift",task:"send-event-edge",repeat:"1",mdxType:"Variant"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'// When a proposition is retrieved using getPropositions API or onUpdatePropositions API callback \n// and the corresponding offer is displayed, invoke method on Offer object to get the XDM data.\n\nlet displayInteractionXdm = offer.generateDisplayInteractionXdm() // Offer display tracking XDM\nlet additionalData: [String: Any] = ["someDataKey": "someDataValue"]\n\nlet experienceEvent = ExperienceEvent(xdm: displayInteractionXdm, data: additionalData)\nEdge.sendEvent(experienceEvent)\n')),(0,r.mdx)(l,{platform:"ios-objectivec",task:"send-event-edge",repeat:"1",mdxType:"Variant"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objc"},'// When a proposition is retrieved using getPropositions API or onUpdatePropositions API callback \n// and the corresponding offer is displayed, invoke method on Offer object to get the XDM data.\n\nNSDictionary* displayInteractionXdm = [offer generateDisplayInteractionXdm];\nNSDictionary* additionalData = @{@"someDataKey": @"someDataValue"};\n\nAEPExperienceEvent* experienceEvent = [[AEPExperienceEvent alloc] initWithXdm:displayInteractionXdm data:additionalData datasetIdentifier:nil];\n[AEPMobileEdge sendExperienceEvent:event completion:nil];\n')),(0,r.mdx)(l,{platform:"android-java",task:"proposition-tracking-batch",repeat:"1",mdxType:"Variant"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"// Create a list of offers from different propositions\nfinal List<Offer> offersToDisplay = new ArrayList<>();\noffersToDisplay.add(proposition1.getOffers().get(0));\noffersToDisplay.add(proposition2.getOffers().get(0));\n// Send list of offers to multiple offers display track public API\nOfferUtils.displayed(offersToDisplay);\n")),(0,r.mdx)(l,{platform:"android-kotlin",task:"proposition-tracking-batch",repeat:"1",mdxType:"Variant"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin"},"// Create a list of offers from different propositions\nval offersToDisplay = listOf(\n    proposition1.offers[0],\n    proposition2.offers[0]\n)\n// Send list of offers to multiple offers display track public API\noffersToDisplay.displayed()\n")),(0,r.mdx)(l,{platform:"ios-swift",task:"proposition-tracking-batch",repeat:"1",mdxType:"Variant"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"// Create an array of offers from different propositions\nlet offersToDisplay = [\n    proposition1.offers[0],\n    proposition2.offers[0]\n]\n// Send array of offers to multiple offers display track public API\nOptimize.displayed(offersToDisplay)\n")),(0,r.mdx)(l,{platform:"ios-objectivec",task:"proposition-tracking-batch",repeat:"1",mdxType:"Variant"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objc"},"// Create an array of offers from different propositions\nNSArray<AEPOffer *> *offersToDisplay = @[\n    proposition1.offers[0],\n    proposition2.offers[0]\n];\n// Send array of offers to multiple offers display track public API\n[AEPMobileOptimize displayed: offersToDisplay];\n")),(0,r.mdx)(l,{platform:"android-java",task:"send-multiple-display-interaction-event-edge",repeat:"3",mdxType:"Variant"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'// When propositions are retrieved using getPropositions API or onUpdatePropositions API callback \n// and the corresponding offers are displayed, invoke method on List<Offer> to get the XDM data.\n\nfinal Map<String, Object> displayInteractionXdm = offers.generateDisplayInteractionXdm() // Offers display tracking XDM\nfinal Map<String, Object> additionalData = new HashMap<>();\nadditionalData.put("someDataKey", "someDataValue");\n\nfinal ExperienceEvent experienceEvent = new ExperienceEvent.Builder().setXdmSchema(displayInteractionXdm).setData(additionalData).build();\nEdge.sendEvent(experienceEvent, null)\n')),(0,r.mdx)("h3",{id:"parameters"},"Parameters"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"offers")," - A ",(0,r.mdx)("inlineCode",{parentName:"li"},"List<Offer>")," that may or may not belong to the same proposition. The associated proposition(s) need to be tracked.")),(0,r.mdx)(l,{platform:"android-kotlin",task:"send-multiple-display-interaction-event-edge",repeat:"3",mdxType:"Variant"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin"},'// When propositions are retrieved using getPropositions API or onUpdatePropositions API callback \n// and the corresponding offers are displayed, invoke method on List<Offer> to get the XDM data.\n\nval displayInteractionXdm = offers.generateDisplayInteractionXdm() // Offers display tracking XDM\nval additionalData = mapOf("someDataKey" to "someDataValue")\n\nval experienceEvent = ExperienceEvent.Builder()\n    .setXdmSchema(displayInteractionXdm)\n    .setData(additionalData)\n    .build()\nEdge.sendEvent(experienceEvent, null)\n')),(0,r.mdx)("h3",{id:"parameters-1"},"Parameters"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"offers")," - A ",(0,r.mdx)("inlineCode",{parentName:"li"},"[Offer]")," that may or may not belong to the same proposition. The associated proposition(s) need to be tracked.")),(0,r.mdx)(l,{platform:"ios-swift",task:"send-multiple-display-interaction-event-edge",repeat:"3",mdxType:"Variant"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'// When propositions are retrieved using getPropositions API or onUpdatePropositions API callback \n// and the corresponding offers are displayed, invoke method on [Offer] to get the XDM data.\n\nlet displayInteractionXdm = offers.generateDisplayInteractionXdm() // Offers display tracking XDM\nlet additionalData: [String: Any] = ["someDataKey": "someDataValue"]\n\nlet experienceEvent = ExperienceEvent(xdm: displayInteractionXdm, data: additionalData)\nEdge.sendEvent(experienceEvent)\n')),(0,r.mdx)("h3",{id:"parameters-2"},"Parameters"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"offers")," - A ",(0,r.mdx)("inlineCode",{parentName:"li"},"[Offer]")," that may or may not belong to the same proposition. The associated proposition(s) need to be tracked.")),(0,r.mdx)(l,{platform:"ios-objectivec",task:"send-multiple-display-interaction-event-edge",repeat:"3",mdxType:"Variant"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objc"},'// When propositions are retrieved using getPropositions API or onUpdatePropositions API callback \n// and the corresponding offers are displayed, invoke method on NSArray<AEPOffer *> to get the XDM data.\n\nNSDictionary* displayInteractionXdm = [offers generateDisplayInteractionXdm];\nNSDictionary* additionalData = @{@"someDataKey": @"someDataValue"};\n\nAEPExperienceEvent* experienceEvent = [[AEPExperienceEvent alloc] initWithXdm:displayInteractionXdm data:additionalData datasetIdentifier:nil];\n[AEPMobileEdge sendExperienceEvent:event completion:nil];\n')),(0,r.mdx)("h3",{id:"parameters-3"},"Parameters"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"offers")," - A ",(0,r.mdx)("inlineCode",{parentName:"li"},"List<Offer>")," that may or may not belong to the same proposition. The associated proposition(s) need to be tracked.")),(0,r.mdx)(l,{platform:"android",task:"offerutils",repeat:"2",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"kotlin"},"Kotlin"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin"},"object OfferUtils {\n    /**\n     * Dispatches an event for the Edge network extension to send an Experience Event to the Edge\n     * network with the display interaction data for the given list of [Offer]s.\n     *\n     * This function extracts unique [OptimizeProposition]s from the list of offers based on their\n     * proposition ID and dispatches an event with multiple propositions.\n     *\n     * @see XDMUtils.trackWithData\n     */\n    @JvmStatic\n    fun List<Offer>.displayed() {...}\n}\n")),(0,r.mdx)(l,{platform:"ios",task:"optimize",repeat:"2",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-7"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc\npublic extension Optimize {\n    /// This API dispatches an event for the Edge extension to send an Experience Event to the Edge network with the display interaction data for list of offers passed.\n    ///\n    /// - Parameter offers: An array of offer.\n    @objc(displayed:)\n    static func displayed(for offers: [Offer]) {...}\n}\n")),(0,r.mdx)(l,{platform:"android",task:"multiple-display-propositions-tracking-edge",repeat:"2",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"kotlin-1"},"Kotlin"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin"},"object OfferUtils {\n    /**\n     * Generates a map containing XDM formatted data for `Experience Event - OptimizeProposition\n     * Interactions` field group from the given list of [Offer]s.\n     *\n     * This function extracts unique [OptimizeProposition]s from the list of offers based on their\n     * proposition ID and generates XDM data for the interaction.\n     *\n     * @return [Map] containing the XDM data for the proposition interaction, or null if the list is empty\n     * or no valid propositions are found\n     */\n    @JvmStatic\n    fun List<Offer>.generateDisplayInteractionXdm(): Map<String, Any>? {...}\n}\n")),(0,r.mdx)(l,{platform:"ios",task:"multiple-display-propositions-tracking-edge",repeat:"2",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-8"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc\npublic extension Optimize {\n    /// This API returns a dictionary containing XDM formatted data for Experience Event - Proposition Interactions field group for the list of offers\n    ///\n    /// The Edge sendEvent(experienceEvent:_:) API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, or override dataset identifier.\n    ///\n    /// - Parameter offers: An array of offer.\n    /// - Note: The returned XDM data also contains the eventType for the Experience Event with value decisioning.propositionInteract.\n    /// - Returns A dictionary containing XDM data for the propositon interactions.\n    /// - SeeAlso: interactionXdm(for:)\n    @objc(generateDisplayInteractionXdm:)\n    static func generateDisplayInteractionXdm(for offers: [Offer]) -> [String: Any]?{...}\n}\n")),(0,r.mdx)(l,{platform:"android",task:"calculate-json-size",repeat:"1",mdxType:"Variant"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin"},'import com.google.gson.Gson\nimport java.nio.charset.StandardCharsets\n\nfun calculateJsonSizeInKB(jsonMap: Map<String, Any>) {\n    val gson = Gson()\n    val jsonString = gson.toJson(jsonMap)\n    val byteArray = jsonString.toByteArray(StandardCharsets.UTF_8)\n    val sizeInKB = byteArray.size / 1024.0 \n    println("JSON size: %.2f KB".format(sizeInKB))\n}\n')),(0,r.mdx)(l,{platform:"ios",task:"calculate-json-size",repeat:"1",mdxType:"Variant"}),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'import Foundation\n\nfunc calculateJsonSizeInKB(jsonMap: [String: Any]) {\n    do {\n        let jsonData = try JSONSerialization.data(withJSONObject: jsonMap)\n        let sizeInKB = Double(jsonData.count) / 1024.0\n        print(String(format: "JSON size: %.2f KB", sizeInKB))\n    } catch {\n        print("Error calculating JSON size: \\(error)")\n    }\n}\n')))}g.isMDXComponent=!0}}]);
//# sourceMappingURL=06be9c7c4d5578484afd29a814daac62ab927e0e-15fe0e299f9821f30993.js.map