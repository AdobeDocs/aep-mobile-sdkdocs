{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-in-app-message-tutorials-tabs-native-from-javascript-md-b8714dfcde3695b734fa.js","mappings":"4OAOsBA,E,wEADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAIQ,UAJA,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EAClB,GAEMG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGP,GAAK,YAER,OAAO,SAACI,GAAS,UAAKD,EAAiBH,EAAK,CAAEO,WAAYA,EAAYC,QAAQ,eAG5E,SAACT,EAAO,CAACU,SAAS,YAAYC,SAAS,WAAWC,OAAO,IAAIH,QAAQ,aACrE,6BAAc,uBAAYI,WAAW,KAAG,UAAwB,qBAAqB,uBAAYA,WAAW,KAAG,wBAAsC,WAAW,uBAAYA,WAAW,KAAG,0DAAwE,+BAClQ,sIACA,+EAAgE,uBAAYA,WAAW,KAAG,mCAAiD,0GAC3I,eACE,GAAM,UAAQ,WAEhB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,mBAAiB,+xBAoBlC,eACE,GAAM,QAAM,SAEd,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,i5BAuBhC,SAACb,EAAO,CAACU,SAAS,YAAYC,SAAS,WAAWC,OAAO,IAAIH,QAAQ,aACrE,6BAAc,uBAAYI,WAAW,KAAG,qBAAmC,qBAAqB,uBAAYA,WAAW,KAAG,qBAAmC,WAAW,uBAAYA,WAAW,KAAG,gGAA8G,+BAChT,sIACA,8EAA+D,uBAAYA,WAAW,KAAG,mCAAiD,iFAAiF,uBAAYA,WAAW,KAAG,mBAAiC,cACtR,eACE,GAAM,UAAQ,SAEhB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,8fAehC,SAACb,EAAO,CAACU,SAAS,MAAMC,SAAS,WAAWC,OAAO,IAAIH,QAAQ,aAC/D,6BAAc,uBAAYI,WAAW,KAAG,qBAAmC,qBAAqB,uBAAYA,WAAW,KAAG,qBAAmC,WAAW,cAAGA,WAAW,IAClL,KAAQ,2DACP,uBAAYA,WAAW,KAAG,2CAA4D,+BAC3F,sIACA,8EAA+D,uBAAYA,WAAW,KAAG,mCAAiD,iFAAiF,uBAAYA,WAAW,KAAG,mBAAiC,cACtR,eACE,GAAM,SAAO,UAEf,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBAAgB,4dAkBrC,CAEAN,EAAWO,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/in-app-message/tutorials/tabs/native-from-javascript.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android3x\" function=\"register\" repeat=\"7\" mdxType=\"Variant\" />\n    <p>{`In the `}<inlineCode parentName=\"p\">{`onShow`}</inlineCode>{` function of the `}<inlineCode parentName=\"p\">{`PresentationDelegate`}</inlineCode>{`, call `}<inlineCode parentName=\"p\">{`handleJavascriptMessage(String, AdobeCallback<String>)`}</inlineCode>{` to register your handler.`}</p>\n    <p>{`The name of the message you intend to pass from the JavaScript side should be specified in the first parameter.`}</p>\n    <p>{`The following example shows a handler that dispatches an `}<inlineCode parentName=\"p\">{`decisioning.propositionInteract`}</inlineCode>{` Experience Event natively when the JavaScript of the in-app message posts a myInappCallback message:`}</p>\n    <h4 {...{\n      \"id\": \"kotlin\"\n    }}>{`Kotlin`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var eventHandler: InAppMessageEventHandler? = null\nvar currentMessagePresentable: Presentable<InAppMessage>? = null\n\noverride fun onShow(presentable: Presentable<*>) {\n  if (presentable.getPresentation() !is InAppMessage) {\n    return\n  }\n  currentMessagePresentable = presentable as Presentable<InAppMessage>\n  eventHandler = currentMessagePresentable?.getPresentation()?.eventHandler\n  // in-line handling of JavaScript calls\n  eventHandler?.handleJavascriptMessage(\"myInappCallback\") { content ->\n    if (content != null) {\n        println(\"JavaScript body passed to native callback: $content\")\n        val message: Message? = MessagingUtils.getMessageForPresentable(currentMessagePresentable)\n        message?.track(content, MessagingEdgeEventType.INTERACT);\n    }\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`InAppMessageEventHandler eventHandler = null;\nPresentable<InAppMessage> currentMessagePresentable = null;\n\n@Override\npublic void onShow(Presentable<?> presentable) {\n    if (!(presentable.getPresentation() instanceof InAppMessage)) {\n      return;\n    }\n    currentMessagePresentable = (Presentable<InAppMessage>) presentable;\n    eventHandler = currentMessagePresentable.getPresentation().getEventHandler();\n    // in-line handling of JavaScript calls\n    eventHandler.handleJavascriptMessage(\"myInappCallback\", content -> {\n        if (content != null) {\n            System.out.println(\"JavaScript body passed to native callback: \" + content);\n            Message message = MessagingUtils.getMessageForPresentable(currentMessagePresentable);\n            if (message != null) {\n                message.track(content, MessagingEdgeEventType.INTERACT);\n            }\n        }\n    });\n}\n`}</code></pre>\n    <Variant platform=\"android2x\" function=\"register\" repeat=\"5\" mdxType=\"Variant\" />\n    <p>{`In the `}<inlineCode parentName=\"p\">{`shouldShowMessage`}</inlineCode>{` function of the `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{`, call `}<inlineCode parentName=\"p\">{`public void handleJavascriptMessage(final String name, final AdobeCallback<String> callback)`}</inlineCode>{` to register your handler.`}</p>\n    <p>{`The name of the message you intend to pass from the JavaScript side should be specified in the first parameter.`}</p>\n    <p>{`The following example shows a handler that dispatches a `}<inlineCode parentName=\"p\">{`decisioning.propositionInteract`}</inlineCode>{` Experience Event natively when the JavaScript of the in-app message posts a `}<inlineCode parentName=\"p\">{`myInappCallback`}</inlineCode>{` message:`}</p>\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic boolean shouldShowMessage(FullscreenMessage fullscreenMessage) {\n  Message message = (Message) fullscreenMessage.getParent();\n  \n  // in-line handling of JavaScript calls\n  message.handleJavascriptMessage(\"myInappCallback\", new AdobeCallback<String>() {\n    @Override\n    public void call(String content) {\n      System.out.println(\"JavaScript body passed to native callback: \" + content);\n      message.track(content, MessagingEdgeEventType.IN_APP_INTERACT);\n    }\n  });\n}\n`}</code></pre>\n    <Variant platform=\"ios\" function=\"register\" repeat=\"5\" mdxType=\"Variant\" />\n    <p>{`In the `}<inlineCode parentName=\"p\">{`shouldShowMessage`}</inlineCode>{` function of the `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{`, call `}<a parentName=\"p\" {...{\n        \"href\": \"./class-message.md#handlejavascriptmessage_withhandler\"\n      }}><inlineCode parentName=\"a\">{`handleJavascriptMessage(_:withHandler)`}</inlineCode></a>{` to register your handler.`}</p>\n    <p>{`The name of the message you intend to pass from the JavaScript side should be specified in the first parameter.`}</p>\n    <p>{`The following example shows a handler that dispatches a `}<inlineCode parentName=\"p\">{`decisioning.propositionInteract`}</inlineCode>{` Experience Event natively when the JavaScript of the in-app message posts a `}<inlineCode parentName=\"p\">{`myInappCallback`}</inlineCode>{` message:`}</p>\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func shouldShowMessage(message: Showable) -> Bool {    \n    let fullscreenMessage = message as? FullscreenMessage\n    let message = fullscreenMessage?.parent\n\n    // in-line handling of JavaScript calls\n    message?.handleJavascriptMessage(\"myInappCallback\") { content\n\n        print(\"JavaScript body passed to native callback: \\\\(content ?? \"empty\")\")\n\n        message?.track(content as? String, withEdgeEventType: .inappInteract)\n    }\n\n    return true\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Variant","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","platform","function","repeat","parentName","isMDXComponent"],"sourceRoot":""}