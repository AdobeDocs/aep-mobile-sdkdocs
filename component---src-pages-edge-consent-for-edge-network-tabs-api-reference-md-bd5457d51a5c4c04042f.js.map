{"version":3,"file":"component---src-pages-edge-consent-for-edge-network-tabs-api-reference-md-bd5457d51a5c4c04042f.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/edge/consent-for-edge-network/tabs/api-reference.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"java\" api=\"extension-version\" repeat=\"4\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static String extensionVersion();\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`String extensionVersion = Consent.extensionVersion();\n`}</code></pre>\n    <Variant platform=\"kotlin\" api=\"extension-version\" repeat=\"4\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun extensionVersion(): String\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val extensionVersion = Consent.extensionVersion()\n`}</code></pre>\n    <Variant platform=\"swift\" api=\"extension-version\" repeat=\"4\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static var extensionVersion: String\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let extensionVersion = Consent.extensionVersion\n`}</code></pre>\n    <Variant platform=\"objc\" api=\"extension-version\" repeat=\"4\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (nonnull NSString*) extensionVersion;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`NSString *extensionVersion = [AEPMobileEdgeConsent extensionVersion];\n`}</code></pre>\n    <Variant platform=\"java\" api=\"get-consents\" repeat=\"5\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void getConsents(final AdobeCallback<Map<String, Object>> callback);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`callback`}</em>{` - Invoked with the current consent preferences. If an `}<inlineCode parentName=\"li\">{`AdobeCallbackWithError`}</inlineCode>{` is provided, an `}<inlineCode parentName=\"li\">{`AdobeError`}</inlineCode>{` is returned if any error occurs while retrieving the user consents. The callback may be invoked on a different thread.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Consent.getConsents(new AdobeCallback<Map<String, Object>>() {\n    @Override\n    public void call(Map<String, Object> currentConsents) {\n        // Handle currentConsents\n    }\n});\n`}</code></pre>\n    <Variant platform=\"kotlin\" api=\"get-consents\" repeat=\"5\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun getConsents(callback: AdobeCallback<Map<String, Any>>)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`callback`}</em>{` - Invoked with the current consent preferences. If an `}<inlineCode parentName=\"li\">{`AdobeCallbackWithError`}</inlineCode>{` is provided, an `}<inlineCode parentName=\"li\">{`AdobeError`}</inlineCode>{` is returned if any error occurs while retrieving the user consents. The callback may be invoked on a different thread.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`Consent.getConsents { currentConsents ->\n    // Handle currentConsents\n}\n`}</code></pre>\n    <Variant platform=\"swift\" api=\"get-consents\" repeat=\"5\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func getConsents(completion: @escaping ([String: Any]?, Error?) -> Void)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`completion`}</em>{` - Invoked with the current consent preferences or an `}<inlineCode parentName=\"li\">{`AEPError`}</inlineCode>{` if an error occurs or the request times out. The completion may be invoked on a different thread.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`Consent.getConsents { currentConsents, error in\n    // Handle currentConsents\n}\n`}</code></pre>\n    <Variant platform=\"objc\" api=\"get-consents\" repeat=\"5\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) getConsents:^ (NSDictionary<NSString *,id> * _Nullable, NSError * _Nullable)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`completion`}</em>{` - Invoked with the current consent preferences or an `}<inlineCode parentName=\"li\">{`AEPError`}</inlineCode>{` if an error occurs or the request times out. The completion may be invoked on a different thread.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`[AEPMobileEdgeConsent getConsents:^(NSDictionary *currentConsents, NSError *error){\n    // Handle currentConsents\n}];\n`}</code></pre>\n    <Variant platform=\"java\" api=\"register-extension\" repeat=\"4\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void registerExtension();\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Consent.registerExtension();\n`}</code></pre>\n    <Variant platform=\"swift\" api=\"register-extension\" repeat=\"5\" mdxType=\"Variant\" />\n    <p>{`Use the MobileCore API to register the Edge Consent extension.`}</p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func registerExtensions(_ extensions: [NSObject.Type], \n                               _ completion: (() -> Void)? = nil)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import AEPEdgeConsent\n\n...\nMobileCore.registerExtensions([Consent.self])\n`}</code></pre>\n    <Variant platform=\"objc\" api=\"register-extension\" repeat=\"5\" mdxType=\"Variant\" />\n    <p>{`Use the AEPMobileCore API to register the Edge Consent extension.`}</p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) registerExtensions: (NSArray<Class*>* _Nonnull) extensions \n                  completion: (void (^ _Nullable)(void)) completion;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`@import AEPEdgeConsent;\n\n...\n[AEPMobileCore registerExtensions:@[AEPMobileEdgeConsent.class] completion:nil];\n`}</code></pre>\n    <Variant platform=\"java\" api=\"update-consents\" repeat=\"5\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void update(final Map<String, Object> consents);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`consents`}</em>{` - A `}<inlineCode parentName=\"li\">{`Map`}</inlineCode>{` of consents defined based on `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/xdm/blob/master/docs/reference/mixins/profile/profile-consents.schema.md\"\n        }}>{`Privacy/Personalization/Marketing Preferences `}{`(`}{`Consents`}{`)`}{` XDM Schema`}</a>{`.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// Example 1, updating users collect consent to 'yes'\nfinal Map<String, Object> collectConsents = new HashMap<>();\ncollectConsents.put(\"collect\", new HashMap<String, String>() {\n    {\n        put(\"val\", \"y\");\n    }\n});\n\nfinal Map<String, Object> consents = new HashMap<>();\nconsents.put(\"consents\", collectConsents);\n\nConsent.update(consents);\n\n// Example 2, updating users collect consent to 'no'\nfinal Map<String, Object> collectConsents = new HashMap<>();\ncollectConsents.put(\"collect\", new HashMap<String, String>() {\n    {\n        put(\"val\", \"n\");\n    }\n});\n\nfinal Map<String, Object> consents = new HashMap<>();\nconsents.put(\"consents\", collectConsents);\n\nConsent.update(consents);\n`}</code></pre>\n    <Variant platform=\"kotlin\" api=\"update-consents\" repeat=\"5\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`fun update(consents: Map<String, Any>)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`consents`}</em>{` - A `}<inlineCode parentName=\"li\">{`Map`}</inlineCode>{` of consents defined based on `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/xdm/blob/master/docs/reference/mixins/profile/profile-consents.schema.md\"\n        }}>{`Privacy/Personalization/Marketing Preferences `}{`(`}{`Consents`}{`)`}{` XDM Schema`}</a>{`.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`// Example 1, updating users collect consent to 'yes'\nval collectConsents = mutableMapOf<String, Any>()\ncollectConsents[\"collect\"] = mutableMapOf(\"val\" to \"y\")\n\nval consents = mutableMapOf<String, Any>()\nconsents[\"consents\"] = collectConsents\n\nConsent.update(consents)\n\n// Example 2, updating users collect consent to 'no'\nval collectConsents = mutableMapOf<String, Any>()\ncollectConsents[\"collect\"] = mutableMapOf(\"val\" to \"n\")\n\nval consents = mutableMapOf<String, Any>()\nconsents[\"consents\"] = collectConsents\n\nConsent.update(consents)\n`}</code></pre>\n    <Variant platform=\"swift\" api=\"update-consents\" repeat=\"5\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func update(with consents: [String: Any])\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`consents`}</em>{` - A `}<inlineCode parentName=\"li\">{`[String: Any]`}</inlineCode>{` of consents defined based on `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/xdm/blob/master/docs/reference/mixins/profile/profile-consents.schema.md\"\n        }}>{`Privacy/Personalization/Marketing Preferences `}{`(`}{`Consents`}{`)`}{` XDM Schema`}</a>{`.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`// Example 1, updating users collect consent to 'yes'\nlet collectConsent = [\"collect\": [\"val\": \"y\"]]\nlet currentConsents = [\"consents\": collectConsent]\nConsent.update(with: currentConsents)\n\n// Example 2, updating users collect consent to 'no'\nlet collectConsent = [\"collect\": [\"val\": \"n\"]]\nlet currentConsents = [\"consents\": collectConsent]\nConsent.update(with: currentConsents)\n`}</code></pre>\n    <Variant platform=\"objc\" api=\"update-consents\" repeat=\"5\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) updateWithConsents:(NSDictionary<NSString *,id> * _Nonnull)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`consents`}</em>{` - A `}<inlineCode parentName=\"li\">{`[String: Any]`}</inlineCode>{` of consents defined based on `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/xdm/blob/master/docs/reference/mixins/profile/profile-consents.schema.md\"\n        }}>{`Privacy/Personalization/Marketing Preferences `}{`(`}{`Consents`}{`)`}{` XDM Schema`}</a>{`.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`// Example 1, updating users collect consent to 'yes'\nNSDictionary *collectConsent = @{ @\"collect\": @{@\"val\": @\"y\"};\n[AEPMobileEdgeConsent updateWithConsents:@{@\"consents\": collectConsent}];\n\n// Example 2, updating users collect consent to 'no'\nNSDictionary *collectConsent = @{ @\"collect\": @{@\"val\": @\"n\"};\n[AEPMobileEdgeConsent updateWithConsents:@{@\"consents\": collectConsent}];\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Variant","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","platform","api","repeat","parentName","isMDXComponent"],"sourceRoot":""}