"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[8403,1493],{33023:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return m},default:function(){return h}});var a,o=t(87462),i=t(63366),s=(t(15007),t(64983)),r=t(91515),d=t(45859),l=t(20224),p=["components"],m={},c=(a="TabsBlock",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.mdx)("div",e)}),u={_frontmatter:m},x=r.Z;function h(e){var n=e.components,t=(0,i.Z)(e,p);return(0,s.mdx)(x,(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"adobe-experience-platform-assurance-extension"},"Adobe Experience Platform Assurance extension"),(0,s.mdx)("p",null,"This extension enables capabilities for ",(0,s.mdx)("a",{parentName:"p",href:"https://experienceleague.adobe.com/docs/experience-platform/assurance/home.html"},"Adobe Experience Platform Assurance"),"."),(0,s.mdx)("p",null,"To get started with Assurance in your app, you'll need to:"),(0,s.mdx)("ol",null,(0,s.mdx)("li",{parentName:"ol"},"Install the AEP Assurance extension in the ",(0,s.mdx)("a",{parentName:"li",href:"https://experience.adobe.com/#/data-collection"},"Data Collection UI")),(0,s.mdx)("li",{parentName:"ol"},"Add AEP Assurance SDK extension library to your app",(0,s.mdx)("ol",{parentName:"li"},(0,s.mdx)("li",{parentName:"ol"},"Import AEP Assurance into your app"),(0,s.mdx)("li",{parentName:"ol"},"Register and implement extension APIs")))),(0,s.mdx)("h2",{id:"install-the-aep-assurance-extension-in-the-data-collection-ui"},"Install the AEP Assurance extension in the Data Collection UI"),(0,s.mdx)("p",null,"Go to the ",(0,s.mdx)("a",{parentName:"p",href:"https://experience.adobe.com/#/data-collection/"},"Experience Platform Data Collection UI")," and select your mobile property:"),(0,s.mdx)("ol",null,(0,s.mdx)("li",{parentName:"ol"},"In the Data Collection UI, select the ",(0,s.mdx)("strong",{parentName:"li"},"Extensions")," tab."),(0,s.mdx)("li",{parentName:"ol"},"On the ",(0,s.mdx)("strong",{parentName:"li"},"Catalog")," tab, locate the ",(0,s.mdx)("strong",{parentName:"li"},"AEP Assurance")," extension, and select ",(0,s.mdx)("strong",{parentName:"li"},"Install"),"."),(0,s.mdx)("li",{parentName:"ol"},"Follow the publishing process to update the Mobile SDK configuration.")),(0,s.mdx)("p",null,(0,s.mdx)("span",{parentName:"p",className:"gatsby-resp-image-wrapper",style:{position:"relative",display:"block",marginLeft:"auto",marginRight:"auto",maxWidth:"306px"}},"\n      ",(0,s.mdx)("span",{parentName:"span",className:"gatsby-resp-image-background-image",style:{paddingBottom:"112.09150326797386%",position:"relative",bottom:"0",left:"0",display:"block",transition:"opacity 0.5s 0.5s",pointerEvents:"none"}}),"\n  ",(0,s.mdx)("picture",{parentName:"span"},"\n          ",(0,s.mdx)("source",{parentName:"picture",srcSet:["/aep-mobile-sdkdocs/static/d09b389ed5fea15148d3bad4ffd769c0/9423a/assurance-extension.webp 306w"],sizes:"(max-width: 306px) 100vw, 306px",type:"image/webp"}),"\n          ",(0,s.mdx)("source",{parentName:"picture",srcSet:["/aep-mobile-sdkdocs/static/d09b389ed5fea15148d3bad4ffd769c0/bed10/assurance-extension.png 306w"],sizes:"(max-width: 306px) 100vw, 306px",type:"image/png"}),"\n          ",(0,s.mdx)("img",{parentName:"picture",className:"gatsby-resp-image-image",src:"/aep-mobile-sdkdocs/static/d09b389ed5fea15148d3bad4ffd769c0/bed10/assurance-extension.png",alt:"assurance extension",title:"assurance extension",loading:"lazy",style:{width:"100%",height:"100%",margin:"0",verticalAlign:"middle",position:"absolute",opacity:"0",transition:"opacity 0.5s",color:"inherit",boxShadow:"inset 0px 0px 0px 400px none",top:"0",left:"0"}}),"\n        "),"\n    ")),(0,s.mdx)("h2",{id:"add-the-assurance-extension-to-your-app"},"Add the Assurance extension to your app"),(0,s.mdx)("h3",{id:"include-assurance-extension-as-an-app-dependency"},"Include Assurance extension as an app dependency"),(0,s.mdx)("p",null,"Add MobileCore and Assurance extensions as dependencies to your project."),(0,s.mdx)(c,{orientation:"horizontal",slots:"heading, content",repeat:"3",mdxType:"TabsBlock"}),(0,s.mdx)("p",null,"Kotlin",(0,s.mdx)("br",null),"(Android)"),(0,s.mdx)(d.default,{query:"platform=android-kotlin&task=add",mdxType:"Tabs"}),(0,s.mdx)("p",null,"Groovy",(0,s.mdx)("br",null),"(Android)"),(0,s.mdx)(d.default,{query:"platform=android-groovy&task=add",mdxType:"Tabs"}),(0,s.mdx)("p",null,"CocoaPods",(0,s.mdx)("br",null),"(iOS)"),(0,s.mdx)(d.default,{query:"platform=ios-pods&task=add",mdxType:"Tabs"}),(0,s.mdx)("h3",{id:"initialize-adobe-experience-platform-sdk-with-assurance-extension"},"Initialize Adobe Experience Platform SDK with Assurance Extension"),(0,s.mdx)("p",null,"Next, initialize the SDK by registering all the solution extensions that have been added as dependencies to your project with Mobile Core. For detailed instructions, refer to the ",(0,s.mdx)("a",{parentName:"p",href:"/aep-mobile-sdkdocs/src/pages/home/getting-started/get-the-sdk/#2-add-initialization-code"},"initialization")," section of the getting started page."),(0,s.mdx)("p",null,"Using the ",(0,s.mdx)("inlineCode",{parentName:"p"},"MobileCore.initialize")," API to initialize the Adobe Experience Platform Mobile SDK simplifies the process by automatically registering solution extensions and enabling lifecycle tracking."),(0,s.mdx)(l.default,{query:"componentClass=TabsBlock",mdxType:"InitializeSDK"}))}h.isMDXComponent=!0},45859:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return p},default:function(){return x}});var a,o=t(87462),i=t(63366),s=(t(15007),t(64983)),r=t(91515),d=t(47968),l=["components"],p={},m=(a="Variant",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.mdx)("div",e)}),c={_frontmatter:p},u=r.Z;function x(e){var n=e.components,t=(0,i.Z)(e,l);return(0,s.mdx)(u,(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.mdx)(m,{platform:"android-kotlin",task:"add",repeat:"3",mdxType:"Variant"}),(0,s.mdx)("p",null,"Add the required dependencies to your project by including them in the app's Gradle file."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-kotlin"},'implementation(platform("com.adobe.marketing.mobile:sdk-bom:3.+"))\nimplementation("com.adobe.marketing.mobile:core")\nimplementation("com.adobe.marketing.mobile:assurance")\n')),(0,s.mdx)(d.default,{query:"platform=android-gradle&componentClass=InlineNestedAlert",mdxType:"Alerts"}),(0,s.mdx)(m,{platform:"android-groovy",task:"add",repeat:"3",mdxType:"Variant"}),(0,s.mdx)("p",null,"Add the required dependencies to your project by including them in the app's Gradle file."),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-java"},"implementation platform('com.adobe.marketing.mobile:sdk-bom:3.+')\nimplementation 'com.adobe.marketing.mobile:core'\nimplementation 'com.adobe.marketing.mobile:assurance'\n")),(0,s.mdx)(d.default,{query:"platform=android-gradle&componentClass=InlineNestedAlert",mdxType:"Alerts"}),(0,s.mdx)(m,{platform:"ios-pods",task:"add",repeat:"2",mdxType:"Variant"}),(0,s.mdx)("p",null,"Add the required dependencies to your project using CocoaPods. Add following pods in your ",(0,s.mdx)("inlineCode",{parentName:"p"},"Podfile"),":"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-swift"},"use_frameworks!\n\ntarget 'YourTargetApp' do\n  pod 'AEPCore','~> 5.0'\n  pod 'AEPAssurance','~> 5.0'\nend\n")),(0,s.mdx)(m,{platform:"android",task:"implement-assurance",repeat:"1",mdxType:"Variant"}),(0,s.mdx)("p",null,"Deep linking is the best way to connnect to an Assurance session when using the Android SDK. Assurance SDK on Android is already setup to handle incoming intents to your app. You can ",(0,s.mdx)("a",{parentName:"p",href:"https://developer.android.com/training/app-links/deep-linking"},"add an intent filter for incoming links in your app")," to complete the deep link configuration. The combination of ",(0,s.mdx)("inlineCode",{parentName:"p"},"android:host")," and ",(0,s.mdx)("inlineCode",{parentName:"p"},"android:scheme")," (in the form of ",(0,s.mdx)("inlineCode",{parentName:"p"},"<host>://<scheme>"),") for this intent filter will serve as the Base URL while creating a session in the ",(0,s.mdx)("a",{parentName:"p",href:"https://experience.adobe.com/assurance"},"Adobe Experience Platform Assurance UI")),(0,s.mdx)(m,{platform:"ios",task:"implement-assurance",repeat:"13",mdxType:"Variant"}),(0,s.mdx)("p",null,"The ",(0,s.mdx)("a",{parentName:"p",href:"./api-reference.md#startsession"},"startSession")," API needs to be called to begin an Adobe Experience Platform Assurance session. You should call this API when the app launches with a URL (see code snippet below for sample usage). When called, SDK displays a PIN authentication overlay to begin a session."),(0,s.mdx)("h4",{id:"swift"},"Swift"),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Example")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-swift"},"    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {\n        Assurance.startSession(url: url)\n        return true\n    }\n")),(0,s.mdx)("p",null,"In iOS 13 and later, for a scene-based application, use the ",(0,s.mdx)("inlineCode",{parentName:"p"},"UISceneDelegate"),"'s ",(0,s.mdx)("inlineCode",{parentName:"p"},"scene(_:openURLContexts:)")," method as follows:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-swift"},"    func scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>) {\n        // Called when the app in background is opened with a deep link.\n        if let deepLinkURL = URLContexts.first?.url {\n            Assurance.startSession(url: deepLinkURL)\n        }\n    }\n\n    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n        // Called when the app launches with the deep link\n        if let deepLinkURL = connectionOptions.urlContexts.first?.url {\n            Assurance.startSession(url: deepLinkURL)\n        }\n    }\n")),(0,s.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Syntax")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-objectivec"},"static func startSession(url: URL?)\n")),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Example")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (BOOL)application:(UIApplication *)app openURL:(nonnull NSURL *)url options:(nonnull NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {\n    [AEPMobileAssurance startSessionWithUrl:url];\n    return true;\n}\n")),(0,s.mdx)("p",null,"In iOS 13 and later, for a scene-based application, use the ",(0,s.mdx)("inlineCode",{parentName:"p"},"UISceneDelegate"),"'s ",(0,s.mdx)("inlineCode",{parentName:"p"},"scene(_:openURLContexts:)")," method as follows:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-objectivec"},"\n- (void)scene:(UIScene *)scene willConnectToSession:(UISceneSession *)session options:(UISceneConnectionOptions *)connectionOptions {    \n    NSURL *deepLinkURL = connectionOptions.URLContexts.allObjects.firstObject.URL;\n    [AEPMobileAssurance startSessionWithUrl:deepLinkURL];\n}\n\n\n- (void)scene:(UIScene *)scene openURLContexts:(NSSet<UIOpenURLContext *> *)URLContexts {\n    [AEPMobileAssurance startSessionWithUrl:URLContexts.allObjects.firstObject.URL];\n}\n")))}x.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-home-base-assurance-index-md-45abef72e8de0c522bff.js.map