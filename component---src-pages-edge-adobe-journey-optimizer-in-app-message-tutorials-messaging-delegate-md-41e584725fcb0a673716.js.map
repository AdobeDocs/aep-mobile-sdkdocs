{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-in-app-message-tutorials-messaging-delegate-md-41e584725fcb0a673716.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/in-app-message/tutorials/messaging-delegate.md","webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/in-app-message/tutorials/tabs/messaging-delegate.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Tabs from './tabs/messaging-delegate.md';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst TabsBlock = makeShortcode(\"TabsBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"programmatically-control-the-display-of-in-app-messages\"\n    }}>{`Programmatically control the display of in-app messages`}</h1>\n    <p>{`You can now implement a `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{` in order to be alerted when specific events occur during the lifecycle of an in-app message.`}</p>\n    <h2 {...{\n      \"id\": \"register-the-delegate\"\n    }}>{`Register the delegate`}</h2>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&function=register\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&function=register\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"messagingdelegate-definition\"\n    }}>{`MessagingDelegate definition`}</h2>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&function=messaging-delegate\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&function=messaging-delegate\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"retrieve-the-message-object\"\n    }}>{`Retrieve the `}<inlineCode parentName=\"h2\">{`Message`}</inlineCode>{` object`}</h2>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&function=using-object\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&function=using-object\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"controlling-when-a-message-should-be-shown-to-the-end-user\"\n    }}>{`Controlling when a message should be shown to the end user`}</h2>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&function=controlling-message\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&function=controlling-message\" mdxType=\"Tabs\" />\n    <h3 {...{\n      \"id\": \"integrating-the-message-into-an-existing-ui\"\n    }}>{`Integrating the message into an existing UI`}</h3>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&function=integrate-message\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&function=integrate-message\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`The test apps in this repository demonstrate using a `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/aepsdk-messaging-ios/tree/main/TestApps/MessagingDemoApp\"\n        }}>{`Swift`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/aepsdk-messaging-ios/tree/main/TestApps/MessagingDemoAppObjC\"\n        }}>{`Objective-C`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/aepsdk-messaging-android/tree/main/code/app\"\n        }}>{`Java`}</a></li>\n    </ul>\n    <h4 {...{\n      \"id\": \"further-reading\"\n    }}>{`Further reading`}</h4>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"../../public-classes/message.md\"\n        }}>{`More information on how to use the Message object`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./native-from-javascript.md\"\n        }}>{`Call native code from the JavaScript of an in-app message`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"./javascript-from-native.md\"\n        }}>{`Execute JavaScript code in an in-app message from native code`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" function=\"register\" repeat=\"5\" mdxType=\"Variant\" />\n    <p>{`On Android, the delegate is registered with the Adobe Service Provider. The `}<inlineCode parentName=\"p\">{`ServiceProvider`}</inlineCode>{` class maintains an optional property that holds reference to the `}<inlineCode parentName=\"p\">{`FullscreenMessaageDelegate`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// defined in public class ServiceProvider \npublic void setMessageDelegate(MessagingDelegate messageDelegate)\n`}</code></pre>\n    <p>{`On Android, the delegate is registered with Mobile Core. The `}<inlineCode parentName=\"p\">{`MobileCore`}</inlineCode>{` contains a method to set the`}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{` withing the `}<inlineCode parentName=\"p\">{`ServiceProvider`}</inlineCode>{` class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`CustomDelegate myMessagingDelegate = new CustomDelegate();\n\nMobileCore.setMessagingDelegate(myMessagingDelegate);\n`}</code></pre>\n    <Variant platform=\"ios\" function=\"register\" repeat=\"5\" mdxType=\"Variant\" />\n    <p>{`On iOS, the delegate is registered with Mobile Core. The `}<inlineCode parentName=\"p\">{`MobileCore`}</inlineCode>{` framework maintains an optional property that holds reference to the `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`/// defined in MobileCore.swift\n@objc public static var messagingDelegate: MessagingDelegate?\n`}</code></pre>\n    <p>{`Assuming that `}<inlineCode parentName=\"p\">{`InAppMessagingHandler`}</inlineCode>{` is a class that implements `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{`, execute the following code to set the delegate in `}<inlineCode parentName=\"p\">{`MobileCore`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let myMessagingDelegate = InAppMessagingHandler()   \n\nMobileCore.messagingDelegate = myMessagingDelegate\n`}</code></pre>\n    <Variant platform=\"android\" function=\"messaging-delegate\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`The `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{` interface, which is implemented in the `}<inlineCode parentName=\"p\">{`AEPServices`}</inlineCode>{` framework, is defined below:`}</p>\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`/**\n * UI Message delegate which is used to listen for current message lifecycle events and control if\n * the message should be displayed.\n */\npublic interface MessagingDelegate {\n    /**\n     * Invoked when a message is displayed.\n     *\n     * @param message {@link FullscreenMessage} that is being displayed\n     */\n    default void onShow(final FullscreenMessage message) {\n        Log.debug(ServiceConstants.LOG_TAG, \"MessagingDelegate\", \"Fullscreen message shown.\");\n    }\n\n    /**\n     * Invoked when a message is dismissed.\n     *\n     * @param message {@link FullscreenMessage} that is being dismissed\n     */\n    default void onDismiss(final FullscreenMessage message) {\n        Log.debug(ServiceConstants.LOG_TAG, \"MessagingDelegate\", \"Fullscreen message dismissed.\");\n    }\n\n    /**\n     * Used to determine if a message should be shown.\n     *\n     * @param message {@link FullscreenMessage} that is about to get displayed\n     * @return true if the message should be displayed, false otherwise\n     */\n    boolean shouldShowMessage(final FullscreenMessage message);\n\n    /**\n     * Called when the {@link FullscreenMessage} loads a url.\n     *\n     * @param url {@code String} being loaded by the {@code FullscreenMessage}\n     * @param message {@link FullscreenMessage} loading a url {@code String}\n     */\n    default void urlLoaded(final String url, final FullscreenMessage message) {\n        Log.debug(\n                ServiceConstants.LOG_TAG,\n                \"MessagingDelegate\",\n                \"Fullscreen message loaded url: %s\",\n                url);\n    }\n}\n`}</code></pre>\n    <Variant platform=\"ios\" function=\"messaging-delegate\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`On iOS, the `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{` protocol, which is implemented in the `}<inlineCode parentName=\"p\">{`AEPServices`}</inlineCode>{` framework, is defined below:`}</p>\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`/// UI Message delegate which is used to listen for current message lifecycle events\n@objc(AEPMessagingDelegate)\npublic protocol MessagingDelegate {\n    /// Invoked when a message is displayed\n    /// - Parameters:\n    ///     - message: UIMessaging message that is being displayed\n    @objc(onShow:)\n    func onShow(message: Showable)\n\n    /// Invoked when a message is dismissed\n    /// - Parameters:\n    ///     - message: UIMessaging message that is being dismissed\n    @objc(onDismiss:)\n    func onDismiss(message: Showable)\n\n    /// Used to find whether messages should be shown or not\n    ///\n    /// IMPORTANT! - this method is called on a background thread. \n    /// Any direct interactions with the Message's WKWebView made by the delegate\n    /// should be dispatched back to the main thread.\n    ///\n    /// - Parameters:\n    ///     - message: UIMessaging message that is about to get displayed\n    /// - Returns: true if the message should be shown else false\n    @objc(shouldShowMessage:)\n    func shouldShowMessage(message: Showable) -> Bool\n\n    /// Called when \\`message\\` loads a URL\n    /// - Parameters:\n    ///     - url: the \\`URL\\` being loaded by the \\`message\\`\n    ///     - message: the Message loading a \\`URL\\`\n    @objc(urlLoaded:byMessage:)\n    optional func urlLoaded(_ url: URL, byMessage message: Showable)\n}\n`}</code></pre>\n    <Variant platform=\"android\" function=\"using-object\" repeat=\"4\" mdxType=\"Variant\" />\n    <p>{`The user interface methods (except for `}<inlineCode parentName=\"p\">{`onShowFailure()`}</inlineCode>{`) in a `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{` implementation will be passed an `}<inlineCode parentName=\"p\">{`AEPMessage`}</inlineCode>{` object. An `}<inlineCode parentName=\"p\">{`AEPMessage`}</inlineCode>{` object is the Android Core implementation of the `}<inlineCode parentName=\"p\">{`FullscreenMessage`}</inlineCode>{` interface. It contains a reference to the parent `}<inlineCode parentName=\"p\">{`Message`}</inlineCode>{` class and is your primary way to interact with the message.`}</p>\n    <p>{`A reference to the `}<inlineCode parentName=\"p\">{`AEPMessage`}</inlineCode>{` object can be obtained by calling `}<inlineCode parentName=\"p\">{`fullscreenMessage.getParent()`}</inlineCode>{` . An example of how to access the `}<inlineCode parentName=\"p\">{`Message`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`onShow`}</inlineCode>{` delegate method can be seen below:`}</p>\n    <h4 {...{\n      \"id\": \"java-2\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic void onShow(FullscreenMessage fullscreenMessage) {\n  Message message = (Message) fullscreenMessage.getParent();\n  System.out.println(\"message was shown: \" + message.id);\n}\n`}</code></pre>\n    <Variant platform=\"ios\" function=\"using-object\" repeat=\"6\" mdxType=\"Variant\" />\n    <p>{`Each of the methods implemented in the `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{` will be passed a `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/aepsdk-core-ios/blob/main/AEPServices/Sources/ui/Showable.swift\"\n      }}><inlineCode parentName=\"a\">{`Showable`}</inlineCode></a>{` object. In the AEPMessaging SDK, the class implementing `}<inlineCode parentName=\"p\">{`Showable`}</inlineCode>{` is `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/aepsdk-core-ios/blob/main/AEPServices/Sources/ui/fullscreen/FullscreenMessage.swift\"\n      }}><inlineCode parentName=\"a\">{`FullscreenMessage`}</inlineCode></a>{`. A `}<inlineCode parentName=\"p\">{`FullscreenMessage`}</inlineCode>{` object is wrapped in the `}<a parentName=\"p\" {...{\n        \"href\": \"../public-classes-enums.md\"\n      }}><inlineCode parentName=\"a\">{`Message`}</inlineCode></a>{` class, and is your primary way to interact with the message.`}</p>\n    <p>{`To get a reference to the `}<inlineCode parentName=\"p\">{`Message`}</inlineCode>{` object:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Convert the `}<inlineCode parentName=\"li\">{`Showable`}</inlineCode>{` message parameter to `}<inlineCode parentName=\"li\">{`FullscreenMessage`}</inlineCode></li>\n      <li parentName=\"ol\">{`Access the `}<inlineCode parentName=\"li\">{`parent`}</inlineCode>{` variable (note that `}<inlineCode parentName=\"li\">{`parent`}</inlineCode>{` is variable defined in `}<inlineCode parentName=\"li\">{`FullscreenMessage+Message.swift`}</inlineCode>{`, an extension in the AEPMessaging framework)`}</li>\n    </ol>\n    <p>{`An example of how to access the `}<inlineCode parentName=\"p\">{`Message`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`onShow`}</inlineCode>{` delegate method can be seen below:`}</p>\n    <h4 {...{\n      \"id\": \"swift-2\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func onShow(message: Showable) {\n    let fullscreenMessage = message as? FullscreenMessage\n    let message = fullscreenMessage?.parent\n    print(\"message was shown \\\\(message?.id ?? \"undefined\")\")\n}\n`}</code></pre>\n    <Variant platform=\"android\" function=\"controlling-message\" repeat=\"7\" mdxType=\"Variant\" />\n    <p>{`If a custom  `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{` has been set in the `}<inlineCode parentName=\"p\">{`ServiceProvider`}</inlineCode>{`, this delegate's `}<inlineCode parentName=\"p\">{`shouldShowMessage`}</inlineCode>{` method will be called prior to displaying an in-app message for which the end user has qualified. You are responsible for returning `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` if the message should be shown, or `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` if the message should be suppressed.`}</p>\n    <p>{`An example of when you may choose to suppress an in-app message due to the status of some other workflow within the app can be seen below:`}</p>\n    <h4 {...{\n      \"id\": \"java-3\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic boolean shouldShowMessage(FullscreenMessage fullscreenMessage) {\n   if (someOtherWorkflowStatus == \"inProgress\") {\n        return false;\n    }\n    return true;\n}\n`}</code></pre>\n    <p>{`Another option is to store a reference to the  `}<inlineCode parentName=\"p\">{`FullscreenMessage`}</inlineCode>{` object, and call the `}<inlineCode parentName=\"p\">{`show()`}</inlineCode>{` method on it at a later time.`}</p>\n    <p>{`Continuing with the above example, after you have stored the message that was triggered initially, you can choose to show it upon completion of the other workflow:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Message currentMessage = null;\nString anotherWorkflowStatus;\n\npublic void otherWorkflowFinished() {\n    anotherWorkflowStatus = \"complete\";\n    currentMessage.show();\n}\n\n@Override\npublic boolean shouldShowMessage(FullscreenMessage fullscreenMessage) {\n   if (someOtherWorkflowStatus.equals(\"inProgress\")) {\n     // store the current message for later use\n     currentMessage = (Message) fullscreenMessage.getParent();\n     return false;\n   }\n  \n  return true;\n}\n`}</code></pre>\n    <Variant platform=\"ios\" function=\"controlling-message\" repeat=\"7\" mdxType=\"Variant\" />\n    <p>{`If a `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{` has been provided to `}<inlineCode parentName=\"p\">{`MobileCore`}</inlineCode>{`, the delegate's `}<inlineCode parentName=\"p\">{`shouldShowMessage`}</inlineCode>{` method will be called prior to displaying an in-app message for which the end user has qualified. You are responsible for returning `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` if the message should be shown, or `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` if the message should be suppressed.`}</p>\n    <p>{`An example of when you may choose to suppress an in-app message due to the status of some other workflow within the app can be seen below:`}</p>\n    <h4 {...{\n      \"id\": \"swift-3\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func shouldShowMessage(message: Showable) -> Bool {\n    if someOtherWorkflowStatus == \"inProgress\" {\n        return false\n    }\n\n    return true\n}\n`}</code></pre>\n    <p>{`Another option is to store a reference to the `}<inlineCode parentName=\"p\">{`Message`}</inlineCode>{` object, and call the `}<inlineCode parentName=\"p\">{`show()`}</inlineCode>{` method on it at a later time.`}</p>\n    <p>{`Continuing with the above example, after you have stored the message that was triggered initially, you can choose to show it upon completion of the other workflow:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`var currentMessage: Message?\n\nfunc otherWorkflowFinished() {\n    anotherWorkflowStatus = \"complete\"\n    currentMessage?.show()\n}\n\nfunc shouldShowMessage(message: Showable) -> Bool {\n    if someOtherWorkflowStatus == \"inProgress\" {        \n        let fullscreenMessage = message as? FullscreenMessage\n\n        // store the current message for later use\n        currentMessage = fullscreenMessage?.parent\n\n        return false\n    }\n\n    return true\n}\n`}</code></pre>\n    <Variant platform=\"android\" function=\"integrate-message\" repeat=\"4\" mdxType=\"Variant\" />\n    <p>{`If you would like to manually integrate the `}<inlineCode parentName=\"p\">{`View`}</inlineCode>{` that contains the UI for an in-app message, you can do so by accessing the `}<inlineCode parentName=\"p\">{`WebView`}</inlineCode>{` directly in a `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{` method.  `}</p>\n    <p>{`In the example below, you can decide whether or not the in-app message should be directly integrated into your existing UI. If so, you capture a reference to the message's `}<inlineCode parentName=\"p\">{`WebView`}</inlineCode>{` and return `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` to prevent the message from being shown by the SDK:`}</p>\n    <h4 {...{\n      \"id\": \"java-4\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`private Message currentMessage = null;\nprivate boolean shouldIntegrateMessageDirectly = true;\nprivate MessageWebView inAppMessageView;\n\n@Override\npublic boolean shouldShowMessage(FullscreenMessage fullscreenMessage) {\n  if (shouldIntegrateMessageDirectly) {\n    this.currentMessage = (Message) fullscreenMessage.getParent();\n    \n    // cast to MessageWebView to access the startInAppMessage function\n    inAppMessageView = (MessageWebView) currentMessage.getWebView();\n    \n    return false;\n  }\n  \n  return true;\n}\n`}</code></pre>\n    <Variant platform=\"ios\" function=\"integrate-message\" repeat=\"4\" mdxType=\"Variant\" />\n    <p>{`If you would like to manually integrate the `}<inlineCode parentName=\"p\">{`View`}</inlineCode>{` that contains the UI for an in-app message, you can do so by accessing the `}<inlineCode parentName=\"p\">{`WKWebView`}</inlineCode>{` directly in a `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{` method.  `}</p>\n    <p>{`IMPORTANT! - The `}<inlineCode parentName=\"p\">{`shouldShowMessage`}</inlineCode>{` delegate method is called on a background thread. Any direct interactions with the Message's `}<inlineCode parentName=\"p\">{`WKWebView`}</inlineCode>{` made by the delegate should be dispatched back to the main thread.`}</p>\n    <p>{`In the example below, you can decide whether or not the in-app message should be directly integrated into your existing UI. If so, you capture a reference to the message's `}<inlineCode parentName=\"p\">{`WKWebView`}</inlineCode>{` and return `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` to prevent the message from being shown by the SDK:`}</p>\n    <h4 {...{\n      \"id\": \"swift-4\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`var inAppMessageView: WKWebView?\n\nfunc shouldShowMessage(message: Showable) -> Bool {    \n    if shouldIntegrateMessageDirectly {\n        let fullscreenMessage = message as? FullscreenMessage\n        let message = fullscreenMessage?.parent\n\n        inAppMessageView = message?.view as? WKWebView\n\n        return false\n    }\n\n    return true\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","TabsBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","orientation","slots","repeat","query","isMDXComponent","Variant","platform","function"],"sourceRoot":""}