{"version":3,"file":"component---src-pages-home-base-mobile-core-signal-tabs-index-md-405f8da9b7cbf8845a55.js","mappings":"mTAMaA,EAAe,CAAC,EACvBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EAClB,CAAC,EACKG,EAAUL,EAAc,WACxBM,EAAoBN,EAAc,qBAClCO,EAAc,CAClBR,aAAAA,GAEIS,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGT,GAAK,YAER,OAAO,SAACM,GAAS,UAAKD,EAAiBL,EAAK,CAAES,WAAYA,EAAYC,QAAQ,eAG5E,SAACP,EAAO,CAACQ,SAAS,UAAUC,KAAK,MAAMC,OAAO,IAAIH,QAAQ,aAC1D,eACE,GAAM,QAAM,SAEd,uEAAwD,cAAGI,WAAW,IAClE,KAAQ,eAAa,eACD,4DACxB,SAACV,EAAiB,CAACW,QAAQ,UAAUC,OAAO,QAAQC,aAAa,OAAOP,QAAQ,sBAC9E,2DAA4C,mBAAQI,WAAW,KAAG,OAAiB,sDAAsD,cAAGA,WAAW,IACnJ,KAAQ,oDAAkD,sCACf,4BAEjD,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,+KAKhC,uGACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,gGAIhC,SAACX,EAAO,CAACQ,SAAS,MAAMC,KAAK,MAAMC,OAAO,IAAIH,QAAQ,aACtD,4EAA6D,cAAGI,WAAW,IACvE,KAAQ,eAAa,eACD,gDACxB,iDAAkC,uBAAYA,WAAW,KAAG,WAAyB,MACrF,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBAAc,wDAI/B,mDACA,eACE,GAAM,SAAO,UAEf,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBAAgB,wCAIjC,eACE,GAAM,eAAa,gBAErB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBAAqB,4CAgBtC,SAACX,EAAO,CAACQ,SAAS,UAAUC,KAAK,WAAWC,OAAO,IAAIH,QAAQ,aAC/D,wCAAyB,uBAAYI,WAAW,KAAG,oBAAkC,mBAAmB,uBAAYA,WAAW,KAAG,cAA4B,4CAC9J,eACE,GAAM,UAAQ,SAEhB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,+YAehC,SAACX,EAAO,CAACQ,SAAS,MAAMC,KAAK,WAAWC,OAAO,IAAIH,QAAQ,aAC3D,oCAAqB,uBAAYI,WAAW,KAAG,6CAA2D,sDAC1G,eACE,GAAM,WAAS,UAEjB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBAAgB,oVASjC,eACE,GAAM,iBAAe,gBAEvB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBAAqB,oVAiB1C,CAEAN,EAAWU,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/home/base/mobile-core/signal/tabs/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst InlineNestedAlert = makeShortcode(\"InlineNestedAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" task=\"add\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <p>{`Add the Signal extension and its dependency, the `}<a parentName=\"p\" {...{\n        \"href\": \"../index.md\"\n      }}>{`Mobile Core`}</a>{` extension to your project using the app's Gradle file.`}</p>\n    <InlineNestedAlert variant=\"warning\" header=\"false\" iconPosition=\"left\" mdxType=\"InlineNestedAlert\">\n      <p>{`Using dynamic dependency versions is `}<strong parentName=\"p\">{`not`}</strong>{` recommended for production apps. Please read the `}<a parentName=\"p\" {...{\n          \"href\": \"../../../resources/manage-gradle-dependencies.md\"\n        }}>{`managing Gradle dependencies guide`}</a>{` for more information.`}</p>\n    </InlineNestedAlert>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`implementation platform('com.adobe.marketing.mobile:sdk-bom:2.+')\nimplementation 'com.adobe.marketing.mobile:core'\nimplementation 'com.adobe.marketing.mobile:signal'\n`}</code></pre>\n    <p>{`Import the Signal and MobileCore extensions in your application's main activity.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import com.adobe.marketing.mobile.MobileCore;\nimport com.adobe.marketing.mobile.Signal;\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"add\" repeat=\"8\" mdxType=\"Variant\" />\n    <p>{`â€‹Add the AEPSignal extension and it's dependency, the `}<a parentName=\"p\" {...{\n        \"href\": \"../index.md\"\n      }}>{`Mobile Core`}</a>{` extension to your project using Cocoapods.`}</p>\n    <p>{`Add following pods in your `}<inlineCode parentName=\"p\">{`Podfile`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-pod\"\n      }}>{`pod 'AEPCore','~> 3.0'\npod 'AEPSignal','~> 3.0'\n`}</code></pre>\n    <p>{`Import the Signal libraries:`}</p>\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import AEPCore\nimport AEPSignal\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`@import AEPCore;\n@import AEPSignal;\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" task=\"add\" repeat=\"3\"/>\n     #### JavaScript\n     Importing the Signal extension:\n     ```jsx\n     import {ACPSignal} from '@adobe/react-native-acpcore';\n     ```\n     <Variant platform=\"flutter\" task=\"add\" repeat=\"3\"/>\n     #### Dart\n     Importing the Signal extension:\n     ```dart\n     import 'package:flutter_acpcore/flutter_acpsignal.dart';\n     ``` -*/}\n    <Variant platform=\"android\" task=\"register\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`After calling the `}<inlineCode parentName=\"p\">{`setApplication()`}</inlineCode>{` method in the `}<inlineCode parentName=\"p\">{`onCreate()`}</inlineCode>{` method, register the Signal extension.`}</p>\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class MobileApp extends Application {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        MobileCore.setApplication(this);\n\n        List<Class<? extends Extension>> extensions = Arrays.asList(Signal.EXTENSION, ...);\n        MobileCore.registerExtensions(extensions, o -> {\n            // Any other post registration processing\n        });\n    }\n}\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"register\" repeat=\"5\" mdxType=\"Variant\" />\n    <p>{`In your app's `}<inlineCode parentName=\"p\">{`application:didFinishLaunchingWithOptions`}</inlineCode>{`, register the Signal extension with Mobile Core:`}</p>\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n     MobileCore.registerExtensions([Signal.self, ...]) {\n       MobileCore.configureWith(appId: \"yourAppId\")\n       // Any other post registration processing\n     }\n     return true;\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-1\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    [AEPMobileCore registerExtensions:@[AEPMobileSignal.class, ...] completion:^{\n        [AEPMobileCore configureWithAppId: @\"yourAppId\"];\n        // Any other post registration processing\n    }];\n    return YES;\n }\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" task=\"register\" repeat=\"2\"/>\n     #### JavaScript\n     When using React Native, registering Signal with Mobile Core should be done in native code which is shown under the Android and iOS tabs.\n     <Variant platform=\"flutter\" task=\"register\" repeat=\"2\"/>\n     #### Dart\n     When using Flutter, registering Signal with Mobile Core should be done in native code which is shown under the Android and iOS tabs. -*/}\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","Variant","InlineNestedAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","platform","task","repeat","parentName","variant","header","iconPosition","isMDXComponent"],"sourceRoot":""}