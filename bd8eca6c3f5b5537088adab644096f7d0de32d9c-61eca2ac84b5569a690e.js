"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[332],{27586:function(e,a,n){n.r(a),n.d(a,{_frontmatter:function(){return o},default:function(){return u}});var t=n(87462),l=n(63366),r=(n(15007),n(64983)),i=n(91515),m=["components"],o={},p=function(e){return function(a){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",a)}},d=p("Variant"),s=p("InlineNestedAlert"),c={_frontmatter:o},x=i.Z;function u(e){var a=e.components,n=(0,l.Z)(e,m);return(0,r.mdx)(x,(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,r.mdx)(d,{platform:"android",api:"collect-launch-info",repeat:"2",mdxType:"Variant"}),(0,r.mdx)("p",null,"The Android SDK automatically registers an ",(0,r.mdx)("inlineCode",{parentName:"p"},"Application.ActivityLifecycleCallbacks"),"and listens for ",(0,r.mdx)("inlineCode",{parentName:"p"},"onActivityResumed"),". When an activity is resumed, SDK collects the data from the activity. Currently, it is being used in the following scenarios:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Tracking deep link clickthrough"),(0,r.mdx)("li",{parentName:"ul"},"Tracking push message clickthrough"),(0,r.mdx)("li",{parentName:"ul"},"Tracking Local Notification clickthrough")),(0,r.mdx)(d,{platform:"ios",api:"collect-launch-info",repeat:"14",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift"},"Swift"),(0,r.mdx)("p",null,"This method should be called to support the following use cases:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Tracking deep link clickthroughs",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"From ",(0,r.mdx)("inlineCode",{parentName:"li"},"application(_:didFinishLaunchingWithOptions:)")),(0,r.mdx)("li",{parentName:"ul"},"Extract ",(0,r.mdx)("inlineCode",{parentName:"li"},"userInfo")," from ",(0,r.mdx)("inlineCode",{parentName:"li"},"url: UIApplication.LaunchOptionsKey")))),(0,r.mdx)("li",{parentName:"ul"},"Tracking push message clickthrough",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"From ",(0,r.mdx)("inlineCode",{parentName:"li"},"application(_:didReceiveRemoteNotification:fetchCompletionHandler:)"))))),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"}," public static func collectLaunchInfo(_ userInfo: [String: Any])\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"}," MobileCore.collectLaunchInfo(userInfo)\n")),(0,r.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,r.mdx)("p",null,"This method should be called to support the following use cases:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Tracking deep link clickthroughs",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"From ",(0,r.mdx)("inlineCode",{parentName:"li"},"application:didFinishLaunchingWithOptions")),(0,r.mdx)("li",{parentName:"ul"},"Extract ",(0,r.mdx)("inlineCode",{parentName:"li"},"userInfo")," from ",(0,r.mdx)("inlineCode",{parentName:"li"},"UIApplicationLaunchOptionsURLKey"),(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"Tracking push message clickthrough"))),(0,r.mdx)("li",{parentName:"ul"},"From ",(0,r.mdx)("inlineCode",{parentName:"li"},"application:didReceiveRemoteNotification:fetchCompletionHandler:"))))),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objc"},"@objc(collectLaunchInfo:)\npublic static func collectLaunchInfo(_ userInfo: [String: Any])\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objc"}," [AEPMobileCore collectLaunchInfo:launchOptions];\n")),(0,r.mdx)(d,{platform:"android",api:"collect-pii",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void collectPii(@NonNull final Map<String, String> data)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'Map<String, String> data = new HashMap<String, String>();\ndata.put("firstname", "customer");\n//The rule to trigger a PII needs to be setup for this call\n//to result in a network send\nMobileCore.collectPii(data);\n')),(0,r.mdx)(d,{platform:"ios",api:"collect-pii",repeat:"10",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-1"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"public static func collectPii(_ data: [String: Any])\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'MobileCore.collectPii(["key1" : "value1","key2" : "value2"]);\n')),(0,r.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"}," @objc(collectPii:)\n public static func collectPii(_ data: [String: Any])\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},' [AEPMobileCore collectPii:data:@{@"key1" : @"value1",\n                            @"key2" : @"value2"\n                            }];\n')),(0,r.mdx)(d,{platform:"android",api:"dispatch-event",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-1"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void dispatchEvent(@NonNull final Event event)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'final Map<String, Object> eventData = new HashMap<>();\neventData.put("sampleKey", "sampleValue");\n\nfinal Event sampleEvent = new Event.Builder("SampleEventName", "SampleEventType", "SampleEventSource")\n                          .setEventData(eventData)\n                          .build();\n\nMobileCore.dispatchEvent(sampleEvent);\n')),(0,r.mdx)(d,{platform:"ios",api:"dispatch-event",repeat:"10",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-2"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"public static func dispatch(event: Event)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'let event = Event(name: "Sample Event Name", type: EventType.custom, source: EventType.custom, data: ["sampleKey": "sampleValue"])\nMobileCore.dispatch(event: event)\n')),(0,r.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"@objc(dispatch:)\npublic static func dispatch(event: Event)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'AEPEvent *event = [[AEPEvent alloc] initWithName:@"Sample Event Name" type:AEPEventType.custom source:AEPEventType.custom data:@{@"sampleKey": @"sampleValue"}];\n[AEPMobileCore dispatch:event];\n')),(0,r.mdx)(d,{platform:"android",api:"dispatch-event-with-response-callback",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-2"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void dispatchEventWithResponseCallback(@NonNull final Event event, final long timeoutMS, @NonNull final AdobeCallbackWithError<Event> responseCallback)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'final Map<String, Object> eventData = new HashMap<>();\neventData.put("sampleKey", "sampleValue");\n\nfinal Event sampleEvent = new Event.Builder("My Event", "SampleEventType", "SampleEventSource")\n                          .setEventData(eventData)\n                          .build();\n\nMobileCore.dispatchEventWithResponseCallback(sampleEvent, 5000L, new AdobeCallbackWithError<Event>() {\n    // handle response event\n});\n')),(0,r.mdx)(d,{platform:"ios",api:"dispatch-event-with-response-callback",repeat:"10",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-3"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"public static func dispatch(event: Event, timeout: TimeInterval = 1, responseCallback: @escaping (Event?) -> Void)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'let event = Event(name: "My Event", type: EventType.custom, source: EventType.custom, data: ["sampleKey": "sampleValue"])\nMobileCore.dispatch(event: event) { (responseEvent) in\n    // handle responseEvent\n}\n')),(0,r.mdx)("h4",{id:"objective-c-3"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"@objc(dispatch:timeout:responseCallback:)\npublic static func dispatch(event: Event, timeout: TimeInterval = 1, responseCallback: @escaping (Event?) -> Void)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'AEPEvent *event = [[AEPEvent alloc] initWithName:@"My Event" type:AEPEventType.custom source:AEPEventType.custom data:@{@"sampleKey": @"sampleValue"}];\n[AEPMobileCore dispatch:event responseCallback:^(AEPEvent * _Nullable responseEvent) {\n    // handle responseEvent\n}];\n')),(0,r.mdx)(d,{platform:"android",api:"get-application",repeat:"6",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-3"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"MobileCore.getApplication")," will return ",(0,r.mdx)("inlineCode",{parentName:"p"},"null")," if the ",(0,r.mdx)("inlineCode",{parentName:"p"},"Application")," object was destroyed or if ",(0,r.mdx)("inlineCode",{parentName:"p"},"MobileCore.setApplication")," was not previously called."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"@Nullable\npublic static Application getApplication()\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"Application app = MobileCore.getApplication();\nif (app != null) {\n    ...\n}\n")),(0,r.mdx)(d,{platform:"android",api:"get-log-level",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-4"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"@NonNull\npublic static LoggingMode getLogLevel()\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"LoggingMode mode = MobileCore.getLogLevel();\n")),(0,r.mdx)(d,{platform:"ios",api:"get-log-level",repeat:"12",mdxType:"Variant"}),(0,r.mdx)("p",null,"The logLevel getter has been deprecated. To get the log level in the Swift AEP 3.x SDKs, please use ",(0,r.mdx)("inlineCode",{parentName:"p"},"Log.logFilter")," instead."),(0,r.mdx)("h4",{id:"swift-4"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"public static var logFilter: LogLevel\n")),(0,r.mdx)("p",null,"This variable is part of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"Log")," class within ",(0,r.mdx)("inlineCode",{parentName:"p"},"AEPServices"),"."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"var logLevel = Log.logFilter\n")),(0,r.mdx)("h4",{id:"objective-c-4"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"@objc public static var logFilter: LogLevel\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"AEPLogLevel logLevel = [AEPLog logFilter];\n")),(0,r.mdx)(d,{platform:"android",api:"get-sdk-identities",repeat:"6",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-5"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"void getSdkIdentities(@NonNull AdobeCallback<String> callback);\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"callback")," is invoked with the SDK identities as a JSON string. If an instance of  ",(0,r.mdx)("inlineCode",{parentName:"li"},"AdobeCallbackWithError")," is provided, and you are fetching the attributes from the Mobile SDK, the timeout value is 5000ms. If the operation times out or an unexpected error occurs, the ",(0,r.mdx)("inlineCode",{parentName:"li"},"fail")," method is called with the appropriate ",(0,r.mdx)("inlineCode",{parentName:"li"},"AdobeError"),".")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"MobileCore.getSdkIdentities(new AdobeCallback<String>() {\n    @Override\n    public void call(String value) {\n        // handle the json string\n    }\n});\n")),(0,r.mdx)(d,{platform:"ios",api:"get-sdk-identities",repeat:"12",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-5"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static func getSdkIdentities(completion: @escaping (String?, Error?) -> Void)\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"callback")," is invoked with the SDK identities as a JSON string."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"completionHandler")," is invoked with the SDK identities as a JSON string, or ",(0,r.mdx)("em",{parentName:"li"},"error")," if an unexpected error occurs or the request times out. The default timeout is 1000ms.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"}," MobileCore.getSdkIdentities { (content, error) in\n     // handle completion\n }\n")),(0,r.mdx)("h4",{id:"objective-c-5"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"}," @objc(getSdkIdentities:)\n static func getSdkIdentities(completion: @escaping (String?, Error?) -> Void)\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"callback")," is invoked with the SDK identities as a JSON string."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"completionHandler")," is invoked with the SDK identities as a JSON string, or ",(0,r.mdx)("em",{parentName:"li"},"error")," if an unexpected error occurs or the request times out. The default timeout is 1000ms.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"}," [AEPMobileCore getSdkIdentities:^(NSString * _Nullable content, NSError * _Nullable error) {\n     if (error) {\n       // handle error here\n     } else {\n       // handle the retrieved identities\n     }\n }];\n")),(0,r.mdx)(d,{platform:"android",api:"log",repeat:"11",mdxType:"Variant"}),(0,r.mdx)("p",null,"This API was deprecated in v2.0.0 of the Mobile Core extension. Use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"com.adobe.marketing.mobile.services.Log")," instead."),(0,r.mdx)("h4",{id:"java-6"},"Java"),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"MobileCore")," logging APIs use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"android.util.Log")," APIs to log messages to Android. Based on the ",(0,r.mdx)("inlineCode",{parentName:"p"},"LoggingMode")," that is passed to ",(0,r.mdx)("inlineCode",{parentName:"p"},"MobileCore.log()"),", the following Android method is called:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"LoggingMode.VERBOSE")," uses ",(0,r.mdx)("inlineCode",{parentName:"li"},"android.util.Log.v")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"LoggingMode.DEBUG")," uses ",(0,r.mdx)("inlineCode",{parentName:"li"},"android.util.Log.d")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"LoggingMode.WARNING")," uses ",(0,r.mdx)("inlineCode",{parentName:"li"},"android.util.Log.w")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"LoggingMode.ERROR")," uses ",(0,r.mdx)("inlineCode",{parentName:"li"},"android.util.Log.e"))),(0,r.mdx)("p",null,"All log messages from the Adobe Experience SDK to Android use the same log tag of ",(0,r.mdx)("inlineCode",{parentName:"p"},"AdobeExperienceSDK"),". For example, if logging an error message is using ",(0,r.mdx)("inlineCode",{parentName:"p"},"MobileCore.log()"),", the call to ",(0,r.mdx)("inlineCode",{parentName:"p"},"android.util.Log.e")," looks like ",(0,r.mdx)("inlineCode",{parentName:"p"},'Log.e("AdobeExperienceSDK", tag + " - " + message)'),"."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void log(final LoggingMode mode, final String tag, final String message)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'MobileCore.log(LoggingMode.DEBUG, "MyClassName", "Provided data was null");\n')),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Output")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"},"D/AdobeExperienceSDK: MyClassName - Provided data was null\n")),(0,r.mdx)(d,{platform:"ios",api:"log",repeat:"12",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-6"},"Swift"),(0,r.mdx)("p",null,"The log messages from the Adobe Experience SDK are printed to the Apple System Log facility and use a common format that contains the tag ",(0,r.mdx)("inlineCode",{parentName:"p"},"AEP SDK"),". For example, if logging an error message using ",(0,r.mdx)("inlineCode",{parentName:"p"},"Log.error(label:_ message:_)"),", the printed output looks like ",(0,r.mdx)("inlineCode",{parentName:"p"},"[AEP SDK ERROR <label>]: message"),"."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"public static func trace(label: String, _ message: String) {\npublic static func debug(label: String, _ message: String)\npublic static func warning(label: String, _ message: String) {\npublic static func error(label: String, _ message: String) {\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'Log.trace(label: "testLabel", "Test message")\nLog.debug(label: "testLabel", "Test message")\nLog.warning(label: "testLabel", "Test message")\nLog.error(label: "testLabel", "Test message")\n')),(0,r.mdx)("h4",{id:"objective-c-6"},"Objective-C"),(0,r.mdx)("p",null,"The log messages from the Adobe Experience SDK are printed to the Apple System Log facility and use a common format that contains the tag ",(0,r.mdx)("inlineCode",{parentName:"p"},"AEP SDK"),". For example, if logging an error message using ",(0,r.mdx)("inlineCode",{parentName:"p"},"[AEPLog errorWithLabel: _ message:_]"),", the printed output looks like ",(0,r.mdx)("inlineCode",{parentName:"p"},"[AEP SDK ERROR <label>]: message"),"."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(traceWithLabel:message:)\npublic static func trace(label: String, _ message: String)\n\n@objc(debugWithLabel:message:)\npublic static func debug(label: String, _ message: String)\n\n@objc(warningWithLabel:message:)\npublic static func warning(label: String, _ message: String)\n\n@objc(errorWithLabel:message:)\npublic static func error(label: String, _ message: String)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[AEPLog traceWithLabel:@"testLabel" message:@"testMessage"];\n[AEPLog debugWithLabel:@"testLabel" message:@"testMessage"];\n[AEPLog warningWithLabel:@"testLabel" message:@"testMessage"];\n[AEPLog errorWithLabel:@"testLabel" message:@"testMessage"];\n')),(0,r.mdx)(d,{platform:"android",api:"register-event-listener",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-7"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void registerEventListener(@NonNull final String eventType, @NonNull final String eventSource, @NonNull final AdobeCallback<Event> callback)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"MobileCore.registerEventListener(EventType.CONFIGURATION, EventSource.RESPONSE_CONTENT, new AdobeCallback<Event>() {\n    @Override\n    public void call(Event value) {\n        // handle event\n    }\n});\n")),(0,r.mdx)(d,{platform:"ios",api:"register-event-listener",repeat:"10",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-7"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"public static func registerEventListener(type: String, source: String, listener: @escaping EventListener)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"MobileCore.registerEventListener(type: EventType.configuration, source: EventSource.responseContent, listener: { event in\n   // handle event\n})\n")),(0,r.mdx)("h4",{id:"objective-c-7"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objc"},"@objc(registerEventListenerWithType:source:listener:)\npublic static func registerEventListener(type: String, source: String, listener: @escaping EventListener)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[AEPMobileCore registerEventListenerWithType: type source: source listener:^(AEPEvent * _Nonnull event) {\n   // handle event\n}];\n")),(0,r.mdx)(d,{platform:"android",api:"register-extension",repeat:"6",mdxType:"Variant"}),(0,r.mdx)(s,{variant:"warning",header:"true",iconPosition:"left",mdxType:"InlineNestedAlert"},(0,r.mdx)("p",null,"This API has been deprecated starting in v2.0.0 and removed in v3.0.0 of Mobile Core extension."),(0,r.mdx)("p",null,"Use ",(0,r.mdx)("a",{parentName:"p",href:"#registerextensions"},"registerExtensions")," to register desired extensions and boot up the SDK for event processing. Calling ",(0,r.mdx)("inlineCode",{parentName:"p"},"MobileCore.start()")," API is no longer required when using ",(0,r.mdx)("inlineCode",{parentName:"p"},"MobileCore.registerExtensions()"),".")),(0,r.mdx)("h4",{id:"java-8"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static boolean registerExtension(@NonNull final Class<? extends Extension> extensionClass, @Nullable final ExtensionErrorCallback<ExtensionError> errorCallback)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"MobileCore.registerExtension(Signal.EXTENSION, errorCallback -> {\n  // handle callback                   \n});\n")),(0,r.mdx)(d,{platform:"ios",api:"register-extension",repeat:"10",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-8"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"public static func registerExtension(_ exten: Extension.Type, _ completion: (() -> Void)? = nil)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"MobileCore.registerExtension(Lifecycle.self) {\n    // handle completion\n}\n")),(0,r.mdx)("h4",{id:"objective-c-8"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objc"},"@objc(registerExtension:completion:)\npublic static func registerExtension(_ exten: Extension.Type, _ completion: (() -> Void)? = nil)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[AEPMobileCore registerExtension:AEPMobileLifecycle.class completion:^{\n   // handle completion\n}];\n")),(0,r.mdx)(d,{platform:"android",api:"register-extensions",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-9"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void registerExtensions(@NonNull final List<Class<? extends Extension>> extensions, @Nullable final AdobeCallback<?> completionCallback)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'import com.adobe.marketing.mobile.AdobeCallback;\nimport com.adobe.marketing.mobile.Edge;\nimport com.adobe.marketing.mobile.edge.consent.Consent;\nimport com.adobe.marketing.mobile.edge.identity.Identity;\nimport com.adobe.marketing.mobile.Lifecycle;\nimport com.adobe.marketing.mobile.LoggingMode;\nimport com.adobe.marketing.mobile.MobileCore;\nimport com.adobe.marketing.mobile.Signal;\nimport com.adobe.marketing.mobile.UserProfile;\n...\nimport android.app.Application;\n...\npublic class MainApp extends Application {\n\n    // Set up the preferred Environment File ID from your mobile property configured in Data Collection UI\n    private static final String ENVIRONMENT_FILE_ID = "YOUR_ENVIRONMENT_FILE_ID";\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        MobileCore.setApplication(this);\n        MobileCore.configureWithAppID(ENVIRONMENT_FILE_ID);\n\n        List<Class<? extends Extension>> extensions = Arrays.asList(\n                Lifecycle.EXTENSION,\n                Signal.EXTENSION,\n                UserProfile.EXTENSION\n                Edge.EXTENSION,\n                Consent.EXTENSION,\n                EdgeIdentity.EXTENSION);\n        MobileCore.registerExtensions(extensions, o -> {\n            Log.d(LOG_TAG, "AEP Mobile SDK is initialized");\n        });\n    }\n}\n')),(0,r.mdx)(d,{platform:"ios",api:"register-extensions",repeat:"10",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-9"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"public static func registerExtensions(_ extensions: [NSObject.Type], _ completion: (() -> Void)? = nil)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'// AppDelegate.swift\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    MobileCore.registerExtensions([Signal.self, Lifecycle.self, UserProfile.self, Edge.self, AEPEdgeIdentity.Identity.self, Consent.self], {\n        MobileCore.configureWith(appId: "yourAppId")\n    })\n  ...\n}\n')),(0,r.mdx)("h4",{id:"objective-c-9"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objc"},"@objc(registerExtensions:completion:)\npublic static func registerExtensions(_ extensions: [NSObject.Type], _ completion: (() -> Void)? = nil)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'// AppDelegate.m\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    [AEPMobileCore registerExtensions:@[AEPMobileSignal.class, AEPMobileLifecycle.class, AEPMobileUserProfile.class, AEPMobileEdge.class, AEPMobileEdgeIdentity.class, AEPMobileEdgeConsent.class] completion:^{\n    [AEPMobileCore configureWithAppId: @"yourAppId"];\n  }];\n  ...\n}\n')),(0,r.mdx)(d,{platform:"android",api:"reset-identities",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-10"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"void resetIdentities();\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"MobileCore.resetIdentities();\n")),(0,r.mdx)(d,{platform:"ios",api:"reset-identities",repeat:"10",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-10"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static func resetIdentities()\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"MobileCore.resetIdentities()\n")),(0,r.mdx)("h4",{id:"objective-c-10"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"@objc(resetIdentities)\nstatic func resetIdentities()\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[AEPMobileCore resetIdentities];\n")),(0,r.mdx)(d,{platform:"ios",api:"set-app-group",repeat:"10",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-11"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"public static func setAppGroup(_ group: String?)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'MobileCore.setAppGroup("appGroupId")\n')),(0,r.mdx)("h4",{id:"objective-c-11"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(setAppGroup:)\npublic static func setAppGroup(_ group: String?)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[AEPMobileCore setAppGroup:@"app-group-id"];\n')),(0,r.mdx)(d,{platform:"android",api:"set-application",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-11"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void setApplication(@NonNull final Application app)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'public class CoreApp extends Application {\n\n   @Override\n   public void onCreate() {\n      super.onCreate();\n      MobileCore.setApplication(this);\n\n      List<Class<? extends Extension>> extensions = Arrays.asList(\n                Lifecycle.EXTENSION, Signal.EXTENSION, UserProfile.EXTENSION...);\n      MobileCore.registerExtensions(extensions, o -> {\n          Log.d(LOG_TAG, "AEP Mobile SDK is initialized");\n      });\n   }\n}\n')),(0,r.mdx)(d,{platform:"android",api:"set-log-level",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-12"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void setLogLevel(@NonNull LoggingMode mode)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"import com.adobe.marketing.mobile.LoggingMode;\nimport com.adobe.marketing.mobile.MobileCore;\n\nMobileCore.setLogLevel(LoggingMode.VERBOSE);\n")),(0,r.mdx)(d,{platform:"ios",api:"set-log-level",repeat:"10",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-12"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"}," public static func setLogLevel(_ level: LogLevel)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"import AEPCore\nimport AEPServices\n\n  MobileCore.setLogLevel(.trace)\n")),(0,r.mdx)("h4",{id:"objective-c-12"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"}," @objc(setLogLevel:)\n public static func setLogLevel(_ level: LogLevel)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"@import AEPCore;\n@import AEPServices;\n\n [AEPMobileCore setLogLevel: AEPLogLevelTrace];\n")),(0,r.mdx)(d,{platform:"android",api:"set-push-identifier",repeat:"6",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-13"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void setPushIdentifier(@Nullable final String pushIdentifier);\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"pushIdentifier"),"  is a string that contains the device token for push notifications.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"//Retrieve the token from either GCM or FCM, and pass it to the SDK\nMobileCore.setPushIdentifier(token);\n")),(0,r.mdx)(d,{platform:"ios",api:"set-push-identifier",repeat:"10",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-13"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"public static func setPushIdentifier(_ deviceToken: Data?)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"MobileCore.setPushIdentifier(deviceToken)\n")),(0,r.mdx)("h4",{id:"objective-c-13"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objc"}," @objc(setPushIdentifier:)\n public static func setPushIdentifier(_ deviceToken: Data?)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"}," [AEPMobileCore setPushIdentifier:deviceToken];\n")),(0,r.mdx)(d,{platform:"android",api:"set-icon-resource-id",repeat:"11",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-14"},"Java"),(0,r.mdx)("h4",{id:"setsmalliconresourceid"},"setSmallIconResourceID"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void setSmallIconResourceID(int resourceID)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"}," MobileCore.setSmallIconResourceID(R.mipmap.ic_launcher_round);\n")),(0,r.mdx)("h4",{id:"setlargeiconresourceid"},"setLargeIconResourceID"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void setLargeIconResourceID(int resourceID)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"}," MobileCore.setLargeIconResourceID(R.mipmap.ic_launcher_round);\n")),(0,r.mdx)(d,{platform:"android",api:"set-wrapper-type",repeat:"6",mdxType:"Variant"}),(0,r.mdx)("p",null,"The wrapper type can be set to one of the follwing types: ",(0,r.mdx)("inlineCode",{parentName:"p"},"NONE"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"REACT_NATIVE"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"FLUTTER"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"CORDOVA"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"UNITY"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"XAMARIN"),"."),(0,r.mdx)("h4",{id:"java-15"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void setWrapperType(@NonNull final WrapperType wrapperType)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"MobileCore.setWrapperType(WrapperType.REACT_NATIVE);\n")),(0,r.mdx)(d,{platform:"ios",api:"set-wrapper-type",repeat:"11",mdxType:"Variant"}),(0,r.mdx)("p",null,"The wrapper type can be set to one of the follwing types: ",(0,r.mdx)("inlineCode",{parentName:"p"},"none"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"reactNative"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"flutter"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"cordova"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"unity"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"xamarin"),"."),(0,r.mdx)("h4",{id:"swift-14"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"public static func setWrapperType(_ type: WrapperType)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"MobileCore.setWrapperType(.flutter)\n")),(0,r.mdx)("h4",{id:"objective-c-14"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objc"},"@objc(setWrapperType:)\npublic static func setWrapperType(_ type: WrapperType)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[AEPMobileCore setWrapperType:AEPWrapperTypeFlutter];\n")),(0,r.mdx)(d,{platform:"android",api:"start",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-16"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void start(@Nullable final AdobeCallback<?> completionCallback)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"import com.adobe.marketing.mobile.AdobeCallback;\nimport com.adobe.marketing.mobile.Lifecycle;\nimport com.adobe.marketing.mobile.LoggingMode;\nimport com.adobe.marketing.mobile.MobileCore;\nimport com.adobe.marketing.mobile.Signal;\nimport com.adobe.marketing.mobile.UserProfile;\n...\nimport android.app.Application;\n...\npublic class MyApp extends Application {\n  ...\n  @Override\n  public void on Create(){\n    super.onCreate();\n\n    MobileCore.setApplication(this);\n\n    UserProfile.registerExtension();\n    Lifecycle.registerExtension();\n    Signal.registerExtension();\n    MobileCore.start(new AdobeCallback () {\n        @Override\n        public void call(Object o) {\n          // implement callback\n        }\n    });\n  }\n}\n")),(0,r.mdx)(d,{platform:"android",api:"track-action",repeat:"6",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-17"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void trackAction(@NonNull final String action, @Nullable final Map<String, String> contextData)\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"action")," contains the name of the action to track."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on the hit.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'Map<String, String> additionalContextData = new HashMap<String, String>();\nadditionalContextData.put("customKey", "value");\nMobileCore.trackAction("loginClicked", additionalContextData);\n')),(0,r.mdx)(d,{platform:"ios",api:"track-action",repeat:"12",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-15"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"}," static func track(action: String?, data: [String: Any]?)\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"action")," contains the name of the action to track."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on this hit.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},' MobileCore.track(action: "action name", data: ["key": "value"])\n')),(0,r.mdx)("h4",{id:"objective-c-15"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objc"}," @objc(trackAction:data:)\n static func track(action: String?, data: [String: Any]?)\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"action")," contains the name of the action to track."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on this hit.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'  [AEPMobileCore trackAction:@"action name" data:@{@"key":@"value"}];\n')),(0,r.mdx)(d,{platform:"android",api:"track-state",repeat:"7",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-18"},"Java"),(0,r.mdx)("p",null,"In Android, ",(0,r.mdx)("inlineCode",{parentName:"p"},"trackState")," is typically called every time a new ",(0,r.mdx)("inlineCode",{parentName:"p"},"Activity")," is loaded."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void trackState(@NonNull final String state, @Nullable final Map<String, String> contextData)\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"state")," contains the name of the state to track."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on the hit.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'Map<String, String> additionalContextData = new HashMap<String, String>();        \nadditionalContextData.put("customKey", "value");\nMobileCore.trackState("homePage", additionalContextData);\n')),(0,r.mdx)(d,{platform:"ios",api:"track-state",repeat:"12",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-16"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"}," static func track(state: String?, data: [String: Any]?)\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"state")," contains the name of the state to track."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on this hit.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},' MobileCore.track(state: "state name", data: ["key": "value"])\n')),(0,r.mdx)("h4",{id:"objective-c-16"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objc"}," @objc(trackState:data:)\n static func track(state: String?, data: [String: Any]?)\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"state")," contains the name of the state to track."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on this hit.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'  [AEPMobileCore trackState:@"state name" data:@{@"key":@"value"}];\n')),(0,r.mdx)(d,{platform:"android",api:"public-classes",repeat:"13",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-19"},"Java"),(0,r.mdx)("h4",{id:"adobecallback"},"AdobeCallback"),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"AdobeCallback")," class provides the interface to receive results when the asynchronous APIs perform the requested action."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public interface AdobeCallback<T> {    \n    void call(final T value);\n}\n")),(0,r.mdx)("h4",{id:"adobecallbackwitherror"},"AdobeCallbackWithError"),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"AdobeCallbackWithError")," class provides the interface to receive results or an error when the asynchronous APIs perform the requested action."),(0,r.mdx)("p",null,"When using this class, if the request cannot be completed within the default timeout or an unexpected error occurs, the request is stopped and the fail method is called with the corresponding ",(0,r.mdx)("inlineCode",{parentName:"p"},"AdobeError"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public interface AdobeCallbackWithError<T> extends AdobeCallback<T> {\n    void fail(final AdobeError error);\n}\n")),(0,r.mdx)("h4",{id:"adobeerror"},"AdobeError"),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"AdobeError")," class shows the errors that can be passed to an ",(0,r.mdx)("inlineCode",{parentName:"p"},"AdobeCallbackWithError"),":"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"UNEXPECTED_ERROR")," - An unexpected error occurred."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"CALLBACK_TIMEOUT")," - The timeout was met."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"CALLBACK_NULL")," - The provided callback function is null."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"EXTENSION_NOT_INITIALIZED")," - The extension is not initialized.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"MobileCore.getPrivacyStatus(new AdobeCallbackWithError<MobilePrivacyStatus>() {\n  @Override\n  public void fail(final AdobeError error) {\n    if (error == AdobeError.UNEXPECTED_ERROR) {\n      // handle unexpected error\n    } else if (error == AdobeError.CALLBACK_TIMEOUT) {\n      // handle timeout error\n    } else if (error == AdobeError.CALLBACK_NULL) {\n      // handle null callback error\n    } else if (error == AdobeError.EXTENSION_NOT_INITIALIZED) {\n      // handle extension not initialized error\n    }\n  }\n\n  @Override\n  public void call(final MobilePrivacyStatus value) {\n    // use MobilePrivacyStatus value\n  }\n});\n")),(0,r.mdx)(d,{platform:"ios",api:"public-classes",repeat:"8",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"aeperror"},"AEPError"),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"AEPError")," enum shows the errors that can be passed to a completion handler callback from any API which uses one:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"case unexpected")," - An unexpected error occured."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"case callbackTimeout")," - The timeout was met."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"case callbackNil")," -  The provided callback function is nil."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"case none")," -  There was no error, used when an error return type is required but there was no error."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"case serverError")," - There was a server error."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"case networkError")," - There was a network error."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"case invalidRequest")," - There was an invalid request."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"case invalidResponse")," - There was an invalid response."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"case errorExtensionNotInitialized")," - The extension is not initialized.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Swift")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"MobileCore.getSdkIdentities { (content, error) in\n    if let error = error, let aepError = error as? AEPError {\n        switch aepError {\n        case .unexpected:\n          // Handle unexpected error\n        case .callbackTimeout:\n          // Handle callback timeout error\n        case .callbackNil:\n          // Handle callback being nil error\n        case .none:\n          // no error\n        case .serverError:\n          // handle server error\n        case .networkError:\n          // handle network error\n        case .invalidRequest:\n          // handle invalid request error\n        case .invalidResponse:\n          // handle invalid response error\n        case .errorExtensionNotInitialized:\n          // handle extension not initialized error\n        @unknown default:\n          // handle unknown error\n        }\n    }\n    ...\n}\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Objective-C")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[AEPMobileCore getSdkIdentities:^(NSString * _Nullable content, NSError * _Nullable error) {\n    if (error) {\n        if (error.code == AEPErrorUnexpected) {\n          // Handle unexpected error\n        } else if (error.code == AEPErrorCallbackTimeout) {\n          // Handle callback timeout error\n        } else if (error.code == AEPErrorCallbackNil) {\n          // Handle callback being nil error\n        } else if (error.code == AEPErrorNone) {\n          // no error     \n        } else if (error.code == AEPErrorServerError) {\n          // handle server error\n        } else if (error.code == AEPErrorNetworkError) {\n          // handle network error\n        } else if (error.code == AEPErrorInvalidRequest) {\n          // handle invalid request error\n        } else if (error.code == AEPErrorInvalidResponse) {\n          // handle invalid response error  \n        } else if (error.code == AEPErrorErrorExtensionNotInitialized) {\n          // handle extension not intialized error  \n        }\n    }\n\n    ...\n}];\n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=bd8eca6c3f5b5537088adab644096f7d0de32d9c-61eca2ac84b5569a690e.js.map