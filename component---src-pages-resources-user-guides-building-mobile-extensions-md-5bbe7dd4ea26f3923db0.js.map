{"version":3,"file":"component---src-pages-resources-user-guides-building-mobile-extensions-md-5bbe7dd4ea26f3923db0.js","mappings":"4OAOsBA,E,wEADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAIY,cAJJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EAClB,GAEMG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGP,GAAK,YAER,OAAO,SAACI,GAAS,UAAKD,EAAiBH,EAAK,CAAEO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,8BAA4B,+BAEpC,8UAA+T,cAAGC,WAAW,IACzU,KAAQ,gGAA8F,kBAC/E,0HAC3B,6kBACA,eACE,GAAM,0CAAwC,2CAEhD,mFACA,eACE,GAAM,gEAA8D,iEAEtE,sEACA,eACE,GAAM,wEAAsE,yEAE9E,sFACA,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAI,oGAEpB,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAI,8HAEpB,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAI,sEAEpB,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAI,2EAClB,cAAGA,WAAW,MAAI,gDAAiD,mBAAQA,WAAW,KAAG,OAAiB,6BAG9G,eACE,GAAM,oCAAkC,qCAE1C,0QACA,uEACA,oBACE,eAAIA,WAAW,MAAI,QAAS,uBAAYA,WAAW,MAAI,gBAA8B,QAAQ,uBAAYA,WAAW,MAAI,aAA2B,MACnJ,eAAIA,WAAW,MAAI,QAAS,uBAAYA,WAAW,MAAI,qBAAmC,QAAQ,uBAAYA,WAAW,MAAI,QAAsB,iBAAiB,uBAAYA,WAAW,MAAI,eAA6B,4BAC5N,eAAIA,WAAW,MAAI,8GAA+G,uBAAYA,WAAW,MAAI,qBAAmC,qCAChM,eAAIA,WAAW,MAAI,0IAA2I,uBAAYA,WAAW,MAAI,OAAqB,MAC9M,eAAIA,WAAW,MAAI,mDAAoD,uBAAYA,WAAW,MAAI,oCAAkD,MACpJ,eAAIA,WAAW,MAAI,yCAA0C,uBAAYA,WAAW,MAAI,sCAAoD,MAC5I,eAAIA,WAAW,MAAI,2CAA4C,uBAAYA,WAAW,MAAI,0CAAwD,MAClJ,eAAIA,WAAW,MAAI,iBAAkB,mBAAQA,WAAW,MAAI,SAAmB,UAAU,mBAAQA,WAAW,MAAI,QAAkB,kCAClI,eAAIA,WAAW,MAAI,sCAAuC,uBAAYA,WAAW,MAAI,kBAAgC,wGAAwG,uBAAYA,WAAW,MAAI,8BAA4C,wCAAwC,uBAAYA,WAAW,MAAI,8BAA4C,wPAErZ,SAACV,EAAW,CAACW,QAAQ,UAAUC,MAAM,OAAOH,QAAQ,iBACpD,gHACA,eACE,GAAM,eAAa,gBAErB,2EACA,oBACE,eAAIC,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,mGAAiG,4BAE7G,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,uGAAqG,gCAEjH,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,gGAA8F,6BAKhH,CAEAH,EAAWM,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/resources/user-guides/building-mobile-extensions.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"building-mobile-extensions\"\n    }}>{`Building mobile extensions`}</h1>\n    <p>{`To support customer-specific features, and allow for the greatest flexibility, Adobe Experience Platform Mobile SDK provides an interface that allows customers to integrate with the Mobile Core at a much lower level. This interface allows customers to define extensions, which are similar in capabilities to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://experienceleague.adobe.com/docs/experience-platform/tags/ui/extensions/overview.html\"\n      }}>{`tag extensions`}</a>{`. The Mobile Core allows all extensions to access the events and data being sent through the Experience Platform SDK.`}</p>\n    <p>{`Extensions allow customers to extend the Experience Platform SDKs with their own code. This includes listening for and dispatching events, reading the shared state of any registered extension, and sharing the state of the current extension. The application can use the extension to monitor for information that Adobe does not expose by default. It can also use the extension to modify Experience Platform SDK internal operations. For example, the application can use the extension to add additional data to messages that are sent or by sending data to other systems.`}</p>\n    <h2 {...{\n      \"id\": \"prerequisites-to-building-an-extension\"\n    }}>{`Prerequisites to building an extension`}</h2>\n    <p>{`Before you build an extension, complete the following tasks:`}</p>\n    <h3 {...{\n      \"id\": \"ensure-that-you-are-using-the-adobe-experience-platform-sdks\"\n    }}>{`Ensure that you are using the Adobe Experience Platform SDKs`}</h3>\n    <p>{`  Extensions extend the behavior of these SDKs.`}</p>\n    <h3 {...{\n      \"id\": \"ensure-that-you-can-accomplish-your-goals-only-by-using-an-extension\"\n    }}>{`Ensure that you can accomplish your goals only by using an extension`}</h3>\n    <p>{`  To determine your goals, think about the following questions:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Do you need access to data that is not already exposed via the Adobe Experience Platform SDKs?`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Do you need to be notified when messages will be sent, or data is being collected by the Adobe Experience Platform SDKs?`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Do you need to add data to or modify data for outgoing messages?`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Do you need to expose data to other extensions or to rules processing?`}</p>\n        <p parentName=\"li\">{`If your answer to any of these questions is `}<strong parentName=\"p\">{`yes`}</strong>{`, build the extension.`}</p>\n      </li>\n    </ul>\n    <h3 {...{\n      \"id\": \"review-the-namespace-conventions\"\n    }}>{`Review the namespace conventions`}</h3>\n    <p>{`Components or data that are provided by Adobe must be clearly distinguished from the components or data that are provided by external parties. Inconsistent naming conventions impact module naming, event type, source names, and event data keys.`}</p>\n    <p>{`The following naming rulesÂ apply for extensions:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`ADOBE_PREFIX`}</inlineCode>{` is `}<inlineCode parentName=\"li\">{`com.adobe`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`THIRDPARTY_PREFIX`}</inlineCode>{` is `}<inlineCode parentName=\"li\">{`com.`}</inlineCode>{`. The prefix `}<inlineCode parentName=\"li\">{`com.adobe.*`}</inlineCode>{` is reserved for Adobe.`}</li>\n      <li parentName=\"ul\">{`Third parties must prefix their extension name and any custom event types or sources they create with the `}<inlineCode parentName=\"li\">{`THIRDPARTY_PREFIX`}</inlineCode>{` followed by their company name.`}</li>\n      <li parentName=\"ul\">{`By convention, Adobe will not prefix shared state keys or event data keys.  These names will be in the global namespace. For example: `}<inlineCode parentName=\"li\">{`mid`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`Adobe internal module names follow the pattern `}<inlineCode parentName=\"li\">{`ADOBE_PREFIX.module.{moduleName}`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`Adobe event types follow the pattern `}<inlineCode parentName=\"li\">{`ADOBE_PREFIX.eventType.{eventType}`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`Adobe event sources follow the pattern `}<inlineCode parentName=\"li\">{`ADOBE_PREFIX.eventSource.{eventSource}`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`Shared state `}<strong parentName=\"li\">{`names`}</strong>{` (not `}<strong parentName=\"li\">{`keys`}</strong>{`) must equal the module name.`}</li>\n      <li parentName=\"ul\">{`All constants will be named using `}<inlineCode parentName=\"li\">{`lowerCamelCase`}</inlineCode>{`, and cases are normalized internally to make comparisons case-insensitive. For example, if you use `}<inlineCode parentName=\"li\">{`Com.Adobe.moDule.AnAlytiCS`}</inlineCode>{` it will be internally converted to `}<inlineCode parentName=\"li\">{`com.adobe.module.analytics`}</inlineCode>{`. An exception to this rule is that shared state names that are used in rules are compared in a case-sensitive manner. This means that when registering an extension, the actual case is retained internally, so that rule comparison can succeed.`}</li>\n    </ul>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You should use ASCII characters, even if your company name contains non-ASCII characters.`}</p>\n    <h2 {...{\n      \"id\": \"get-started\"\n    }}>{`Get started`}</h2>\n    <p>{`For help on building your own extension, please see:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/aepsdk-core-ios/blob/main/Documentation/EventHub/BuildingExtensions.md\"\n        }}>{`Building iOS Extension`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/aepsdk-core-android/blob/main/Documentation/EventHub/BuildingExtensions.md\"\n        }}>{`Building Android Extension`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://experienceleague.adobe.com/docs/experience-platform/tags/extension-dev/overview.html\"\n        }}>{`Building Tags Extension`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}