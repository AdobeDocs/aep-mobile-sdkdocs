{"version":3,"file":"component---src-pages-home-base-assurance-tabs-index-md-4a355e3dba7dbe2e9b18.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/home/base/assurance/tabs/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst InlineNestedAlert = makeShortcode(\"InlineNestedAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" task=\"import-library\" repeat=\"6\" mdxType=\"Variant\" />\n    <ol>\n      <li parentName=\"ol\">{`Add the following libraries to your project using the app's Gradle file.`}</li>\n    </ol>\n    <h4 {...{\n      \"id\": \"kotlin\"\n    }}>{`Kotlin`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`implementation(platform(\"com.adobe.marketing.mobile:sdk-bom:3.+\"))\nimplementation(\"com.adobe.marketing.mobile:core\")\nimplementation(\"com.adobe.marketing.mobile:assurance\")\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"groovy\"\n    }}>{`Groovy`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`implementation platform('com.adobe.marketing.mobile:sdk-bom:3.+')\nimplementation 'com.adobe.marketing.mobile:core'\nimplementation 'com.adobe.marketing.mobile:assurance'\n`}</code></pre>\n    <InlineNestedAlert variant=\"warning\" header=\"false\" iconPosition=\"left\" mdxType=\"InlineNestedAlert\">\n      <p>{`Using dynamic dependency versions is `}<strong parentName=\"p\">{`not`}</strong>{` recommended for production apps. Please read the `}<a parentName=\"p\" {...{\n          \"href\": \"../../resources/manage-gradle-dependencies.md\"\n        }}>{`managing Gradle dependencies guide`}</a>{` for more information.`}</p>\n    </InlineNestedAlert>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Import the Assurance library along with the other Mobile SDK libraries:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import com.adobe.marketing.mobile.Assurance;\nimport com.adobe.marketing.mobile.MobileCore;\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"import-library\" repeat=\"7\" mdxType=\"Variant\" />\n    <p>{`Add the library to your project via your `}<a parentName=\"p\" {...{\n        \"href\": \"https://cocoapods.org/pods/AEPAssurance\"\n      }}>{`Cocoapods`}</a>{` `}<inlineCode parentName=\"p\">{`Podfile`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-pod\"\n      }}>{`pod 'AEPCore','~> 5.0'\npod 'AEPAssurance','~> 5.0'\n`}</code></pre>\n    <p>{`Import the Assurance extension along with the other Adobe Mobile SDK extensions:`}</p>\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import AEPCore\nimport AEPAssurance\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`@import AEPCore;\n@import AEPAssurance;\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" task=\"import-library\" repeat=\"13\"/>\n     1. Install the AEP Assurance package.\n     ```bash\n     npm install @adobe/react-native-aepassurance\n     ```\n     2. Link the module.\n     **React Native 0.60+**\n     [CLI autolink feature](https://github.com/react-native-community/cli/blob/master/docs/autolinking.md) links the module while building the app.\n     **React Native &lt;= 0.59**\n     ```bash\n     react-native link @adobe/react-native-aepassurance\n     ```\n     **Note** For `iOS` using `cocoapods`, run:\n     ```bash\n     cd ios/ && pod install\n     ```\n     3. Import the extension.\n     ```jsx\n     import {AEPAssurance} from '@adobe/react-native-aepassurance';\n     ```\n     4. Get the extension version.\n     ```jsx\n     AEPAssurance.extensionVersion().then(version => console.log(\"AdobeExperienceSDK: AEPAssurance version: \" + version));\n     ```\n     <Variant platform=\"flutter\" task=\"import-library\" repeat=\"7\"/>\n     #### JavaScript\n     1. Install the AEP Assurance package.\n     Installation instructions can be found in the [Flutter documentation](https://pub.dev/packages/flutter_assurance/install).\n     2. Import the extension.\n     ```dart\n     import 'package:flutter_assurance/flutter_assurance.dart';\n     ```\n     3. Get the extension version.\n     ```dart\n     String version = await FlutterAEPAssurance.extensionVersion;\n     ``` -*/}\n    <Variant platform=\"android\" task=\"register-assurance\" repeat=\"4\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class MainApp extends Application {\n    private final String ENVIRONMENT_FILE_ID = \"YOUR_APP_ENVIRONMENT_ID\";\n\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        MobileCore.setApplication(this);\n        MobileCore.setLogLevel(LoggingMode.VERBOSE);\n        MobileCore.configureWithAppID(ENVIRONMENT_FILE_ID);\n\n        List<Class<? extends Extension>> extensions = Arrays.asList(\n                Assurance.EXTENSION,...);\n        MobileCore.registerExtensions(extensions, o -> {\n            Log.d(LOG_TAG, \"AEP Mobile SDK is initialized\");\n        });\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"kotlin-1\"\n    }}>{`Kotlin`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`class MyApp : Application() {\n\n    override fun onCreate() {\n        super.onCreate()\n        MobileCore.setApplication(this)\n        MobileCore.setLogLevel(LoggingMode.VERBOSE)\n        MobileCore.configureWithAppID(\"YOUR_APP_ENVIRONMENT_ID\")\n\n        val extensions = listOf(Assurance.EXTENSION, ...)\n        MobileCore.registerExtensions(extensions) {\n            Log.d(LOG_TAG, \"AEP Mobile SDK is initialized\")\n        }\n    }\n}\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"register-assurance\" repeat=\"5\" mdxType=\"Variant\" />\n    <p>{`To start using the extension library, you must first register the extension with the `}<a parentName=\"p\" {...{\n        \"href\": \"../mobile-core/index.md\"\n      }}>{`Mobile Core`}</a>{` extension.`}</p>\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n\n        let extensions = [Assurance.self, ...]\n        MobileCore.registerExtensions(extensions, {\n            // set app id from the Data Collection UI    \n                MobileCore.configureWith(appId: \"yourAppId\")  \n        })\n\n        return true\n    }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-1\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n\n    NSArray *extensionsToRegister = @[AEPMobileAssurance.class, ...];\n    [AEPMobileCore registerExtensions:extensionsToRegister completion:^{\n        // set app id from the Data Collection UI\n        [AEPMobileCore configureWithAppId: @\"yourAppId\"];\n    }];\n\n    return YES;\n}\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" task=\"register-assurance\" repeat=\"2\"/>\n     #### JavaScript\n     When using React Native, register AEP Assurance with Mobile Core in native code as shown on the Android and iOS tabs.\n     <Variant platform=\"flutter\" task=\"register-assurance\" repeat=\"2\"/>\n     #### Dart\n     When using Flutter, register AEP Assurance with Mobile Core in native code as shown on the Android and iOS tabs. -*/}\n    <Variant platform=\"android\" task=\"implement-assurance\" repeat=\"1\" mdxType=\"Variant\" />\n    <p>{`Deep linking is the best way to connnect to an Assurance session when using the Android SDK. Assurance SDK on Android is already setup to handle incoming intents to your app. You can `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.android.com/training/app-links/deep-linking\"\n      }}>{`add an intent filter for incoming links in your app`}</a>{` to complete the deep link configuration. The combination of `}<inlineCode parentName=\"p\">{`android:host`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`android:scheme`}</inlineCode>{` (in the form of `}<inlineCode parentName=\"p\">{`<host>://<scheme>`}</inlineCode>{`) for this intent filter will serve as the Base URL while creating a session in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://experience.adobe.com/assurance\"\n      }}>{`Adobe Experience Platform Assurance UI`}</a></p>\n    <Variant platform=\"ios\" task=\"implement-assurance\" repeat=\"13\" mdxType=\"Variant\" />\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"./api-reference.md#startsession\"\n      }}>{`startSession`}</a>{` API needs to be called to begin an Adobe Experience Platform Assurance session. You should call this API when the app launches with a URL (see code snippet below for sample usage). When called, SDK displays a PIN authentication overlay to begin a session.`}</p>\n    <h4 {...{\n      \"id\": \"swift-2\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {\n        Assurance.startSession(url: url)\n        return true\n    }\n`}</code></pre>\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`scene(_:openURLContexts:)`}</inlineCode>{` method as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`    func scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>) {\n        // Called when the app in background is opened with a deep link.\n        if let deepLinkURL = URLContexts.first?.url {\n            Assurance.startSession(url: deepLinkURL)\n        }\n    }\n\n    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n        // Called when the app launches with the deep link\n        if let deepLinkURL = connectionOptions.urlContexts.first?.url {\n            Assurance.startSession(url: deepLinkURL)\n        }\n    }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-2\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`static func startSession(url: URL?)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (BOOL)application:(UIApplication *)app openURL:(nonnull NSURL *)url options:(nonnull NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {\n    [AEPMobileAssurance startSessionWithUrl:url];\n    return true;\n}\n`}</code></pre>\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`scene(_:openURLContexts:)`}</inlineCode>{` method as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`\n- (void)scene:(UIScene *)scene willConnectToSession:(UISceneSession *)session options:(UISceneConnectionOptions *)connectionOptions {    \n    NSURL *deepLinkURL = connectionOptions.URLContexts.allObjects.firstObject.URL;\n    [AEPMobileAssurance startSessionWithUrl:deepLinkURL];\n}\n\n\n- (void)scene:(UIScene *)scene openURLContexts:(NSSet<UIOpenURLContext *> *)URLContexts {\n    [AEPMobileAssurance startSessionWithUrl:URLContexts.allObjects.firstObject.URL];\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","Variant","InlineNestedAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","platform","task","repeat","parentName","variant","header","iconPosition","isMDXComponent"],"sourceRoot":""}