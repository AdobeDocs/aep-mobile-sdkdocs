"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[173],{3009:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return s},default:function(){return u}});var a=n(87462),o=n(63366),i=(n(15007),n(64983)),r=n(91515),d=["components"],s={},l=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",t)}},p=l("CodeBlock"),c=l("InlineAlert"),m={_frontmatter:s},h=r.Z;function u(e){var t=e.components,n=(0,o.Z)(e,d);return(0,i.mdx)(h,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"fetch-and-display-content-cards"},"Fetch and Display Content Cards"),(0,i.mdx)("p",null,"This tutorial explains how to fetch and display content cards in your application."),(0,i.mdx)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"https://developer.adobe.com/client-sdks/edge/adobe-journey-optimizer/#implement-extension-in-mobile-app"},"Integrate and register AEPMessaging extension")," in your app."),(0,i.mdx)("h2",{id:"fetch-content-cards"},"Fetch Content Cards"),(0,i.mdx)("p",null,"To fetch the content cards for the surfaces configured in ",(0,i.mdx)("a",{parentName:"p",href:"https://business.adobe.com/products/journey-optimizer/adobe-journey-optimizer.html"},"Adobe Journey Optimizer")," campaigns, call the ",(0,i.mdx)("a",{parentName:"p",href:"https://developer.adobe.com/client-sdks/edge/adobe-journey-optimizer/code-based/api-reference/#updatepropositionsforsurfaces"},"updatePropositionsForSurfaces")," API. You should batch requests for multiple surfaces in a single API call when possible. The returned content cards are cached in-memory by the Messaging extension and persist through the application's lifecycle."),(0,i.mdx)(p,{slots:"heading, code",repeat:"1",languages:"Kotlin",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"kotlin"},"Kotlin"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin"},'val surfaces = mutableListOf<Surface>()\nval surface = Surface("homepage")\nMessaging.updatePropositionsForSurfaces(surfaces)\n')),(0,i.mdx)("h2",{id:"retrieve-content-cards"},"Retrieve Content Cards"),(0,i.mdx)("p",null,"To retrieve the content cards for a specific surface, call ",(0,i.mdx)("inlineCode",{parentName:"p"},"getContentCardsUI"),". This API returns a ",(0,i.mdx)("a",{parentName:"p",href:"https://developer.android.com/kotlin/flow"},"flow")," of ",(0,i.mdx)("a",{parentName:"p",href:"../public-classes/aepui.md"},"AepUI")," objects representing content cards for which the user is qualified."),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"AepUI")," objects are created only for content cards with templates recognized by the Messaging extension. The flow of ",(0,i.mdx)("inlineCode",{parentName:"p"},"AepUI")," objects may contain multiple content card template types."),(0,i.mdx)(p,{slots:"heading, code",repeat:"1",languages:"Kotlin",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"kotlin-1"},"Kotlin"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin"},"// create a view model or reuse existing one to hold the aepUIList\nclass AepContentCardViewModel(private val contentCardUIProvider: ContentCardUIProvider) : ViewModel() {\n    // State to hold AepUI list\n    private val _aepUIList = MutableStateFlow<List<AepUI<*, *>>>(emptyList())\n    val aepUIList: StateFlow<List<AepUI<*, *>>> = _aepUIList.asStateFlow()\n\n    init {\n        // Launch a coroutine to fetch the aepUIList from the ContentCardUIProvider\n        // when the ViewModel is created\n        viewModelScope.launch {\n            contentCardUIProvider.getContentCardUI().collect { aepUi ->\n                _aepUIList.value = aepUi\n            }\n        }\n    }\n\n    // Function to refresh the aepUIList from the ContentCardUIProvider\n    fun refreshContent() {\n        viewModelScope.launch {\n            contentCardUIProvider.refreshContent()\n        }\n    }\n}\n")),(0,i.mdx)(c,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"Only content cards for which the user has qualified are returned by the getContentCardUI API. Client-side rules are defined in the Adobe Journey Optimizer campaign."),(0,i.mdx)("h2",{id:"display-content-cards"},"Display Content Cards"),(0,i.mdx)("p",null,"The Content Card user interface is implemented using Jetpack Compose, which is the recommended toolkit for Android development. To display content cards in your app, pass the ",(0,i.mdx)("inlineCode",{parentName:"p"},"AepUI")," objects returned by the ",(0,i.mdx)("inlineCode",{parentName:"p"},"getContentCardUI")," API to the appropriate Content Card composable. The currently supported composables are:"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},(0,i.mdx)("inlineCode",{parentName:"li"},"SmallImageCard")," composable for ",(0,i.mdx)("inlineCode",{parentName:"li"},"SmallImageUI"))),(0,i.mdx)("h3",{id:"display-content-cards-in-compose-ui-application"},"Display Content Cards in Compose UI application"),(0,i.mdx)("p",null,"Below is an example of how to display content cards in a Compose UI application:"),(0,i.mdx)(p,{slots:"heading, code",repeat:"1",languages:"Kotlin",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"kotlin-2"},"Kotlin"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin"},"@Composable\nprivate fun AepContentCardList(viewModel: AepContentCardViewModel) {\n  // Collect the state from ViewModel\n  val aepUiList by viewModel.aepUIList.collectAsStateWithLifecycle()\n  \n  // Create row with composables from AepUI instances\n  LazyRow {\n    items(reorderedAepUIList) { aepUI ->                   \n      when (aepUI) {\n        is SmallImageUI -> {\n          val state = aepUI.getState()\n          if (!state.dismissed) \n          {\n            SmallImageCard(ui = aepUI, \n                         style = smallImageCardStyleRow,\n                         observer = ContentCardEventObserver(contentCardCallback))\n          }\n        }\n      }\n    }\n  }\n}    \n")),(0,i.mdx)("p",null,"Refer to this ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/adobe/aepsdk-messaging-android/tree/feature/content-cards/code/testapp"},"TestApp")," for a complete example of how to display, customize, and listen to UI events from content cards in a Compose UI application."),(0,i.mdx)("h3",{id:"retrieve-contentcardschemadata-from-the-messaging-extension"},"Retrieve ContentCardSchemaData from the Messaging extension"),(0,i.mdx)("p",null,"You may retrieve the ",(0,i.mdx)("inlineCode",{parentName:"p"},"ContentCardSchemaData")," for a Content Card with the template ID using the ",(0,i.mdx)("a",{parentName:"p",href:"../public-classes/contentcardmapper.md"},"ContentCardMapper"),":"),(0,i.mdx)(p,{slots:"heading, code",repeat:"1",languages:"Kotlin",mdxType:"CodeBlock"}),(0,i.mdx)("h3",{id:"kotlin-3"},"Kotlin"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-kotlin"},"private fun AepContentCardList(viewModel: AepContentCardViewModel) {\n  // Collect the state from ViewModel\n  val aepUiList by viewModel.aepUIList.collectAsStateWithLifecycle()\n  \n  // Get the ContentCardSchemaData for the AepUI list if needed\n  val contentCardSchemaDataList = aepUiList.map {\n    when (it) {\n      is SmallImageUI ->\n        ContentCardMapper.Companion.instance.getContentCardSchemaData(it.getTemplate().id)\n      \n        else -> null\n    }\n  }\n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-edge-adobe-journey-optimizer-content-card-ui-android-tutorial-displaying-content-cards-md-fb5206112739a6487360.js.map