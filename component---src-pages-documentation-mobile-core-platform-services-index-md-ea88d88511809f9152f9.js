"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[3785,7051],{85483:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return l},default:function(){return f}});var r=t(87462),o=t(63366),i=(t(15007),t(64983)),a=t(91515),s=t(12089),d=["components"],l={},m=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",n)}},p=m("InlineAlert"),c=m("TabsBlock"),u={_frontmatter:l},h=a.Z;function f(e){var n=e.components,t=(0,o.Z)(e,d);return(0,i.mdx)(h,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"platform-services"},"Platform Services"),(0,i.mdx)("p",null,"The Platform Services are provided by the Adobe Experience Platform Mobile SDKs as part of the Mobile Core extension. These services provide shared functionality throughout the SDK that can be shared by extensions. For example, services provide shared functionality for networking, data queuing, caching, and more."),(0,i.mdx)(p,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"This feature is only available in ",(0,i.mdx)("a",{parentName:"p",href:"../../release-notes/2021.md#android-core-1-8-0"},"Android Core 1.8.0")," or later and ",(0,i.mdx)("a",{parentName:"p",href:"../../release-notes/2021.md#adobe-experience-platform-ios-core-sdks"},"iOS Core 3.0.0")," or later."),(0,i.mdx)("table",null,(0,i.mdx)("thead",{parentName:"table"},(0,i.mdx)("tr",{parentName:"thead"},(0,i.mdx)("th",{parentName:"tr",align:"left"},"Service"),(0,i.mdx)("th",{parentName:"tr",align:"left"},"Android SDK"),(0,i.mdx)("th",{parentName:"tr",align:"left"},"iOS SDK"))),(0,i.mdx)("tbody",{parentName:"table"},(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:"left"},(0,i.mdx)("a",{parentName:"td",href:"./network-service.md"},"Networking")),(0,i.mdx)("td",{parentName:"tr",align:"left"},"Core 1.8.0 +"),(0,i.mdx)("td",{parentName:"tr",align:"left"},"AEPCore 3.0.0 +")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:"left"},(0,i.mdx)("a",{parentName:"td",href:"./data-queue-service.md"},"DataQueue")),(0,i.mdx)("td",{parentName:"tr",align:"left"},"Core 1.8.0 +"),(0,i.mdx)("td",{parentName:"tr",align:"left"},"AEPCore 3.0.0 +")),(0,i.mdx)("tr",{parentName:"tbody"},(0,i.mdx)("td",{parentName:"tr",align:"left"},(0,i.mdx)("a",{parentName:"td",href:"./system-device-info-service.md"},"SystemInfoService/DeviceInforming")),(0,i.mdx)("td",{parentName:"tr",align:"left"},"Core 1.8.0 +"),(0,i.mdx)("td",{parentName:"tr",align:"left"},"AEPCore 3.0.0 +")))),(0,i.mdx)("h2",{id:"accessing-services"},"Accessing services"),(0,i.mdx)("p",null,"The MobileCore extension provides a shared ",(0,i.mdx)("inlineCode",{parentName:"p"},"ServiceProvider"),", responsible for accessing the current set of provided services."),(0,i.mdx)("p",null,"The following code snippet shows how to access ",(0,i.mdx)("inlineCode",{parentName:"p"},"Network Service"),"  as an example."),(0,i.mdx)(c,{orientation:"horizontal",slots:"heading, content",repeat:"2",mdxType:"TabsBlock"}),(0,i.mdx)("p",null,"Android"),(0,i.mdx)(s.default,{query:"platform=android&task=access",mdxType:"Tabs"}),(0,i.mdx)("p",null,"iOS"),(0,i.mdx)(s.default,{query:"platform=ios&task=access",mdxType:"Tabs"}),(0,i.mdx)("h2",{id:"override-network-stack"},"Override network stack"),(0,i.mdx)("p",null,"This section walks through the steps necessary to create a custom network override, and register it with the SDK."),(0,i.mdx)(p,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"This feature is only available in Android Core version 1.8.0 or later and iOS Core version 2.6.0 or later."),(0,i.mdx)(c,{orientation:"horizontal",slots:"heading, content",repeat:"2",mdxType:"TabsBlock"}),(0,i.mdx)("p",null,"Android"),(0,i.mdx)(s.default,{query:"platform=android&task=override",mdxType:"Tabs"}),(0,i.mdx)("p",null,"iOS"),(0,i.mdx)(s.default,{query:"platform=ios&task=override",mdxType:"Tabs"}))}f.isMDXComponent=!0},12089:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return l},default:function(){return u}});var r,o=t(87462),i=t(63366),a=(t(15007),t(64983)),s=t(91515),d=["components"],l={},m=(r="Variant",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.mdx)("div",e)}),p={_frontmatter:l},c=s.Z;function u(e){var n=e.components,t=(0,i.Z)(e,d);return(0,a.mdx)(c,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)(m,{platform:"android",task:"access",repeat:"1",mdxType:"Variant"}),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},"import com.adobe.marketing.mobile.services.*;\n\n// Get an instance of the current network service\nNetworking networkService = ServiceProvider.getInstance().getNetworkService();\n")),(0,a.mdx)(m,{platform:"ios",task:"access",repeat:"1",mdxType:"Variant"}),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-swift"},"import AEPServices\n\n// Get an instance of the current network service\nlet networkService = ServiceProvider.shared.networkService\n")),(0,a.mdx)(m,{platform:"android",task:"override",repeat:"9",mdxType:"Variant"}),(0,a.mdx)("h4",{id:"1-create-custom-httpconnectionperformer-implementation"},"1. Create custom HTTPConnectionPerformer implementation"),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},"HTTPConnectionPerformer")," class is an abstract base class that must be subclassed. This class contains one required method, ",(0,a.mdx)("inlineCode",{parentName:"p"},"connect"),", which must be overridden. Optionally, it's possible to override the ",(0,a.mdx)("inlineCode",{parentName:"p"},"shouldOverride")," method if you want to conditionally override network requests (if you do not override this method, all requests will be overridden by default)."),(0,a.mdx)("p",null,(0,a.mdx)("strong",{parentName:"p"},"Example")),(0,a.mdx)("p",null,"This is just an implementation example. For more information about handling network requests correctly in your mobile application, see ",(0,a.mdx)("a",{parentName:"p",href:"https://developer.android.com/reference/java/net/HttpURLConnection"},"HttpURLConnection"),"."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},'package com.adobe.example;\n\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.Map;\nimport com.adobe.marketing.mobile.AndroidNetworkServiceOverrider.HTTPConnectionPerformer;\nimport com.adobe.marketing.mobile.AndroidNetworkServiceOverrider.Connecting;\n\n// Sample implementation of HTTPConnectionPerformer for AEP SDK Network Override.\nclass SampleHTTPConnectionPerformer extends HTTPConnectionPerformer {        \n  // Modifications here would allow for conditional overriding based on the url/method.\n  // Overriding this method is optional, by default it will always return true (meaning\n  // all network requests should be overridden).\n  @Override\n  public boolean shouldOverride(String url, String method) {\n    return true;\n  }\n\n  // Overriding the connect method is required.  This method must perform a synchronous\n  // (blocking) network request and return an object conforming to the\n  // Connection interface.\n  @Override\n  public Connection connect(String url, String method, byte[] payload, Map<String, String> headers, int connectionTimeoutSeconds, int readTimeoutSeconds) {\n    try {\n      final URL dest = new URL(url);\n      final HttpURLConnection con = (HttpURLConnection) dest.openConnection();\n      con.setReadTimeout(readTimeoutSeconds * 1000);\n      con.setConnectTimeout(connectionTimeoutSeconds * 1000);\n\n      con.setRequestMethod(method);\n\n      for (final Map.Entry<String, String> entry : headers.entrySet()) {\n        con.setRequestProperty(entry.getKey(), entry.getValue());\n      }\n\n      if (method.equals("POST") && payload != null) {\n        con.setDoOutput(true);\n        con.setFixedLengthStreamingMode(payload.length);\n      }\n\n      con.connect();\n\n      if (method.equals("POST") && payload != null) {\n        final OutputStream os = new BufferedOutputStream(con.getOutputStream());\n        os.write(payload);\n        os.flush();\n        os.close();\n      }\n\n      final InputStream inputStream = con.getInputStream();\n      final int responseCode = con.getResponseCode();\n      final String responseMessage = con.getResponseMessage();\n\n      return new AndroidNetworkServiceOverrider.Connection() {\n        @Override\n        public InputStream getInputStream() {\n          return inputStream;\n        }\n\n        @Override\n        public int getResponseCode() {\n          return responseCode;\n        }\n\n        @Override\n        public String getResponseMessage() {\n          return responseMessage;\n        }\n\n        @Override\n        public String getResponsePropertyValue(String responsePropertyKey) {\n          final String responseHeaderValue = con.getHeaderField(responsePropertyKey);\n          return responseHeaderValue;\n        }\n\n        @Override\n        public void close() {\n          if (inputStream != null) {\n            try {\n              inputStream.close();\n            } catch (final Exception ex) {\n            }\n          }\n          con.disconnect();\n        }\n      };\n\n\n    } catch (final MalformedURLException ex) {\n      return CONNECTION_ERROR_URL;\n\n    } catch (final IOException ex) {\n      return CONNECTION_ERROR_IO;\n    }\n  }\n}\n')),(0,a.mdx)("p",null,"Your implementation must return an object conforming to the ",(0,a.mdx)("inlineCode",{parentName:"p"},"Connection")," interface when the connection has succeeded. If the connection does not succeed, you will need to return these constants (depending on the scenario): ",(0,a.mdx)("ul",null,(0,a.mdx)("li",null,"For all URL parsing / malformed URL issues, return ",(0,a.mdx)("inlineCode",{parentName:"p"},"HTTPConnectionPerformer.CONNECTION_ERROR_URL"),"."),(0,a.mdx)("li",null,"For any IOExceptions or any other errors, return ",(0,a.mdx)("inlineCode",{parentName:"p"},"HTTPConnectionPerformer.CONNECTION_ERROR_IO"),"."))),(0,a.mdx)("h4",{id:"2-register-your-interface-with-the-sdk"},"2. Register your interface with the SDK."),(0,a.mdx)("p",null,"This step should occur prior to any other interactions with the AEP SDK. While it's possible to register the network override at any point during the application lifecycle, the override will only function for network requests performed after the registration has taken place."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},"import com.adobe.marketing.mobile.AndroidNetworkServiceOverrider;\nimport com.adobe.marketing.mobile.MobileCore;\n\npublic void onCreate() {\n    super.onCreate();\n\n  // Register network override prior to making any other calls to the AEP SDK\n  AndroidNetworkServiceOverrider.setHTTPConnectionPerformer(new SampleHTTPConnectionPerformer());\n\n  // First call to AEP SDK\n  MobileCore.setApplication(this);\n  //... continue with initialization / registering extensions.\n}\n")),(0,a.mdx)(m,{platform:"ios",task:"override",repeat:"18",mdxType:"Variant"}),(0,a.mdx)("h4",{id:"1-conform-to-the-acphttpconnectionperformer-protocol"},"1. Conform to the ACPHttpConnectionPerformer protocol"),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},"ACPHttpConnectionPerformer")," is a protocol which must be conformed to in order to override the network stack. It provides two methods which must be implemented:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("inlineCode",{parentName:"li"},"shouldOverride"),", which takes a URL and an HTTP method. Return true if you want the network stack to be overridden by the performer, or false if not. "),(0,a.mdx)("li",{parentName:"ol"},(0,a.mdx)("inlineCode",{parentName:"li"},"requestUrl"),", which is the URL request override with a completion block.")),(0,a.mdx)("h4",{id:"2-create-an-acphttpconnection-and-pass-relevant-data-from-your-nsurlsessiondatatask-completion-block"},"2. Create an ACPHttpConnection and pass relevant data from your NSURLSessionDataTask completion block"),(0,a.mdx)("p",null,"The completion block for the ",(0,a.mdx)("inlineCode",{parentName:"p"},"requestUrl")," method takes an ",(0,a.mdx)("inlineCode",{parentName:"p"},"ACPHttpConnection")," as its parameter. The ",(0,a.mdx)("inlineCode",{parentName:"p"},"ACPHttpConnection")," is used when overriding the network stack in place of the internal network connection implementation and represents the response to an HTTP request. It is to be created using the NSURLResponse and NSData from your url request response. In the case of a Network Error, or timeout, the ",(0,a.mdx)("inlineCode",{parentName:"p"},"ACPHttpConnection*")," is expected to be nil."),(0,a.mdx)("h4",{id:"example"},"Example"),(0,a.mdx)("p",null,"This is just an implementation example. For more information about handling network requests correctly in your mobile application, see ",(0,a.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/foundation/nsurlsessionconfiguration"},"NSURLSessionConfiguration")," and ",(0,a.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/foundation/nsmutableurlrequest"},"NSMutableURLRequest"),"."),(0,a.mdx)("p",null,(0,a.mdx)("strong",{parentName:"p"},"Objective-C")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-objectivec"},'#import <Foundation/Foundation.h>\n#import "ACPNetworkServiceOverrider.h"\n\n@interface SamplePerformerOverrider : NSObject<ACPHttpConnectionPerformer>\n\n@end\n\n@implementation SamplePerformerOverrider {\n    void (^requestUrlCompletion)(ACPHttpConnection*);\n}\n\n  // Modifications here would allow for conditional overriding based on the url/method.\n  // In this example it always returns true to override all network requests.\n- (BOOL) shouldOverride: (NSURL*) url method: (NSString*) method {\n    return true;\n}\n\n    // Network request override with a completion block. The provided parameters should be configured on the network request.\n- (void) requestUrl: (NSURL*) url httpCommand: (NSString*) command connectPayload: (NSString*) payload requestPropertyDict: (NSDictionary<NSString*, NSString*>*) requestProperty connectTimeout: (NSTimeInterval) connectTimeout readTimeout: (NSTimeInterval) readTimeout completion: (void (^) (ACPHttpConnection*)) completion {\n\n    requestUrlCompletion = completion;\n\n    // Create the NSURLSessionConfiguration with the provided timeouts\n    NSURLSessionConfiguration* config = [NSURLSessionConfiguration ephemeralSessionConfiguration];\n    config.URLCache = nil;\n    config.timeoutIntervalForRequest = readTimeout;\n    config.timeoutIntervalForResource = connectTimeout;\n\n    NSURLSession* session = [NSURLSession sessionWithConfiguration:config];\n\n    // Create an NSURLRequest with the provided request parameters\n    NSMutableURLRequest* request = [NSMutableURLRequest new];\n    [request setCachePolicy:NSURLRequestReloadIgnoringLocalCacheData];\n    [request setHTTPMethod:command];\n    [request setURL:url];\n\n      if (payload.length > 0 && [@"POST" isEqualToString:[command uppercaseString]]) {\n       [request setHTTPBody:[payload dataUsingEncoding:NSUTF8StringEncoding]];\n    }\n\n    for (NSString *key in requestProperty) {\n        NSString* value = requestProperty[key];\n        [request setValue:value forHTTPHeaderField:key];\n    }\n\n    // Start the request\n    NSURLSessionDataTask* task;\n    task = [session dataTaskWithRequest:request\n                      completionHandler: ^ (NSData * data, NSURLResponse * response, NSError * error) {\n                if(!error) {\n                    NSHTTPURLResponse* httpResponse = (NSHTTPURLResponse*)response;\n\n            // ***** NOTE the creation of the ACPHttpConnection outlined in step 2.*****\n            ACPHttpConnection* connOverride = [[ACPHttpConnection alloc] initWithResponse:httpResponse data:data];\n            completion(connOverride); \n        } else {\n            completion(nil);\n        }\n    }];\n    [task resume];\n}\n\n@end\n')),(0,a.mdx)("p",null,(0,a.mdx)("strong",{parentName:"p"},"Swift")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-swift"},'import Foundation\nimport ACPCore\n\nclass SamplePerformerOverrider: NSObject, ACPHttpConnectionPerformer {\n\n    // Modifications here would allow for conditional overriding based on the url/method.\n    // In this example it always returns true to override all network requests.\n    func shouldOverride(_ url: URL, method: String) -> Bool {\n      return true\n    }\n\n    // Network request override with a completion block. The provided parameters should be configured on the network request.\n    func request(_ url: URL, httpCommand command: String, connectPayload payload: String, requestPropertyDict requestProperty: [String : String], connectTimeout: TimeInterval, readTimeout: TimeInterval, completion: @escaping (ACPHttpConnection?) -> Void) {\n\n      // Create the URLSessionConfiguration with the provided timeouts\n      let config = URLSessionConfiguration.ephemeral\n      config.urlCache = nil\n      config.timeoutIntervalForRequest = readTimeout\n      config.timeoutIntervalForResource = connectTimeout\n\n      let session = URLSession(configuration: config)\n\n      // Create an NSURLRequest with the provided request parameters\n      let request = NSMutableURLRequest.init(url: url)\n      request.cachePolicy = NSURLRequest.CachePolicy.reloadIgnoringLocalCacheData\n      request.httpMethod = command\n\n      if !payload.isEmpty && "POST" == command.uppercased() {\n        request.httpBody = payload.data(using: .utf8)\n      }\n\n      for property in requestProperty {\n        request.setValue(property.value, forHTTPHeaderField: property.key)\n      }\n\n      // Start the request\n      let task = session.dataTask(with: url, completionHandler: { (data, response, error) in\n        if error == nil {\n          let httpResponse = response as? HTTPURLResponse\n          // create ACPHttpConnection object with the data received and call the completion handler\n          let connectionOverride = ACPHttpConnection(response: httpResponse, data: data)\n          completion(connectionOverride)\n        } else {\n          completion(nil)\n        }\n      })\n      task.resume()\n    }\n}\n')),(0,a.mdx)("h4",{id:"3-register-your-acphttpconnectionperformer-with-the-sdk"},"3: Register your ACPHttpConnectionPerformer with the SDK"),(0,a.mdx)("p",null,"This step should occur prior to any other interactions with the AEP SDK. While it's possible to register the network override at any point during the application lifecycle, the override will only function for network requests performed after the registration has taken place."),(0,a.mdx)("h4",{id:"example-1"},"Example"),(0,a.mdx)("p",null,(0,a.mdx)("strong",{parentName:"p"},"Objective-C")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-objectivec"},'#import "SamplePerformerOverrider.h"\n#import "ACPCore.h"\n\n@implementation AppDelegate\n\n-(BOOL)application:(UIApplication *)application \ndidFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> *)launchOptions {\n        ...\n        [ACPNetworkServiceOverrider setHttpConnectionPerformer:[[SamplePerformerOverrider alloc] init]];\n        ...\n        [ACPCore start:^{\n        ...\n        }];\n')),(0,a.mdx)("p",null,(0,a.mdx)("strong",{parentName:"p"},"Swift")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-swift"},"import ACPCore\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n    var window: UIWindow?\n    func applicationDidFinishLaunching(_ application: UIApplication) {\n        ...\n        ACPNetworkServiceOverrider.setHttpConnectionPerformer(SamplePerformerOverrider())\n        ACPCore.start {\n        ...\n        }\n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-documentation-mobile-core-platform-services-index-md-ea88d88511809f9152f9.js.map