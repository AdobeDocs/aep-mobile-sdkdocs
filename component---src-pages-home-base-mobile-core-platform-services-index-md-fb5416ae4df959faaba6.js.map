{"version":3,"file":"component---src-pages-home-base-mobile-core-platform-services-index-md-fb5416ae4df959faaba6.js","mappings":"+TAOaA,EAAe,CAAC,EACvBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EAClB,CAAC,EACKG,EAAYL,EAAc,aAC1BM,EAAcN,EAAc,eAC5BO,EAAc,CAClBR,aAAAA,GAEIS,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGT,GAAK,YAER,OAAO,SAACM,GAAS,UAAKD,EAAiBL,EAAK,CAAES,WAAYA,EAAYC,QAAQ,eAI5E,eACE,GAAM,qBAAmB,sBAE3B,oaAAqZ,cAAGC,WAAW,IAC/Z,KAAQ,uFAAqF,OACjF,SAAS,cAAGA,WAAW,IACnC,KAAQ,6EAA2E,WACnE,mBACpB,eACE,GAAM,sBAAoB,uBAE5B,iEAAkD,uBAAYA,WAAW,KAAG,mBAAiC,4GAC7G,8EAA+D,uBAAYA,WAAW,KAAG,OAAqB,mCAAmC,uBAAYA,WAAW,KAAG,kBAAgC,oHAAoH,uBAAYA,WAAW,KAAG,mBAAiC,4FAA4F,uBAAYA,WAAW,KAAG,mBAAiC,yIACjhB,kFAAmE,uBAAYA,WAAW,KAAG,gBAA8B,MAC3H,SAACR,EAAS,CAACS,YAAY,aAAaC,MAAM,mBAAmBC,OAAO,IAAIJ,QAAQ,eAChF,8BACA,SAAC,UAAI,CAACK,MAAM,+BAA+BL,QAAQ,UACnD,0BACA,SAAC,UAAI,CAACK,MAAM,2BAA2BL,QAAQ,UAC/C,eACE,GAAM,uBAAqB,wBAE7B,gKAAiJ,uBAAYC,WAAW,KAAG,WAAyB,4CACpM,SAACP,EAAW,CAACY,QAAQ,OAAOH,MAAM,OAAOH,QAAQ,iBACjD,yJACA,SAACP,EAAS,CAACS,YAAY,aAAaC,MAAM,mBAAmBC,OAAO,IAAIJ,QAAQ,eAChF,8BACA,SAAC,UAAI,CAACK,MAAM,iCAAiCL,QAAQ,UACrD,0BACA,SAAC,UAAI,CAACK,MAAM,6BAA6BL,QAAQ,SAGrD,CAEAF,EAAWS,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/home/base/mobile-core/platform-services/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Tabs from './tabs/index.md';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst TabsBlock = makeShortcode(\"TabsBlock\");\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"platform-services\"\n    }}>{`Platform Services`}</h1>\n    <p>{`The Platform Services are provided by the Adobe Experience Platform Mobile SDKs as part of the Mobile Core extension. These services provide shared functionality throughout the SDK that can be shared by extensions. For example, services provide shared functionality for networking, data queuing, and caching. For more information on services provided by the SDK please see the documentation in our `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/aepsdk-core-ios/blob/main/Documentation/Services/README.md\"\n      }}>{`iOS`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/aepsdk-core-ios/tree/main/Documentation/Services\"\n      }}>{`Android`}</a>{` repositories.`}</p>\n    <h2 {...{\n      \"id\": \"accessing-services\"\n    }}>{`Accessing services`}</h2>\n    <p>{`The MobileCore extension provides a shared `}<inlineCode parentName=\"p\">{`ServiceProvider`}</inlineCode>{`, responsible for maintaining the current set of provided services and any potential service overrides.`}</p>\n    <p>{`Some services provide wrapper classes. For example, the `}<inlineCode parentName=\"p\">{`Log`}</inlineCode>{` class is a wrapper around the `}<inlineCode parentName=\"p\">{`LoggingService`}</inlineCode>{`. However, in some cases, a wrapper class may not exist, and you may need to access a service directly from the `}<inlineCode parentName=\"p\">{`ServiceProvider`}</inlineCode>{`. The recommended way to do this is through a computed variable or directly through the `}<inlineCode parentName=\"p\">{`ServiceProvider`}</inlineCode>{` when required. This ensures that if the service is overridden, the service consumer always uses the correct service implementation.`}</p>\n    <p>{`For example, the following code snippet shows how to access `}<inlineCode parentName=\"p\">{`CacheService`}</inlineCode>{`.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&task=access\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&task=access\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"overriding-services\"\n    }}>{`Overriding services`}</h2>\n    <p>{`The SDK allows overriding some services with your custom implemetation. This section walks through the steps necessary to create a custom `}<inlineCode parentName=\"p\">{`Logging`}</inlineCode>{` service, and register it with the SDK.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Use caution when overriding services. Changes to behavior for a given service can have unintended consequences throughout the SDK.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&task=override\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&task=override\" mdxType=\"Tabs\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","TabsBlock","InlineAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","orientation","slots","repeat","query","variant","isMDXComponent"],"sourceRoot":""}