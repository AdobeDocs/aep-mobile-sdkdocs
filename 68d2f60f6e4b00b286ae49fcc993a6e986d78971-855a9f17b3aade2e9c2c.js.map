{"version":3,"file":"68d2f60f6e4b00b286ae49fcc993a6e986d78971-855a9f17b3aade2e9c2c.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/documentation/adobe-campaign-standard/tabs/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" task=\"add\" repeat=\"5\" mdxType=\"Variant\" />\n    <ol>\n      <li parentName=\"ol\">{`Add the Campaign Standard, `}<a parentName=\"li\" {...{\n          \"href\": \"../mobile-core/index.md\"\n        }}>{`Mobile Core`}</a>{` and `}<a parentName=\"li\" {...{\n          \"href\": \"../profile/index.md\"\n        }}>{`Profile`}</a>{` extensions to your project using the app's Gradle file.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`implementation 'com.adobe.marketing.mobile:campaign:1.+'\nimplementation 'com.adobe.marketing.mobile:userprofile:1.+'\nimplementation 'com.adobe.marketing.mobile:sdk-core:1.+'\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Import the Campaign Standard, `}<a parentName=\"li\" {...{\n          \"href\": \"../mobile-core/index.md\"\n        }}>{`Mobile Core`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"../profile/index.md\"\n        }}>{`Profile`}</a>{`, `}<a parentName=\"li\" {...{\n          \"href\": \"../mobile-core/lifecycle/index.md\"\n        }}>{`Lifecycle`}</a>{`, and `}<a parentName=\"li\" {...{\n          \"href\": \"../mobile-core/signals/index.md\"\n        }}>{`Signal`}</a>{` extensions in your application's main activity.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import com.adobe.marketing.mobile.AdobeCallback;\nimport com.adobe.marketing.mobile.Campaign;\nimport com.adobe.marketing.mobile.Identity;\nimport com.adobe.marketing.mobile.Lifecycle;\nimport com.adobe.marketing.mobile.MobileCore;\nimport com.adobe.marketing.mobile.Signal;\nimport com.adobe.marketing.mobile.UserProfile;\n`}</code></pre>\n    <p>{`To complete a manual installation, go to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Adobe-Marketing-Cloud/acp-sdks/tree/master/android\"\n      }}>{`Adobe Experience Platform SDKs for Android GitHub`}</a>{` repo, fetch the Mobile Core, Campaign Standard, Profile, Lifecycle, and Signal artifacts, and complete the steps in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Adobe-Marketing-Cloud/acp-sdks/blob/master/README.md#manual-installation\"\n      }}>{`manual installation`}</a>{` section.`}</p>\n    <Variant platform=\"ios-aep\" task=\"add\" repeat=\"7\" mdxType=\"Variant\" />\n    <ol>\n      <li parentName=\"ol\">{`Add the Campaign Standard, `}<a parentName=\"li\" {...{\n          \"href\": \"../mobile-core/index.md\"\n        }}>{`Mobile Core`}</a>{`, and `}<a parentName=\"li\" {...{\n          \"href\": \"../profile/index.md\"\n        }}>{`Profile`}</a>{` extensions to your project using Cocoapods.`}</li>\n    </ol>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1280px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"63.74999999999999%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/aep-mobile-sdkdocs/static/ebae19aeb23b7e0ec14d04d7bcdfabf8/5530d/aep-cocoapods.webp 320w\", \"/aep-mobile-sdkdocs/static/ebae19aeb23b7e0ec14d04d7bcdfabf8/0c8fb/aep-cocoapods.webp 640w\", \"/aep-mobile-sdkdocs/static/ebae19aeb23b7e0ec14d04d7bcdfabf8/94b1e/aep-cocoapods.webp 1280w\", \"/aep-mobile-sdkdocs/static/ebae19aeb23b7e0ec14d04d7bcdfabf8/08048/aep-cocoapods.webp 1400w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/aep-mobile-sdkdocs/static/ebae19aeb23b7e0ec14d04d7bcdfabf8/dd4a7/aep-cocoapods.png 320w\", \"/aep-mobile-sdkdocs/static/ebae19aeb23b7e0ec14d04d7bcdfabf8/0f09e/aep-cocoapods.png 640w\", \"/aep-mobile-sdkdocs/static/ebae19aeb23b7e0ec14d04d7bcdfabf8/bbbf7/aep-cocoapods.png 1280w\", \"/aep-mobile-sdkdocs/static/ebae19aeb23b7e0ec14d04d7bcdfabf8/3643c/aep-cocoapods.png 1400w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/aep-mobile-sdkdocs/static/ebae19aeb23b7e0ec14d04d7bcdfabf8/bbbf7/aep-cocoapods.png\",\n            \"alt\": \"aep cocoapods\",\n            \"title\": \"aep cocoapods\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`In Xcode, import the Mobile Core, Campaign Standard, Profile, Lifecycle, Identity, Signal, and Services extensions:`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import AEPCore\nimport AEPCampaign\nimport AEPUserProfile\nimport AEPIdentity\nimport AEPLifecycle\nimport AEPSignal\nimport AEPServices\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objective-c\"\n      }}>{`@import AEPCore;\n@import AEPCampaign;\n@import AEPUserProfile;\n@import AEPIdentity;\n@import AEPLifecycle;\n@import AEPSignal;\n@import AEPServices;\n`}</code></pre>\n    <Variant platform=\"ios-acp\" task=\"add\" repeat=\"8\" mdxType=\"Variant\" />\n    <ol>\n      <li parentName=\"ol\">{`Add the Campaign Standard, `}<a parentName=\"li\" {...{\n          \"href\": \"../mobile-core/index.md\"\n        }}>{`Mobile Core`}</a>{` and `}<a parentName=\"li\" {...{\n          \"href\": \"../profile/index.md\"\n        }}>{`Profile`}</a>{` extensions to your project using Cocoapods.`}</li>\n    </ol>\n    <p><span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"1280px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"59.06250000000001%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/aep-mobile-sdkdocs/static/2ce4b7333ee710b498412bba96225e55/5530d/cocoapods.webp 320w\", \"/aep-mobile-sdkdocs/static/2ce4b7333ee710b498412bba96225e55/0c8fb/cocoapods.webp 640w\", \"/aep-mobile-sdkdocs/static/2ce4b7333ee710b498412bba96225e55/94b1e/cocoapods.webp 1280w\", \"/aep-mobile-sdkdocs/static/2ce4b7333ee710b498412bba96225e55/640c8/cocoapods.webp 1378w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/aep-mobile-sdkdocs/static/2ce4b7333ee710b498412bba96225e55/dd4a7/cocoapods.png 320w\", \"/aep-mobile-sdkdocs/static/2ce4b7333ee710b498412bba96225e55/0f09e/cocoapods.png 640w\", \"/aep-mobile-sdkdocs/static/2ce4b7333ee710b498412bba96225e55/bbbf7/cocoapods.png 1280w\", \"/aep-mobile-sdkdocs/static/2ce4b7333ee710b498412bba96225e55/d234e/cocoapods.png 1378w\"],\n            \"sizes\": \"(max-width: 1280px) 100vw, 1280px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/aep-mobile-sdkdocs/static/2ce4b7333ee710b498412bba96225e55/bbbf7/cocoapods.png\",\n            \"alt\": \"cocoapods\",\n            \"title\": \"cocoapods\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <p>{`To complete a manual installation, go to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Adobe-Marketing-Cloud/acp-sdks/tree/master/iOS\"\n      }}>{`Adobe Experience Platform SDKs for iOS GitHub`}</a>{` repo, fetch the Mobile Core, Campaign Standard, Profile, Lifecycle, and Signal artifacts, and complete the steps in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Adobe-Marketing-Cloud/acp-sdks/blob/master/README.md#manual-installation-1\"\n      }}>{`manual installation`}</a>{` section.`}</p>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`In Xcode, import the Mobile Core, Campaign Standard, Profile, Lifecycle, and Signal extensions:`}</li>\n    </ol>\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import ACPCore\nimport ACPCampaign\nimport ACPUserProfile\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`#import \"ACPCore.h\"\n#import \"ACPCampaign.h\"\n#import \"ACPUserProfile.h\"\n#import \"ACPIdentity.h\"\n#import \"ACPLifecycle.h\"\n#import \"ACPSignal.h\"\n`}</code></pre>\n    <Variant platform=\"react-native\" task=\"add\" repeat=\"7\" mdxType=\"Variant\" />\n    <p>{`You'll need to install the SDK with `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.npmjs.com/\"\n      }}>{`npm`}</a>{` and configure the native Android/iOS project in your react native project. Before installing the Campaign Standard extension, you'll need to install the `}<a parentName=\"p\" {...{\n        \"href\": \"../mobile-core/indexs.md\"\n      }}>{`Core extension`}</a>{`. Follow these steps to get started:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Create a React Native project.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`react-native init MyReactApp\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Install and link the `}<inlineCode parentName=\"li\">{`@adobe/react-native-acpcampaign`}</inlineCode>{` package.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @adobe/react-native-acpcampaign\nreact-native link @adobe/react-native-acpcampaign\n`}</code></pre>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`Import the extension from `}<inlineCode parentName=\"li\">{`@adobe/react-native-acpcampaign`}</inlineCode>{`.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`import {ACPCampaign} from '@adobe/react-native-acpcampaign';\n`}</code></pre>\n    <Variant platform=\"android\" task=\"register\" repeat=\"4\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <p>{`In your app's `}<inlineCode parentName=\"p\">{`OnCreate`}</inlineCode>{` method, register the Campaign, Identity, Signal, and Lifecycle extensions:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`    public class CampaignTestApp extends Application {\n\n        @Override\n        public void onCreate() {\n        super.onCreate();\n        MobileCore.setApplication(this);\n        MobileCore.setLogLevel(LoggingMode.DEBUG);\n\n        try {\n            Campaign.registerExtension();\n            UserProfile.registerExtension();\n            Identity.registerExtension();\n            Lifecycle.registerExtension();\n            Signal.registerExtension();\n            MobileCore.start(new AdobeCallback () {\n            @Override\n            public void call(Object o) {\n                MobileCore.configureWithAppID(\"launch-EN2c0ccd3a457a4c47b65a6b085e269c91-staging\");\n            }\n            });\n        } catch (InvalidInitException e) {\n            Log.e(\"CampaignTestApp\", e.getMessage());\n        }\n\n        }\n    }\n`}</code></pre>\n    <p>{`For more information about starting Lifecycle, see the `}<a parentName=\"p\" {...{\n        \"href\": \"../mobile-core/lifecycle/android.md\"\n      }}>{`Lifecycle extension in Android guide`}</a>{`.`}</p>\n    <Variant platform=\"ios-aep\" task=\"register\" repeat=\"6\" mdxType=\"Variant\" />\n    <p>{`In your app's `}<inlineCode parentName=\"p\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` method, register the Campaign, Identity, Signal, and Lifecycle extensions:`}</p>\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n  MobileCore.setLogLevel(.debug)\n  let appState = application.applicationState\n  let extensions = [\n    Campaign.self,\n    UserProfile.self,\n    Identity.self,\n    Lifecycle.self,\n    Signal.self\n  ]\n  MobileCore.registerExtensions(extensions, {\n    MobileCore.configureWith(appId: \"APP-ID\")\n    if appState != .background {\n      MobileCore.lifecycleStart(additionalContextData: [\"contextDataKey\": \"contextDataVal\"])\n    }\n  })\n\n  return true;\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objective-c\"\n      }}>{`- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n  [AEPMobileCore setLogLevel: AEPLogLevelDebug];\n  NSArray *extensionsToRegister = @[\n    AEPMobileCampaign.class,\n    AEPMobileUserProfile.class,\n    AEPMobileIdentity.class,\n    AEPMobileLifecycle.class,\n    AEPMobileSignal.class\n  ];\n  [AEPMobileCore registerExtensions:extensionsToRegister completion:^{\n  [AEPMobileCore lifecycleStart:@{@\"contextDataKey\": @\"contextDataVal\"}];\n  }];\n  [AEPMobileCore configureWithAppId: @\"APP-ID\"];\n  // Override point for customization after application launch.\n  return YES;\n}\n`}</code></pre>\n    <p>{`For more information about starting Lifecycle, see the `}<a parentName=\"p\" {...{\n        \"href\": \"../mobile-core/lifecycle/ios.md\"\n      }}>{`Lifecycle extension in iOS guide`}</a>{`.`}</p>\n    <Variant platform=\"ios-acp\" task=\"register\" repeat=\"6\" mdxType=\"Variant\" />\n    <p>{`In your app's `}<inlineCode parentName=\"p\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` method, register the Campaign, Identity, Signal, and Lifecycle extensions:`}</p>\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n           ACPCore.setLogLevel(.debug)\n        ACPCore.configure(withAppId: \"launch-EN2c0ccd3a457a4c47b65a6b085e269c91-staging\")\n\n        ACPCampaign.registerExtension()\n        ACPUserProfile.registerExtension()\n        ACPIdentity.registerExtension()\n        ACPLifecycle.registerExtension()\n        ACPSignal.registerExtension()\n        ACPCore.start {\n        ACPCore.lifecycleStart(nil)\n        }\n\n      return true;\n    }\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`    - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n        [ACPCore setLogLevel:ACPMobileLogLevelDebug];\n        [ACPCore configureWithAppId:@\"launch-EN2c0ccd3a457a4c47b65a6b085e269c91-staging\"];\n\n        [ACPCampaign registerExtension];\n        [ACPUserProfile registerExtension];\n        [ACPIdentity registerExtension];\n        [ACPLifecycle registerExtension];\n        [ACPSignal registerExtension];\n        [ACPCore start:^{\n        [ACPCore lifecycleStart:nil];\n        }];\n      // Override point for customization after application launch.\n      return YES;\n    }\n`}</code></pre>\n    <p>{`For more information about starting Lifecycle, see the `}<a parentName=\"p\" {...{\n        \"href\": \"../mobile-core/lifecycle/ios.md\"\n      }}>{`Lifecycle extension in iOS guide`}</a>{`.`}</p>\n    <Variant platform=\"react-native\" task=\"register\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`To register the Campaign Standard with Core, use the following API:`}</p>\n    <p><strong parentName=\"p\">{`JavaScript`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`ACPCampaign.registerExtension();\n`}</code></pre>\n    <Variant platform=\"android\" task=\"initialize\" repeat=\"7\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"set-up-in-app-messaging\"\n    }}>{`Set up in-app messaging`}</h4>\n    <p>{`To learn how to create an in-app message using Adobe Campaign, see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://experienceleague.adobe.com/docs/campaign-standard/using/communication-channels/in-app-messaging/preparing-and-sending-an-in-app-message.html\"\n      }}>{`tutorial on preparing and sending an in-app message`}</a>{`.`}</p>\n    <p>{`If you are developing an Android application, to correctly display fullscreen in-app messages, add the Campaign Standard extension's `}<inlineCode parentName=\"p\">{`FullscreenMessageActivity`}</inlineCode>{` to your AndroidManifest.xml file:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-markup\"\n      }}>{`<activity android:name=\"com.adobe.marketing.mobile.FullscreenMessageActivity\" />\n`}</code></pre>\n    <p>{`In addition to adding the `}<inlineCode parentName=\"p\">{`FullscreenMessageActivity`}</inlineCode>{`, a global lifecycle callback must be defined in your app's MainActivity to ensure the proper display of fullscreen in-app messages. To define the global lifecycle callback, see the `}<a parentName=\"p\" {...{\n        \"href\": \"../mobile-core/lifecycle/android.md#implementing-global-lifecycle-callbacks\"\n      }}>{`implementing global lifecycle callbacks section`}</a>{` within the Lifecycle documentation.`}</p>\n    <h4 {...{\n      \"id\": \"set-up-local-notifications\"\n    }}>{`Set up local notifications`}</h4>\n    <p>{`To set up local notifications in Android, update the AndroidManifest.xml file with `}<inlineCode parentName=\"p\">{`<receiver android:name=\"com.adobe.marketing.mobile.LocalNotificationHandler\"/>`}</inlineCode>{`. To configure the notification icons that the local notification will use, see the `}<a parentName=\"p\" {...{\n        \"href\": \"../adobe-analytics-mobile-services/index.md#configuring-notification-icons\"\n      }}>{`configuring notification icons section`}</a>{` within the Adobe Analytics - Mobile Services documentation.`}</p>\n    <Variant platform=\"ios-aep\" task=\"initialize\" repeat=\"1\" mdxType=\"Variant\" />\n    <p>{`No additional setup is needed for iOS in-app messaging and local notifications.`}</p>\n    <Variant platform=\"ios-acp\" task=\"initialize\" repeat=\"1\" mdxType=\"Variant\" />\n    <p>{`No additional setup is needed for iOS in-app messaging and local notifications.`}</p>\n    <Variant platform=\"android\" task=\"push-messaging\" repeat=\"3\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`FirebaseInstanceId.getInstance().getInstanceId()\n        .addOnCompleteListener(new OnCompleteListener<InstanceIdResult>() {\n            @Override\n            public void onComplete(@NonNull Task<InstanceIdResult> task) {\n                if (!task.isSuccessful()) {\n                    return;\n                }\n                // Get new Instance ID token\n                String registrationID = task.getResult().getToken();\n                // Log and toast\n                System.out.println(\"Received new registration token: \" + registrationID);\n                // invoke the API to send the push identifier to the Identity Service\n                MobileCore.setPushIdentifier(registrationID);\n            }\n});\n`}</code></pre>\n    <Variant platform=\"ios-aep\" task=\"push-messaging\" repeat=\"7\" mdxType=\"Variant\" />\n    <p>{`iOS simulators do `}<strong parentName=\"p\">{`not`}</strong>{` support push messaging.`}</p>\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n  // Set the deviceToken that the APNS has assigned to the device\n  MobileCore.setPushIdentifier(deviceToken: deviceToken)\n  //...\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-1\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objective-c\"\n      }}>{`- (void) application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n  // Set the deviceToken that the APNS has assigned to the device\n  [AEPMobileCore setPushIdentifier:deviceToken];\n  //...\n}\n`}</code></pre>\n    <Variant platform=\"ios-acp\" task=\"push-messaging\" repeat=\"7\" mdxType=\"Variant\" />\n    <p>{`iOS simulators do `}<strong parentName=\"p\">{`not`}</strong>{` support push messaging.`}</p>\n    <h4 {...{\n      \"id\": \"swift-2\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n  // Set the deviceToken that the APNS has assigned to the device\n  ACPCore.setPushIdentifier(deviceToken)\n  //...\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-2\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objective-c\"\n      }}>{`- (void) application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n  // Set the deviceToken that the APNS has assigned to the device\n  [ACPCore setPushIdentifier:deviceToken];\n  //...\n}\n`}</code></pre>\n    <Variant platform=\"react-native\" task=\"push-messaging\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`Before you use the following API in your React Native project, complete the steps in the `}<strong parentName=\"p\">{`Android`}</strong>{` and `}<strong parentName=\"p\">{`iOS`}</strong>{` tabs to set up platform-specific push configuration.`}</p>\n    <h4 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`ACPCore.setPushIdentifier(\"pushID\");\n`}</code></pre>\n    <Variant platform=\"android\" task=\"track\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void collectMessageInfo(final Map<String, Object> messageInfo)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`messageInfo`}</em>{` is a map that contains the delivery ID, message ID, and action type for a local or push notification for which there were interactions. The delivery and message IDs are extracted from the notification payload.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\nprotected void onResume() {\n  super.onResume();\n  handleTracking();\n}\n\n// handle notification open and click tracking\nprivate void handleTracking() {\n  Intent intent = getIntent();\n  Bundle data = intent.getExtras();\n  HashMap<String, Object> userInfo = null;\n\n  if (data != null) {\n    userInfo = (HashMap)data.get(\"NOTIFICATION_USER_INFO\");\n  } else {\n    return;\n  }\n\n  // Check if we have notification user info.\n  // If it is present, this view was opened based on a notification.\n  if (userInfo != null) {\n    String deliveryId = (String)userInfo.get(\"deliveryId\");\n    String broadlogId = (String)userInfo.get(\"broadlogId\");\n\n    HashMap<String, Object> contextData = new HashMap<>();\n\n    if (deliveryId != null && broadlogId != null) {\n      contextData.put(\"deliveryId\", deliveryId);\n      contextData.put(\"broadlogId\", broadlogId);\n\n      // Send Click Tracking since the user did click on the notification\n      contextData.put(\"action\", \"2\");\n      MobileCore.collectMessageInfo(contextData);\n\n      // Send Open Tracking since the user opened the app\n      contextData.put(\"action\", \"1\");\n      MobileCore.collectMessageInfo(contextData);\n    }\n  }\n}\n`}</code></pre>\n    <Variant platform=\"ios-aep\" task=\"track\" repeat=\"12\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-3\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func collectMessageInfo(_ messageInfo: [String: Any])\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`messageInfo`}</em>{` is a dictionary that contains the delivery ID, message ID, and action type for a local or push notification for which there were interactions. The delivery and message IDs are extracted from the notification payload.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`// Handle notification interaction from background or closed\nfunc userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n  DispatchQueue.main.async(execute: {\n    let userInfo = response.notification.request.content.userInfo\n    var broadlogId:String = (userInfo[\"_mId\"] ?? userInfo[\"broadlogId\"]) as! String\n    var deliveryId:String = (userInfo[\"_dId\"] ?? userInfo[\"deliveryId\"]) as! String\n\n    if (broadlogId.count == 0 || deliveryId.count == 0) {\n      return\n    }\n    // Send Click Tracking since the user did click on the notification\n    MobileCore.collectMessageInfo([\n      \"broadlogId\": broadlogId,\n      \"deliveryId\": deliveryId,\n      \"action\": \"2\"\n    ])\n    // Send Open Tracking since the user opened the app\n    MobileCore.collectMessageInfo([\n      \"broadlogId\": broadlogId,\n      \"deliveryId\": deliveryId,\n      \"action\": \"1\"\n    ])\n  })\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-3\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objective-c\"\n      }}>{`+ (void) collectMessageInfo:(NSDictionary<NSString *,id> * _Nonnull)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`messageInfo`}</em>{` is a dictionary that contains the delivery ID, message ID, and action type for a local or push notification for which there were interactions. The delivery and message IDs are extracted from the notification payload.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`// Handle notification interaction from background or closed\n-(void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler{\n  dispatch_async(dispatch_get_main_queue(), ^{\n    NSDictionary *userInfo = response.notification.request.content.userInfo;\n    NSString *broadlogId = userInfo[@\"_mId\"] ?: userInfo[@\"broadlogId\"];\n    NSString *deliveryId = userInfo[@\"_dId\"] ?: userInfo[@\"deliveryId\"];\n\n    if(!broadlogId.length || !deliveryId.length){\n      return;\n    }\n    \n    // Send Click Tracking since the user did click on the notification\n    [AEPMobileCore collectMessageInfo:@{\n      @\"broadlogId\" : broadlogId,\n      @\"deliveryId\": deliveryId,\n      @\"action\": @\"2\"\n    }];\n    // Send Open Tracking since the user opened the app\n    [AEPMobileCore collectMessageInfo:@{\n      @\"broadlogId\" : broadlogId,\n      @\"deliveryId\": deliveryId,\n      @\"action\": @\"1\"\n    }];\n  });\n}\n`}</code></pre>\n    <Variant platform=\"ios-acp\" task=\"track\" repeat=\"12\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-4\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`+ (void) collectMessageInfo: (nonnull NSDictionary*) messageInfo;\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`messageInfo`}</em>{` is a dictionary that contains the delivery ID, message ID, and action type for a local or push notification for which there were interactions. The delivery and message IDs are extracted from the notification payload.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`// Handle notification interaction from background or closed\nfunc userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n  DispatchQueue.main.async(execute: {\n    let userInfo = response.notification.request.content.userInfo\n    var broadlogId:String = (userInfo[\"_mId\"] ?? userInfo[\"broadlogId\"]) as! String\n    var deliveryId:String = (userInfo[\"_dId\"] ?? userInfo[\"deliveryId\"]) as! String\n\n    if (broadlogId.count == 0 || deliveryId.count == 0) {\n      return\n    }\n    // Send Click Tracking since the user did click on the notification\n    ACPCore.collectMessageInfo([\n      \"broadlogId\": broadlogId,\n      \"deliveryId\": deliveryId,\n      \"action\": \"2\"\n    ])\n    // Send Open Tracking since the user opened the app\n    ACPCore.collectMessageInfo([\n      \"broadlogId\": broadlogId,\n      \"deliveryId\": deliveryId,\n      \"action\": \"1\"\n    ])\n  })\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-4\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objective-c\"\n      }}>{`+ (void) collectMessageInfo: (nonnull NSDictionary*) messageInfo;\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`messageInfo`}</em>{` is a dictionary that contains the delivery ID, message ID, and action type for a local or push notification for which there were interactions. The delivery and message IDs are extracted from the notification payload.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objective-c\"\n      }}>{`// Handle notification interaction from background or closed\n-(void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler{\n  dispatch_async(dispatch_get_main_queue(), ^{\n    NSDictionary *userInfo = response.notification.request.content.userInfo;\n    NSString *broadlogId = userInfo[@\"_mId\"] ?: userInfo[@\"broadlogId\"];\n    NSString *deliveryId = userInfo[@\"_dId\"] ?: userInfo[@\"deliveryId\"];\n\n    if(!broadlogId.length || !deliveryId.length){\n      return;\n    }\n    // Send Click Tracking since the user did click on the notification\n    [ACPCore collectMessageInfo:@{\n      @\"broadlogId\" : broadlogId,\n      @\"deliveryId\": deliveryId,\n      @\"action\": @\"2\"\n    }];\n    // Send Open Tracking since the user opened the app\n    [ACPCore collectMessageInfo:@{\n      @\"broadlogId\" : broadlogId,\n      @\"deliveryId\": deliveryId,\n      @\"action\": @\"1\"\n    }];\n  });\n}\n`}</code></pre>\n    <Variant platform=\"android\" task=\"handling\" repeat=\"10\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"handling-in-app-message-website-urls-on-android\"\n    }}>{`Handling in-app message website URLs on Android`}</h4>\n    <p>{`Website URL's are handled without any additional action by the app developer. If an in-app message is clicked through and contains a valid URL, the device's default web browser will redirect to the URL contained in the in-app notification payload. The location of the URL differs for each notification type:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`url`}</inlineCode>{` key is present in the alert message payload`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`url`}</inlineCode>{` is present in the query parameters of a fullscreen message button (`}<inlineCode parentName=\"li\">{`data-destination-url`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`adb_deeplink`}</inlineCode>{` key is present in the local notification payload`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`uri`}</inlineCode>{` key is present in the push notification payload`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"handling-in-app-message-deep-links-on-android\"\n    }}>{`Handling in-app message deep links on Android`}</h4>\n    <p>{`To handle deep links in the notification payload, you need to set up URL schemes in the app. For more information about setting URL schemes for Android, please read the tutorial on `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.android.com/training/app-links/deep-linking\"\n      }}>{`creating deep links to app content`}</a>{`. Once the desired activity is started by the newly added intent filter, the data present in the deep link can be retrieved. After that point, any further actions based on the data present in the deep link can be made.`}</p>\n    <h4 {...{\n      \"id\": \"java-2\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.main);\n\n    Intent intent = getIntent();\n    String action = intent.getAction();\n    Uri data = intent.getData();\n      // parse any data present in the deep link\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"handling-in-app-message-app-links-on-android\"\n    }}>{`Handling in-app message app links on Android`}</h4>\n    <p>{`Android app links were introduced with Android OS 6.0. They are similar to deep links in functionality, although they have the appearance of a standard website URL. The intent filter previously set up for deep links is modified to handle `}<inlineCode parentName=\"p\">{`http`}</inlineCode>{` schemes and verification of the app link needs to be set up on `}<a parentName=\"p\" {...{\n        \"href\": \"https://support.google.com/webmasters/answer/9008080\"\n      }}>{`Google Search Console`}</a>{`.`}</p>\n    <p>{`For more information on the additional verification setup needed, please read the tutorial on `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.android.com/training/app-links/verify-site-associations.html\"\n      }}>{`verifying Android app links`}</a>{`. The resulting app link can be used to redirect to specific areas of your app if the app is installed or redirect to your app's website if the app isn't installed. For more information on Android app links, please read the guide on `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.android.com/training/app-links/index.html#add-app-links\"\n      }}>{`handling Android app links`}</a>{`.`}</p>\n    <Variant platform=\"ios-aep\" task=\"handling\" repeat=\"27\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"handling-alert-or-fullscreen-notification-website-urls-on-ios\"\n    }}>{`Handling alert or fullscreen notification website URLs on iOS`}</h4>\n    <p>{`Website URL's included in alert or fullscreen messages are handled without any additional action by the app developer. If an alert of fullscreen message is clicked through and contains a valid URL, the Safari browser will be used to load the URL contained in the notification payload. The location of the URL differs for each notification type:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`url`}</inlineCode>{` key is present in the alert message payload`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`url`}</inlineCode>{` is present in the query parameters of a fullscreen message button (`}<inlineCode parentName=\"li\">{`data-destination-url`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`adb_deeplink`}</inlineCode>{` key is present in the local notification payload`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`uri`}</inlineCode>{` key is present in the push notification payload`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"handling-local-notification-website-urls-on-ios\"\n    }}>{`Handling local notification website URLs on iOS`}</h4>\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <p>{`The website URL in the local notification response can be loaded using the UrlService's `}<inlineCode parentName=\"p\">{`openUrl`}</inlineCode>{` method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n    DispatchQueue.main.async(execute: {\n        let userInfo = response.notification.request.content.userInfo\n        let urlString = userInfo[\"adb_deeplink\"] as? String\n        if (urlString?.count ?? 0) != 0 {\n            if let url = URL(string: urlString ?? \"\") {\n              ServiceProvider.shared.urlService.openUrl(url)\n            }\n        }\n        completionHandler()\n    })\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <p>{`The website URL in the local notification response can be loaded using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/uikit/uiapplication/1648685-openurl?language=objc\"\n      }}>{`openURL:options:completionHandler:`}</a>{` instance method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objective-c\"\n      }}>{`-(void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler{\n    dispatch_async(dispatch_get_main_queue(), ^{\n      NSDictionary *userInfo = response.notification.request.content.userInfo;\n      NSString *urlString = userInfo[@\"adb_deeplink\"];\n      if(urlString.length){\n          [[UIApplication sharedApplication] openURL:[NSURL URLWithString: urlString] options:@{} completionHandler:^(BOOL success) {\n            NSLog(@\"Open %@: %d\",urlString,success);\n        }];\n            }\n        completionHandler();\n        });   \n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"handling-push-notification-website-urls-on-ios\"\n    }}>{`Handling push notification website URLs on iOS`}</h4>\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <p>{`The website URL in the push notification response can be loaded using the UrlService's `}<inlineCode parentName=\"p\">{`openUrl`}</inlineCode>{` method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n    DispatchQueue.main.async(execute: {\n        let urlString = userInfo[\"uri\"] as? String\n        if (urlString?.count ?? 0) != 0 {\n            if let url = URL(string: urlString ?? \"\") {\n                ServiceProvider.shared.urlService.openUrl(url)\n            }\n        }\n        completionHandler(UIBackgroundFetchResultNoData)\n    })\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <p>{`The website URL in the push notification can be loaded using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/uikit/uiapplication/1648685-openurl?language=objc\"\n      }}>{`openURL:options:completionHandler:`}</a>{` instance method.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objective-c\"\n      }}>{`- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo\nfetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler {\n    dispatch_async(dispatch_get_main_queue(), ^{\n      NSString *urlString = userInfo[@\"uri\"];\n      if(urlString.length){\n          [[UIApplication sharedApplication] openURL:[NSURL URLWithString: urlString] options:@{} completionHandler:^(BOOL success) {\n            NSLog(@\"Open %@: %d\",urlString,success);\n        }];\n            }\n        completionHandler(UIBackgroundFetchResultNoData);\n    });\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"handling-local-or-push-notification-deep-links-on-ios\"\n    }}>{`Handling local or push notification deep links on iOS`}</h4>\n    <p>{`When a local or push notification is clicked through, the `}<inlineCode parentName=\"p\">{`didReceiveNotificationResponse`}</inlineCode>{` instance method is called with the notification response being passed in as a parameter. For more information, see the Apple developer docs at `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/usernotifications/unusernotificationcenterdelegate/1649501-usernotificationcenter?language=objc\"\n      }}>{`userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:`}</a>{`.`}</p>\n    <p>{`The deep link URL can be retrieved from the response object passed into the handler method. An example for retrieving the deep link URL and loading web links is provided below. The retrieved URL can then be parsed to aid with app navigation decision making. For more information about handling deep links and setting URL schemes for iOS, see the tutorial on `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/xcode/defining-a-custom-url-scheme-for-your-app\"\n      }}>{`defining a custom URL scheme for your app`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n    DispatchQueue.main.async(execute: {\n        let userInfo = response.notification.request.content.userInfo\n        let urlString = userInfo[\"adb_deeplink\"] as? String\n        let urlString2 = userInfo[\"uri\"] as? String\n        if (urlString?.count ?? 0) != 0 {\n            // handle the local notification deep link (parse any data present in the deep link and/or redirect to a desired area within the app)\n        } else if (urlString2?.count ?? 0) != 0 {\n            // handle the push notification deep link (parse any data present in the deep link and/or redirect to a desired area within the app)\n        }\n        completionHandler()\n    })\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objective-c\"\n      }}>{`-(void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler{\n    dispatch_async(dispatch_get_main_queue(), ^{\n      NSDictionary *userInfo = response.notification.request.content.userInfo;\n      NSString *urlString = userInfo[@\"adb_deeplink\"];\n      NSString *urlString2 = userInfo[@\"uri\"];\n      if(urlString.length){\n            // handle the local notification deep link (parse any data present in the deep link and/or redirect to a desired area within the app)\n            }else if(urlString2.length){\n        // handle the push notification deep link (parse any data present in the deep link and/or redirect to a desired area within the app)\n      }\n        completionHandler();\n        });   \n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"handling-in-app-message-universal-links-on-ios\"\n    }}>{`Handling in-app message universal links on iOS`}</h4>\n    <p>{`Universal links are available for devices on iOS 9.0 or later. They can be used to redirect to specific areas of your app if the app is installed or redirect to your app's website if the app isn't installed. For more information, see the guide on `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/xcode/allowing-apps-and-websites-to-link-to-your-content\"\n      }}>{`allowing apps and websites to link to your content`}</a>{`.`}</p>\n    <p>{`Universal links are typically used from outside your installed app. For example, a universal link would be used from a link present on a website or a link included in an email message. iOS will `}<strong parentName=\"p\">{`not`}</strong>{` open a universal link if it determines that the link is being opened from within the app it links to. For more information on this limitation, see the \"Preparing Your App to Handle Universal Links\" section within the documentation on `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/library/archive/documentation/General/Conceptual/AppSearch/UniversalLinks.html#//apple_ref/doc/uid/TP40016308-CH12-SW2\"\n      }}>{`supporting universal links`}</a>{`. If a universal link is included as a Campaign clickthrough destination, the link must be handled by the app developer in a similar fashion as a deep link. More information can be seen in the `}<a parentName=\"p\" {...{\n        \"href\": \"#handling-alert-or-fullscreen-notification-deep-links-on-ios\"\n      }}>{`handling alert or fullscreen notification deep links on iOS`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#handling-local-or-push-notification-deep-links-on-ios\"\n      }}>{`handling local or push notification deep links on iOS`}</a>{` sections.`}</p>\n    <Variant platform=\"ios-acp\" task=\"handling\" repeat=\"31\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"handling-alert-or-fullscreen-notification-website-urls-on-ios-1\"\n    }}>{`Handling alert or fullscreen notification website URLs on iOS`}</h4>\n    <p>{`Website URL's included in alert or fullscreen messages are handled without any additional action by the app developer. If an alert of fullscreen message is clicked through and contains a valid URL, the Safari browser will be used to load the URL contained in the notification payload. The location of the URL differs for each notification type:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`url`}</inlineCode>{` key is present in the alert message payload`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`url`}</inlineCode>{` is present in the query parameters of a fullscreen message button (`}<inlineCode parentName=\"li\">{`data-destination-url`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`adb_deeplink`}</inlineCode>{` key is present in the local notification payload`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`uri`}</inlineCode>{` key is present in the push notification payload`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"handling-alert-or-fullscreen-notification-deep-links-on-ios\"\n    }}>{`Handling alert or fullscreen notification deep links on iOS`}</h4>\n    <p>{`When a deep link is opened in Safari, this does not allow the app to directly handle the link. To provide a better customer experience, the Experience Platform SDK provides a URL handler that you can use with alert or fullscreen notification deep links.`}</p>\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`ACPCore.registerURLHandler({ url in\n    print(\"Inside registerURLHandler callback, clickthrough url is: (url ?? \"\")\")\n    if url?.contains(\"campaigndemoapp://\") ?? false {\n        // handle the deep link (parse any data present in the deep link and/or redirect to a desired area within the app)\n       return true\n  }\n  // false is returned when the URL should be opened in Safari\n  return false\n})\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`[ACPCore registerURLHandler:^BOOL(NSString * _Nullable url) {\n    NSLog(@\"Inside registerURLHandler callback, clickthrough url is: %@\", url);\n  if([url containsString:@\"campaigndemoapp://\"]){\n    // handle the deep link (parse any data present in the deep link and/or redirect to a desired area within the app)\n    return true;\n  }\n  // false is returned when the URL should be opened in Safari\n  return false;\n}];\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"handling-local-notification-website-urls-on-ios-1\"\n    }}>{`Handling local notification website URLs on iOS`}</h4>\n    <p>{`The website URL in the local notification response can be loaded using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/uikit/uiapplication/1648685-openurl?language=objc\"\n      }}>{`openURL:options:completionHandler:`}</a>{` instance method.`}</p>\n    <h4 {...{\n      \"id\": \"swift-5\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n    DispatchQueue.main.async(execute: {\n        let userInfo = response.notification.request.content.userInfo\n        let urlString = userInfo[\"adb_deeplink\"] as? String\n        if (urlString?.count ?? 0) != 0 {\n            if let url = URL(string: urlString ?? \"\") {\n                UIApplication.shared.open(url, options: [:], completionHandler: { success in\n                    print(\"Open (urlString ?? \"\"): (success)\")\n                })\n            }\n        }\n        completionHandler()\n    })\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-5\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`-(void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler{\n    dispatch_async(dispatch_get_main_queue(), ^{\n      NSDictionary *userInfo = response.notification.request.content.userInfo;\n      NSString *urlString = userInfo[@\"adb_deeplink\"];\n      if(urlString.length){\n          [[UIApplication sharedApplication] openURL:[NSURL URLWithString: urlString] options:@{} completionHandler:^(BOOL success) {\n            NSLog(@\"Open %@: %d\",urlString,success);\n        }];\n            }\n        completionHandler();\n        });   \n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"handling-push-notification-website-urls-on-ios-1\"\n    }}>{`Handling push notification website URLs on iOS`}</h4>\n    <p>{`The website URL in the push notification can be loaded using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/uikit/uiapplication/1648685-openurl?language=objc\"\n      }}>{`openURL:options:completionHandler:`}</a>{` instance method.`}</p>\n    <h4 {...{\n      \"id\": \"swift-6\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n    DispatchQueue.main.async(execute: {\n        let urlString = userInfo[\"uri\"] as? String\n        if (urlString?.count ?? 0) != 0 {\n            if let url = URL(string: urlString ?? \"\") {\n                UIApplication.shared.open(url, options: [:], completionHandler: { success in\n                    print(\"Open (urlString ?? \"\"): (success)\")\n                })\n            }\n        }\n        completionHandler(UIBackgroundFetchResultNoData)\n    })\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-6\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo\nfetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler {\n    dispatch_async(dispatch_get_main_queue(), ^{\n      NSString *urlString = userInfo[@\"uri\"];\n      if(urlString.length){\n          [[UIApplication sharedApplication] openURL:[NSURL URLWithString: urlString] options:@{} completionHandler:^(BOOL success) {\n            NSLog(@\"Open %@: %d\",urlString,success);\n        }];\n            }\n        completionHandler(UIBackgroundFetchResultNoData);\n    });\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"handling-local-or-push-notification-deep-links-on-ios-1\"\n    }}>{`Handling local or push notification deep links on iOS`}</h4>\n    <p>{`When a local or push notification is clicked through, the `}<inlineCode parentName=\"p\">{`didReceiveNotificationResponse`}</inlineCode>{` instance method is called with the notification response being passed in as a parameter. For more information, see the Apple developer docs at `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/usernotifications/unusernotificationcenterdelegate/1649501-usernotificationcenter?language=objc\"\n      }}>{`userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:`}</a>{`.`}</p>\n    <p>{`The deep link URL can be retrieved from the response object passed into the handler method. An example for retrieving the deep link URL and loading web links is provided below. The retrieved URL can then be parsed to aid with app navigation decision making. For more information about handling deep links and setting URL schemes for iOS, see the tutorial on `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/xcode/defining-a-custom-url-scheme-for-your-app\"\n      }}>{`defining a custom URL scheme for your app`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n    DispatchQueue.main.async(execute: {\n        let userInfo = response.notification.request.content.userInfo\n        let urlString = userInfo[\"adb_deeplink\"] as? String\n        let urlString2 = userInfo[\"uri\"] as? String\n        if (urlString?.count ?? 0) != 0 {\n            // handle the local notification deep link (parse any data present in the deep link and/or redirect to a desired area within the app)\n        } else if (urlString2?.count ?? 0) != 0 {\n            // handle the push notification deep link (parse any data present in the deep link and/or redirect to a desired area within the app)\n        }\n        completionHandler()\n    })\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`-(void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler{\n    dispatch_async(dispatch_get_main_queue(), ^{\n      NSDictionary *userInfo = response.notification.request.content.userInfo;\n      NSString *urlString = userInfo[@\"adb_deeplink\"];\n      NSString *urlString2 = userInfo[@\"uri\"];\n      if(urlString.length){\n            // handle the local notification deep link (parse any data present in the deep link and/or redirect to a desired area within the app)\n            }else if(urlString2.length){\n        // handle the push notification deep link (parse any data present in the deep link and/or redirect to a desired area within the app)\n      }\n        completionHandler();\n        });   \n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"handling-in-app-message-universal-links-on-ios-1\"\n    }}>{`Handling in-app message universal links on iOS`}</h4>\n    <p>{`Universal links are available for devices on iOS 9.0 or later. They can be used to redirect to specific areas of your app if the app is installed or redirect to your app's website if the app isn't installed. For more information, see the guide on `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/xcode/allowing-apps-and-websites-to-link-to-your-content\"\n      }}>{`allowing apps and websites to link to your content`}</a>{`.`}</p>\n    <p>{`Universal links are typically used from outside your installed app. For example, a universal link would be used from a link present on a website or a link included in an email message. iOS will `}<strong parentName=\"p\">{`not`}</strong>{` open a universal link if it determines that the link is being opened from within the app it links to. For more information on this limitation, see the \"Preparing Your App to Handle Universal Links\" section within the documentation on `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/library/archive/documentation/General/Conceptual/AppSearch/UniversalLinks.html#//apple_ref/doc/uid/TP40016308-CH12-SW2\"\n      }}>{`supporting universal links`}</a>{`. If a universal link is included as a Campaign clickthrough destination, the link must be handled by the app developer in a similar fashion as a deep link. More information can be seen in the `}<a parentName=\"p\" {...{\n        \"href\": \"#handling-alert-or-fullscreen-notification-deep-links-on-ios\"\n      }}>{`handling alert or fullscreen notification deep links on iOS`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#handling-local-or-push-notification-deep-links-on-ios\"\n      }}>{`handling local or push notification deep links on iOS`}</a>{` sections.`}</p>\n    <Variant platform=\"android\" task=\"customize\" repeat=\"3\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-3\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`MobileCore.updateConfiguration(new HashMap<String, Object>() {\n  {\n    put(\"campaign.registrationDelay\", 30); // number of days to delay sending a registration request.\n    put(\"campaign.registrationPaused\", false); // boolean signaling if registration requests should be paused\n  }\n});\n`}</code></pre>\n    <Variant platform=\"ios-aep\" task=\"customize\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-7\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`var config = [AnyHashable: Any]()\nconfig[\"campaign.registrationDelay\"] = 30 // number of days to delay sending a registration request.\nconfig[\"campaign.registrationPaused\"] = false // boolean signaling if registration requests should be paused\nMobileCore.updateConfiguration(config)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-7\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objective-c\"\n      }}>{`NSMutableDictionary *config = [@{} mutableCopy];\nconfig[@\"campaign.registrationDelay\"] = @30; // number of days to delay sending a registration request.\nconfig[@\"campaign.registrationPaused\"] = [NSNumber numberWithBool:NO]; // boolean signaling if registration requests should be paused\n[AEPMobileCore updateConfiguration:config];\n`}</code></pre>\n    <Variant platform=\"ios-acp\" task=\"customize\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-8\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`var config = [AnyHashable: Any]()\nconfig[\"campaign.registrationDelay\"] = 30 // number of days to delay sending a registration request.\nconfig[\"campaign.registrationPaused\"] = false // boolean signaling if registration requests should be paused\nACPCore.updateConfiguration(config)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-8\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objective-c\"\n      }}>{`NSMutableDictionary *config = [@{} mutableCopy];\nconfig[@\"campaign.registrationDelay\"] = @30; // number of days to delay sending a registration request.\nconfig[@\"campaign.registrationPaused\"] = [NSNumber numberWithBool:NO]; // boolean signaling if registration requests should be paused\n[ACPCore updateConfiguration:config];\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Variant","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","platform","task","repeat","parentName","isMDXComponent"],"sourceRoot":""}