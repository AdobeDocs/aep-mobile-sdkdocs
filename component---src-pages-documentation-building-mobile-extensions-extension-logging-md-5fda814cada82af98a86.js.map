{"version":3,"file":"component---src-pages-documentation-building-mobile-extensions-extension-logging-md-5fda814cada82af98a86.js","mappings":"4OAQsBA,E,mFADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAIU,YAJF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EAClB,GAEMG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGP,GAAK,YAER,OAAO,SAACI,GAAS,UAAKD,EAAiBH,EAAK,CAAEO,WAAYA,EAAYC,QAAQ,eAI5E,eACE,GAAM,qBAAmB,sBAE3B,kLAAmK,uBAAYC,WAAW,KAAG,eAA6B,mEAC1N,oBACE,eAAIA,WAAW,MAAI,YACnB,eAAIA,WAAW,MAAI,UACnB,eAAIA,WAAW,MAAI,YACnB,eAAIA,WAAW,MAAI,YAErB,4RACA,6RACA,SAACV,EAAS,CAACW,YAAY,aAAaC,MAAM,mBAAmBC,OAAO,IAAIJ,QAAQ,eAChF,8BACA,SAAC,UAAI,CAACK,MAAM,gCAAgCL,QAAQ,UACpD,0BACA,SAAC,UAAI,CAACK,MAAM,4BAA4BL,QAAQ,UAChD,eACE,GAAM,0BAAwB,2BAEhC,qDAAsC,cAAGC,WAAW,IAChD,KAAQ,uCAAqC,oCACJ,KAGjD,CAEAH,EAAWQ,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/documentation/building-mobile-extensions/extension-logging.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Tabs from './tabs/extension-logging.md';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst TabsBlock = makeShortcode(\"TabsBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"extension-logging\"\n    }}>{`Extension logging`}</h1>\n    <p>{`It is recommended that you use the Experience Platform SDK logging API to print a message from the extension code. The Experience Platform SDKs provide the `}<inlineCode parentName=\"p\">{`setLogLevel`}</inlineCode>{` API, which is used to set one of the following logging modes:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`VERBOSE`}</li>\n      <li parentName=\"ul\">{`DEBUG`}</li>\n      <li parentName=\"ul\">{`WARNING`}</li>\n      <li parentName=\"ul\">{`ERROR `}</li>\n    </ul>\n    <p>{`If the current logging mode is less than verbose, the message is not printed by the Experience Platform SDKs. When debugging and testing your extension, you can set the logging mode to verbose to see all the messages flowing through the Experience Platform SDK.`}</p>\n    <p>{`The Experience Platform SDK uses the extension name as the log tag for the Adobe extensions, so that the application developer can filter the logs for a mobile extension. A similar approach can be implemented by a partner extension as seen in the examples below:`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&task=logging\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&task=logging\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"additional-information\"\n    }}>{`Additional information`}</h2>\n    <p>{`To learn more, please read the `}<a parentName=\"p\" {...{\n        \"href\": \"../mobile-core/api-reference.md#log\"\n      }}>{`Mobile SDK logging documentation`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","TabsBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","orientation","slots","repeat","query","isMDXComponent"],"sourceRoot":""}