{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-content-card-ui-i-os-ui-elements-aepbutton-md-e73043b5050e962b55bc.js","mappings":"mTAMaA,EAAe,CAAC,EACvBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EAClB,CAAC,EACKG,EAAcL,EAAc,eAC5BM,EAAYN,EAAc,aAC1BO,EAAc,CAClBR,aAAAA,GAEIS,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGT,GAAK,YAER,OAAO,SAACM,GAAS,UAAKD,EAAiBL,EAAK,CAAES,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,aAAW,cAEnB,8HACA,4GACA,4CAA6B,uBAAYC,WAAW,KAAG,oBAAkC,0DACzF,eACE,GAAM,qBAAmB,sBAE3B,uBACE,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MAAI,aAEf,eAAIA,WAAW,KACb,MAAS,MAAI,SAEf,eAAIA,WAAW,KACb,MAAS,MAAI,kBAInB,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MAAI,SAEf,eAAIA,WAAW,KACb,MAAS,OACR,cAAGA,WAAW,KACb,KAAQ,cAAY,aAExB,eAAIA,WAAW,KACb,MAAS,MAAI,qDAGjB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MAAI,aAEf,eAAIA,WAAW,KACb,MAAS,OACR,uBAAYA,WAAW,MAAI,qBAC9B,eAAIA,WAAW,KACb,MAAS,MAAI,6FAKrB,SAACR,EAAW,CAACS,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,qDAAsC,cAAGC,WAAW,IAChD,KAAQ,+DAA6D,cAClD,kDACvB,eACE,GAAM,iBAAe,kBAEvB,4CAA6B,uBAAYA,WAAW,KAAG,aAA2B,wFAClF,SAACP,EAAS,CAACS,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,QAAQL,QAAQ,eACtE,eACE,GAAM,SAAO,UAEf,qBAAK,iBAAMC,WAAW,MAClB,UAAa,kBAAgB,mlBAqBrC,CAEAH,EAAWQ,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/content-card-ui/iOS/ui-elements/aepbutton.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"aepbutton\"\n    }}>{`AEPButton`}</h1>\n    <p>{`The AEPButton class is a fundamental UI component used to create interactive buttons for content cards.`}</p>\n    <p>{`Customization of the button's properties can be achieved with a custom view modifier.`}</p>\n    <p>{`AEPButton conforms to `}<inlineCode parentName=\"p\">{`ObservableObject`}</inlineCode>{`, allowing it to be used reactively in SwiftUI views.`}</p>\n    <h2 {...{\n      \"id\": \"public-properties\"\n    }}>{`Public Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`text`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"aeptext.md\"\n            }}>{`AEPText`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The text model representing the button's label.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`modifier`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`AEPViewModifier`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`A custom view modifier that can be applied to the button view for additional styling.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`All properties are marked with `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/combine/published\"\n      }}>{`@Published`}</a>{`. Any changes will trigger updates to the UI.`}</p>\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p>{`You can customize the `}<inlineCode parentName=\"p\">{`AEPButton`}</inlineCode>{` properties when working with a template that includes a button. Here's an example:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Swift\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class MyCustomizer: ContentCardCustomizing {\n    func customize(template: SmallImageTemplate) {\n        // Customize the button element\n        template.buttons?.first?.text.font = .headline\n        template.buttons?.first?.text.textColor = .white\n        template.buttons?.first?.modifier = AEPViewModifier(MyButtonModifier())\n    }\n    \n    struct MyButtonModifier: ViewModifier {\n        func body(content: Content) -> some View {\n            content\n                .padding()\n                .background(Color.blue)\n                .cornerRadius(10)\n        }\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","InlineAlert","CodeBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}