{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-content-card-ui-i-os-tutorial-customizing-content-card-templates-md-070bfd9f7de479fcb921.js","mappings":"2OAOsBA,E,wEADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAIU,YAJF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EAClB,GAEMG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGP,GAAK,YAER,OAAO,SAACI,GAAS,UAAKD,EAAiBH,EAAK,CAAEO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,sCAAoC,uCAE5C,0GACA,eACE,GAAM,YAAU,aAElB,uKAAwJ,cAAGC,WAAW,IAClK,KAAQ,+CAA6C,0BACtB,eACnC,eACE,GAAM,uCAAqC,wCAE7C,uFACA,oBACE,eAAIA,WAAW,MAAI,4EACnB,eAAIA,WAAW,MAAI,2EAErB,4DAA6C,uBAAYA,WAAW,KAAG,0BAAwC,2BAA2B,uBAAYA,WAAW,KAAG,0BAAwC,2BAA2B,uBAAYA,WAAW,KAAG,0BAAwC,iCAAiC,uBAAYA,WAAW,KAAG,sBAAoC,4BACxY,SAACV,EAAS,CAACW,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,QAAQJ,QAAQ,eACtE,eACE,GAAM,SAAO,UAEf,qBAAK,iBAAMC,WAAW,MAClB,UAAa,kBAAgB,m3CAwCjC,eACE,GAAM,2BAAyB,4BAEjC,4GAA6F,uBAAYA,WAAW,KAAG,qBAAmC,2HAC1J,SAACV,EAAS,CAACW,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,QAAQJ,QAAQ,eACtE,eACE,GAAM,WAAS,UAEjB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,kBAAgB,wQAQjC,yQACA,SAACV,EAAS,CAACW,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,QAAQJ,QAAQ,eACtE,eACE,GAAM,WAAS,UAEjB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,kBAAgB,ugBAiBrC,CAEAH,EAAWO,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/content-card-ui/iOS/tutorial/customizing-content-card-templates.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"customizing-content-card-templates\"\n    }}>{`Customizing Content Card Templates`}</h1>\n    <p>{`This tutorial explains how to customize the UI of content card in your application.`}</p>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`Messaging extension provides a way to customize content cards based on the template type. You can customize the content card templates using the `}<a parentName=\"p\" {...{\n        \"href\": \"../public-classes/contentcardcustomizing.md\"\n      }}>{`ContentCardCustomizing`}</a>{` protocol.`}</p>\n    <h2 {...{\n      \"id\": \"implementing-contentcardcustomizing\"\n    }}>{`Implementing ContentCardCustomizing`}</h2>\n    <p>{`Perform the following steps to customize content card templates:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Conform to the ContentCardCustomizing protocol in your class or struct.`}</li>\n      <li parentName=\"ol\">{`Implement the desired methods of the ContentCardCustomizing protocol.`}</li>\n    </ol>\n    <p>{`Below is an example implementation of `}<inlineCode parentName=\"p\">{`ContentCardCustomizing`}</inlineCode>{`. In this example, the `}<inlineCode parentName=\"p\">{`HomePageCardCustomizer`}</inlineCode>{` class conforms to the `}<inlineCode parentName=\"p\">{`ContentCardCustomizing`}</inlineCode>{` protocol and customizes the `}<inlineCode parentName=\"p\">{`SmallImageTemplate`}</inlineCode>{` content card template:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Swift\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class HomePageCardCustomizer: ContentCardCustomizing {\n    \n    func customize(template: SmallImageTemplate) {\n        // customize UI elements\n        template.title.textColor = .primary\n        template.title.font = .subheadline\n        template.body?.textColor = .secondary\n        template.buttons?.first?.text.font = .system(size: 13)\n        \n        // customize stack structure\n        template.rootHStack.spacing = 15\n        template.textVStack.alignment = .leading\n        template.textVStack.spacing = 10\n        \n        // add custom modifiers\n        template.buttonHStack.modifier = AEPViewModifier(ButtonHStackModifier())\n        template.rootHStack.modifier = AEPViewModifier(RootHStackModifier())\n        \n        // customize the dismiss buttons\n        template.dismissButton?.image.iconColor = .primary\n        template.dismissButton?.image.iconFont = .system(size: 10)\n    }\n    \n    struct RootHStackModifier : ViewModifier {\n        func body(content: Content) -> some View {\n             content\n                .frame(maxWidth: .infinity, alignment: .leading)\n                .padding(.trailing)\n         }\n    }\n    \n    struct ButtonHStackModifier : ViewModifier {\n        func body(content: Content) -> some View {\n             content\n                .frame(maxWidth: .infinity, alignment: .trailing)\n         }\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"applying-customizations\"\n    }}>{`Applying Customizations`}</h2>\n    <p>{`To apply the customizations to the content card templates, pass the customizer to the `}<inlineCode parentName=\"p\">{`getContentCardsUI`}</inlineCode>{` API. The customizer will be called for each content card template type that is recognized by the Messaging extension.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Swift\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let homePageSurface = Surface(path: \"homepage\")\nlet homePageCardCustomizer = HomePageCardCustomizer()\nMessaging.getContentCardsUI(for: homePageSurface,\n                             customizer: homePageCardCustomizer) { result in\n    // handle result\n}\n`}</code></pre>\n    <p>{`Customize the content card templates for different surfaces by creating a customizer for each surface. For example, the following code snippet customizes the content card templates for the \"homepage\" and \"detailpage\" content cards separately:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Swift\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"swift-2\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let homePageSurface = Surface(path: \"homepage\")\nlet homePageCustomizer = HomePageCardCustomizer()\nMessaging.getContentCardsUI(for: homePageSurface,\n                             customizer: homePageCustomizer) { result in\n    // handle result\n}\n\nlet detailPageSurface = Surface(path: \"detailpage\")\nlet detailPageCustomizer = DetailPageCardCustomizer()\nMessaging.getContentCardsUI(for: detailPageSurface,\n                             customizer: detailPageCustomizer) { result in\n    // handle result\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","CodeBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}