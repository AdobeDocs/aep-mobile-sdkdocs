{"version":3,"file":"56f510882182b2c39379b5cbec331d9118402254-5ec5eb0a93862f684e88.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer-decisioning/tabs/api-reference.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" api=\"clear-propositions\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <h4 {...{\n      \"id\": \"syntax\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void clearCachedPropositions()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Optimize.clearCachedPropositions();\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"clear-propositions\" repeat=\"10\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <h4 {...{\n      \"id\": \"syntax-1\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func clearCachedPropositions()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"example-1\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`Optimize.clearCachedPropositions()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c\"\n    }}>{`Objective-C`}</h4>\n    <h4 {...{\n      \"id\": \"syntax-2\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`+ (void) clearCachedPropositions;\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"example-2\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`[AEPMobileOptimize clearCachedPropositions];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"extension-version\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <h4 {...{\n      \"id\": \"syntax-3\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static String extensionVersion()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"example-3\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Optimize.extensionVersion();\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"extension-version\" repeat=\"10\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <h4 {...{\n      \"id\": \"syntax-4\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static var extensionVersion: String\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"example-4\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let extensionVersion = Optimize.extensionVersion\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-1\"\n    }}>{`Objective-C`}</h4>\n    <h4 {...{\n      \"id\": \"syntax-5\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`+ (nonnull NSString*) extensionVersion;\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"example-5\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`NSString *extensionVersion = [AEPMobileOptimize extensionVersion];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"get-propositions\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-2\"\n    }}>{`Java`}</h4>\n    <h4 {...{\n      \"id\": \"syntax-6\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void getPropositions(final List<DecisionScope> decisionScopes, final AdobeCallback<Map<DecisionScope, OptimizeProposition>> callback)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`decisionScopes`}</em>{` is a list of decision scopes for which propositions are requested.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`callback`}</em>{` `}<inlineCode parentName=\"li\">{`call`}</inlineCode>{` method is invoked with propositions map of type `}<inlineCode parentName=\"li\">{`Map<DecisionScope, OptimizeProposition>`}</inlineCode>{`. If the callback is an instance of `}<a parentName=\"li\" {...{\n          \"href\": \"../../home/base/mobile-core/api-reference.md#adobecallbackwitherror\"\n        }}>{`AdobeCallbackWithError`}</a>{`, and if the operation times out or an error occurs in retrieving propositions, the `}<inlineCode parentName=\"li\">{`fail`}</inlineCode>{` method is invoked with the appropriate `}<a parentName=\"li\" {...{\n          \"href\": \"../../home/base/mobile-core/api-reference.md#adobeerror\"\n        }}>{`AdobeError`}</a>{`.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"example-6\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`final DecisionScope decisionScope1 = DecisionScope(\"xcore:offer-activity:1111111111111111\", \"xcore:offer-placement:1111111111111111\", 2);\nfinal DecisionScope decisionScope2 = new DecisionScope(\"myScope\");\n\nfinal List<DecisionScope> decisionScopes = new ArrayList<>();\ndecisionScopes.add(decisionScope1);\ndecisionScopes.add(decisionScope2);\n\nOptimize.getPropositions(scopes, new AdobeCallbackWithError<Map<DecisionScope, OptimizeProposition>>() {\n    @Override\n    public void fail(final AdobeError adobeError) {\n        // handle error\n    }\n\n    @Override\n    public void call(Map<DecisionScope, OptimizeProposition> propositionsMap) {\n        if (propositionsMap != null && !propositionsMap.isEmpty()) {\n            // get the propositions for the given decision scopes\n            if (propositionsMap.contains(decisionScope1)) {\n                final OptimizeProposition proposition1 = propsMap.get(decisionScope1)\n                // read proposition1 offers\n            }\n            if (propositionsMap.contains(decisionScope2)) {\n                final OptimizeProposition proposition2 = propsMap.get(decisionScope2)\n                // read proposition2 offers\n            }\n        }\n    }\n});\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"get-propositions\" repeat=\"12\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-2\"\n    }}>{`Swift`}</h4>\n    <h4 {...{\n      \"id\": \"syntax-7\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func getPropositions(for decisionScopes: [DecisionScope], \n                            _ completion: @escaping ([DecisionScope: OptimizeProposition]?, Error?) -> Void)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`decisionScopes`}</em>{` is an array of decision scopes for which propositions are requested.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`completion`}</em>{` is invoked with propositions dictionary of type `}<inlineCode parentName=\"li\">{`[DecisionScope: OptimizeProposition]`}</inlineCode>{`. An `}<inlineCode parentName=\"li\">{`Error`}</inlineCode>{` is returned if SDK fails to retrieve the propositions.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"example-7\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let decisionScope1 = DecisionScope(activityId: \"xcore:offer-activity:1111111111111111\", \n                                   placementId: \"xcore:offer-placement:1111111111111111\" \n                                   itemCount: 2)\nlet decisionScope2 = DecisionScope(name: \"myScope\")\n\nOptimize.getPropositions(for: [decisionScope1, decisionScope2]) { propositionsDict, error in\n\n    if let error = error {\n        // handle error\n        return\n    }\n\n    if let propositionsDict = propositionsDict {\n        // get the propositions for the given decision scopes\n\n        if let proposition1 = propositionsDict[decisionScope1] {\n            // read proposition1 offers\n        }\n\n        if let proposition2 = propositionsDict[decisionScope2] {\n            // read proposition2 offers\n        }\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-2\"\n    }}>{`Objective-C`}</h4>\n    <h4 {...{\n      \"id\": \"syntax-8\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`+ (void) getPropositions: (NSArray<AEPDecisionScope*>* _Nonnull) decisionScopes \n              completion: (void (^ _Nonnull)(NSDictionary<AEPDecisionScope*, AEPOptimizeProposition*>* _Nullable propositionsDict, NSError* _Nullable error)) completion;\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`decisionScopes`}</em>{` is an array of decision scopes for which propositions are requested.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`completion`}</em>{` is invoked with propositions dictionary of type `}<inlineCode parentName=\"li\">{`NSDictionary<AEPDecisionScope*, AEPOptimizeProposition*>`}</inlineCode>{`. An `}<inlineCode parentName=\"li\">{`NSError`}</inlineCode>{` is returned if SDK fails to retrieve the propositions.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"example-8\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`AEPDecisionScope* decisionScope1 = [[AEPDecisionScope alloc] initWithActivityId: @\"xcore:offer-activity:1111111111111111\" \n                                                                   placementId: @\"xcore:offer-placement:1111111111111111\" \n                                                                     itemCount: 2];\nAEPDecisionScope* decisionScope2 = [[AEPDecisionScope alloc] initWithName: @\"myScope\"];\n\n[AEPMobileOptimize getPropositions: @[decisionScope1, decisionScope2] \n                        completion: ^(NSDictionary<AEPDecisionScope*, AEPOptimizeProposition*>* propositionsDict, NSError* error) {\n  if (error != nil) {\n    // handle error   \n    return;\n  }\n\n  AEPOptimizeProposition* proposition1 = propositionsDict[decisionScope1];\n  // read proposition1 offers\n\n  AEPOptimizeProposition* proposition2 = propositionsDict[decisionScope2];\n  // read proposition2 offers\n}];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"on-propositions-update\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-3\"\n    }}>{`Java`}</h4>\n    <h4 {...{\n      \"id\": \"syntax-9\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void onPropositionsUpdate(final AdobeCallback<Map<DecisionScope, OptimizeProposition>> callback)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`callback`}</em>{` `}<inlineCode parentName=\"li\">{`call`}</inlineCode>{` method is invoked with propositions map of type `}<inlineCode parentName=\"li\">{`Map<DecisionScope, OptimizeProposition>`}</inlineCode>{`. If the callback is an instance of `}<inlineCode parentName=\"li\">{`AdobeCallbackWithError`}</inlineCode>{`, and if the operation times out or an error occurs in retrieving propositions, the `}<inlineCode parentName=\"li\">{`fail`}</inlineCode>{` method is invoked with the appropriate `}<inlineCode parentName=\"li\">{`AdobeError`}</inlineCode>{`.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"example-9\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Optimize.onPropositionsUpdate(new AdobeCallbackWithError<Map<DecisionScope, OptimizeProposition>>() {\n    @Override\n    public void fail(final AdobeError adobeError) {\n        // handle error\n    }\n\n    @Override\n    public void call(final Map<DecisionScope, OptimizeProposition> propositionsMap) {\n        if (propositionsMap != null && !propositionsMap.isEmpty()) {\n            // handle propositions\n        }\n    }\n});\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"on-propositions-update\" repeat=\"12\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-3\"\n    }}>{`Swift`}</h4>\n    <h4 {...{\n      \"id\": \"syntax-10\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func onPropositionsUpdate(perform action: @escaping ([DecisionScope: OptimizeProposition]?) -> Void)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`action`}</em>{` is invoked with propositions dictionary of type `}<inlineCode parentName=\"li\">{`[DecisionScope: OptimizeProposition]`}</inlineCode>{`.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"example-10\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`Optimize.onPropositionsUpdate { propositionsDict in\n  if let propositionsDict = propositionsDict {\n    // handle propositions\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-3\"\n    }}>{`Objective-C`}</h4>\n    <h4 {...{\n      \"id\": \"syntax-11\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`+ (void) onPropositionsUpdate: (void (^ _Nonnull)(NSDictionary<AEPDecisionScope*, AEPOptimizeProposition*>* _Nullable)) action;\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`action`}</em>{` is invoked with propositions dictionary of type `}<inlineCode parentName=\"li\">{`NSDictionary<AEPDecisionScope*, AEPOptimizeProposition*>`}</inlineCode>{`.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"example-11\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`[AEPMobileOptimize onPropositionsUpdate: ^(NSDictionary<AEPDecisionScope*, AEPOptimizeProposition*>* propositionsDict) {\n  // handle propositions\n}];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"register-extension\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-4\"\n    }}>{`Java`}</h4>\n    <h4 {...{\n      \"id\": \"syntax-12\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void registerExtension()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"example-12\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Optimize.registerExtension();\n`}</code></pre>\n    <Variant platform=\"android\" api=\"update-propositions\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-5\"\n    }}>{`Java`}</h4>\n    <h4 {...{\n      \"id\": \"syntax-13\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void updatePropositions(final List<DecisionScope> decisionScopes, final Map<String, Object> xdm, final Map<String, Object> data)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`decisionScopes`}</em>{` is a list of decision scopes for which propositions need updating.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`xdm`}</em>{` is a map containing additional xdm formatted data to be attached to the Experience Event.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`data`}</em>{` is a map containing additional freeform data to be attached to the Experience Event.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"example-13\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`final DecisionScope decisionScope1 = DecisionScope(\"xcore:offer-activity:1111111111111111\", \"xcore:offer-placement:1111111111111111\", 2);\nfinal DecisionScope decisionScope2 = new DecisionScope(\"myScope\");\n\nfinal List<DecisionScope> decisionScopes = new ArrayList<>();\ndecisionScopes.add(decisionScope1);\ndecisionScopes.add(decisionScope2);\n\nOptimize.updatePropositions(decisionScopes, \n                            new HashMap<String, Object>() {\n                                {\n                                    put(\"xdmKey\", \"xdmValue\");\n                                }\n                            },\n                            new HashMap<String, Object>() {\n                                {\n                                    put(\"dataKey\", \"dataValue\");\n                                }\n                            });\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"update-propositions\" repeat=\"12\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-4\"\n    }}>{`Swift`}</h4>\n    <h4 {...{\n      \"id\": \"syntax-14\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func updatePropositions(for decisionScopes: [DecisionScope], \n                               withXdm xdm: [String: Any]?,\n                               andData data: [String: Any]? = nil)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`decisionScopes`}</em>{` is an array of decision scopes for which propositions need updating.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`xdm`}</em>{` is a dictionary containing additional xdm formatted data to be attached to the Experience Event.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`data`}</em>{` is a dictionary containing additional freeform data to be attached to the Experience Event.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"example-14\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let decisionScope1 = DecisionScope(activityId: \"xcore:offer-activity:1111111111111111\", \n                                   placementId: \"xcore:offer-placement:1111111111111111\" \n                                   itemCount: 2)\nlet decisionScope2 = DecisionScope(name: \"myScope\")\n\nOptimize.updatePropositions(for: [decisionScope1, decisionScope2] \n                            withXdm: [\"xdmKey\": \"xdmValue\"] \n                            andData: [\"dataKey\": \"dataValue\"])\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-4\"\n    }}>{`Objective-C`}</h4>\n    <h4 {...{\n      \"id\": \"syntax-15\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`+ (void) updatePropositions: (NSArray<AEPDecisionScope*>* _Nonnull) decisionScopes \n                    withXdm: (NSDictionary<NSString*, id>* _Nullable) xdm\n                    andData: (NSDictionary<NSString*, id>* _Nullable) data;\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`decisionScopes`}</em>{` is an array of decision scopes for which propositions need updating.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`xdm`}</em>{` is a dictionary containing additional xdm formatted data to be attached to the Experience Event.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`data`}</em>{` is a dictionary containing additional freeform data to be attached to the Experience Event.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"example-15\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`AEPDecisionScope* decisionScope1 = [[AEPDecisionScope alloc] initWithActivityId: @\"xcore:offer-activity:1111111111111111\" \n                                                                   placementId: @\"xcore:offer-placement:1111111111111111\" \n                                                                     itemCount: 2];\nAEPDecisionScope* decisionScope2 = [[AEPDecisionScope alloc] initWithName: @\"myScope\"]; \n\n[AEPMobileOptimize updatePropositions: @[decisionScope1, decisionScope2] \n                              withXdm: @{@\"xdmKey\": @\"xdmValue\"} \n                              andData: @{@\"dataKey\": @\"dataValue\"}];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"decisionscope\" repeat=\"2\" mdxType=\"Variant\" />\n    <h5 {...{\n      \"id\": \"java-6\"\n    }}>{`Java`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`/**\n * {@code DecisionScope} class represents a scope used to fetch personalized offers from the Experience Edge network.\n */\npublic class DecisionScope {\n\n    /**\n     * Constructor creates a {@code DecisionScope} using the provided {@code name}.\n     *\n     * @param name {@link String} containing scope name.\n     */\n    public DecisionScope(final String name) {...}\n    /**\n     * Constructor creates a {@code DecisionScope} using the provided {@code activityId} and {@code placementId}.\n     *\n     * This constructor assumes the item count for the given scope to be {@value #DEFAULT_ITEM_COUNT}.\n     *\n     * @param activityId {@link String} containing activity identifier for the given scope.\n     * @param placementId {@code String} containing placement identifier for the given scope.\n     */\n    public DecisionScope(final String activityId, final String placementId) {...}\n\n    /**\n     * Constructor creates a {@code DecisionScope} using the provided {@code activityId} and {@code placementId}.\n     *\n     * @param activityId {@link String} containing activity identifier for the given scope.\n     * @param placementId {@code String} containing placement identifier for the given scope.\n     * @param itemCount {@code String} containing number of items to be returned for the given scope.\n     */\n    public DecisionScope(final String activityId, final String placementId, final int itemCount) {...}\n\n    /**\n     * Gets the name for this scope.\n     *\n     * @return {@link String} containing the scope name.\n     */\n    public String getName() {...}\n}\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"decisionscope\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-5\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`/// \\`DecisionScope\\` class is used to create decision scopes for personalization query requests to Experience Edge Network.\n@objc(AEPDecisionScope)\npublic class DecisionScope: NSObject, Codable {\n    /// Decision scope name\n    @objc public let name: String\n\n    /// Creates a new decision scope using the given scope \\`name\\`.\n    ///\n    /// - Parameter name: string representation for the decision scope.\n    @objc\n    public init(name: String) {...}\n\n    /// Creates a new decision scope using the given \\`activityId\\`, \\`placementId\\` and \\`itemCount\\`.\n    ///\n    /// This initializer creates a scope name by Base64 encoding the JSON string created using the provided data.\n    ///\n    /// If \\`itemCount\\` == 1, JSON string is\n    ///\n    ///     {\"activityId\":#activityId,\"placementId\":#placementId}\n    /// otherwise,\n    ///\n    ///     {\"activityId\":#activityId,\"placementId\":#placementId,\"itemCount\":#itemCount}\n    /// - Parameters:\n    ///   - activityId: unique activity identifier for the decisioning activity.\n    ///   - placementId: unique placement identifier for the decisioning activity offer.\n    ///   - itemCount: number of offers to be returned from the server.\n    @objc\n    public convenience init(activityId: String, placementId: String, itemCount: UInt = 1) {...}\n}\n`}</code></pre>\n    <Variant platform=\"android\" api=\"proposition\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-7\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class OptimizeProposition {\n\n    /**\n     * Constructor creates a {@code OptimizeProposition} using the provided propostion {@code id}, {@code offers}, {@code scope} and {@code scopeDetails}.\n     *\n     * @param id {@link String} containing proposition identifier.\n     * @param offers {@code List<Offer>} containing proposition items.\n     * @param scope {@code String} containing encoded scope.\n     * @param scopeDetails {@code Map<String, Object>} containing scope details.\n     */\n    OptimizeProposition(final String id, final List<Offer> offers, final String scope, final Map<String, Object> scopeDetails) {...}\n\n    /**\n     * Gets the {@code OptimizeProposition} identifier.\n     *\n     * @return {@link String} containing the {@link OptimizeProposition} identifier.\n     */\n    public String getId() {...}\n\n     /**\n     * Gets the {@code OptimizeProposition} items.\n     *\n     * @return {@code List<Offer>} containing the {@link OptimizeProposition} items.\n     */\n    public List<Offer> getOffers() {...}\n\n    /**\n     * Gets the {@code OptimizeProposition} scope.\n     *\n     * @return {@link String} containing the encoded {@link OptimizeProposition} scope.\n     */\n    public String getScope() {...}\n\n    /**\n     * Gets the {@code OptimizeProposition} scope details.\n     *\n     * @return {@code Map<String, Object>} containing the {@link OptimizeProposition} scope details.\n     */\n    public Map<String, Object> getScopeDetails() {...}\n\n    /**\n     * Generates a map containing XDM formatted data for {@code Experience Event - OptimizeProposition Reference} field group from this {@code OptimizeProposition}.\n     *\n     * The returned XDM data does not contain {@code eventType} for the Experience Event.\n     *\n     * @return {@code Map<String, Object>} containing the XDM data for the OptimizeProposition reference.\n     */\n    public Map<String, Object> generateReferenceXdm() {...}\n}\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"proposition\" repeat=\"4\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-6\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`/// \\`OptimizeProposition\\` class\n@objc(AEPOptimizeProposition)\npublic class OptimizeProposition: NSObject, Codable {\n\n    /// Unique proposition identifier\n    @objc public let id: String\n\n    /// Array containing proposition decision options\n    @objc public lazy var offers: [Offer] = {...}()\n\n    /// Decision scope string\n    @objc public let scope: String\n\n    /// Scope details dictionary\n    @objc public var scopeDetails: [String: Any]\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`OptimizeProposition`}</inlineCode>{` class extension provides a method for generating XDM data for Proposition Reference field group which can be used for proposition tracking.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`/// \\`OptimizeProposition\\` extension\n@objc\npublic extension OptimizeProposition {\n    /// Creates a dictionary containing XDM formatted data for \\`Experience Event - Proposition Reference\\` field group from the given proposition.\n    ///\n    /// The Edge \\`sendEvent(experienceEvent:_:)\\` API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, or override dataset identifier.\n    ///\n    /// - Note: The returned XDM data does not contain an \\`eventType\\` for the Experience Event.\n    /// - Returns A dictionary containing XDM data for the proposition reference.\n    func generateReferenceXdm() -> [String: Any] {...}\n}\n`}</code></pre>\n    <Variant platform=\"android\" api=\"offer\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-8\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class Offer {\n\n    /**\n     * {@code Offer} Builder.\n     */\n    public static class Builder {\n        \n        /**\n        * Builder constructor with required {@code Offer} attributes as parameters.\n        *\n        * It sets default values for remaining {@link Offer} attributes.\n        *\n        * @param id required {@link String} containing {@code Offer} identifier.\n        * @param type required {@link OfferType} indicating the {@code Offer} type.\n        * @param content required {@code String} containing the {@code Offer} content.\n        */\n        public Builder(final String id, final OfferType type, final String content) {...}\n\n        /**\n        * Sets the etag for this {@code Offer}.\n        *\n        * @param etag {@link String} containing {@link Offer} etag.\n        * @return this Offer {@link Builder}\n        * @throws UnsupportedOperationException if this method is invoked after {@link Builder#build()}.\n        */\n        public Builder setEtag(final String etag) {...}\n\n        /**\n         * Sets the score for this {@code Offer}.\n         *\n         * @param score {@code int} containing {@link Offer} score.\n         * @return this Offer {@link Builder}\n         * @throws UnsupportedOperationException if this method is invoked after {@link Builder#build()}.\n         */\n        public Builder setScore(final int score) {...}\n\n        /**\n        * Sets the schema for this {@code Offer}.\n        *\n        * @param schema {@link String} containing {@link Offer} schema.\n        * @return this Offer {@link Builder}\n        * @throws UnsupportedOperationException if this method is invoked after {@link Builder#build()}.\n        */\n        public Builder setSchema(final String schema) {...} \n\n        /**\n         * Sets the metadata for this {@code Offer}.\n         *\n         * @param meta {@code Map<String, Object>} containing {@link Offer} metadata.\n         * @return this Offer {@link Builder}\n         * @throws UnsupportedOperationException if this method is invoked after {@link Builder#build()}.\n         */\n        public Builder setMeta(final Map<String, Object> meta) {...}\n\n        /**\n        * Sets the language for this {@code Offer}.\n        *\n        * @param language {@code List<String>} containing supported {@link Offer} language.\n        * @return this Offer {@link Builder}\n        * @throws UnsupportedOperationException if this method is invoked after {@link Builder#build()}.\n        */\n        public Builder setLanguage(final List<String> language) {...}\n\n        /**\n        * Sets the characteristics for this {@code Offer}.\n        *\n        * @param characteristics {@code Map<String, String>} containing {@link Offer} characteristics.\n        * @return this Offer {@link Builder}\n        * @throws UnsupportedOperationException if this method is invoked after {@link Builder#build()}.\n        */\n        public Builder setCharacteristics(final Map<String, String> characteristics) {...}\n\n        /**\n        * Builds and returns the {@code Offer} object.\n        *\n        * @return {@link Offer} object or null.\n        * @throws UnsupportedOperationException if this method is invoked after {@link Builder#build()}.\n        */\n        public Offer build() {...}\n    }\n\n    /**\n     * Gets the {@code Offer} identifier.\n     *\n     * @return {@link String} containing the {@link Offer} identifier.\n     */\n    public String getId() {...}\n\n    /**\n     * Gets the {@code Offer} etag.\n     *\n     * @return {@link String} containing the {@link Offer} etag.\n     */\n    public String getEtag() {...}\n\n    /**\n     * Gets the {@code Offer} score.\n     *\n     * @return {@code int} containing the {@link Offer} score.\n     */\n    public int getScore() {...}\n\n    /**\n     * Gets the {@code Offer} schema.\n     *\n     * @return {@link String} containing the {@link Offer} schema.\n     */\n    public String getSchema() {...}\n\n    /**\n     * Gets the {@code Offer} metadata.\n     *\n     * @return {@code Map<String, Object>} containing the {@link Offer} metadata.\n     */\n    public Map<String, Object> getMeta() {...}\n\n    /**\n     * Gets the {@code Offer} type.\n     *\n     * @return {@link OfferType} indicating the {@link Offer} type.\n     */\n    public OfferType getType() {...}\n\n    /**\n     * Gets the {@code Offer} language.\n     *\n     * @return {@code List<String>} containing the supported {@link Offer} language.\n     */\n    public List<String> getLanguage() {...}\n\n    /**\n     * Gets the {@code Offer} content.\n     *\n     * @return {@link String} containing the {@link Offer} content.\n     */\n    public String getContent() {...}\n\n    /**\n     * Gets the {@code Offer} characteristics.\n     *\n     * @return {@code Map<String, String>} containing the {@link Offer} characteristics.\n     */\n    public Map<String, String> getCharacteristics() {...}\n\n    /**\n     * Gets the containing {@code OptimizeProposition} for this {@code Offer}.\n     *\n     * @return {@link OptimizeProposition} instance.\n     */\n    public OptimizeProposition getProposition() {...}\n\n    /**\n     * Dispatches an event for the Edge network extension to send an Experience Event to the Edge network with the display interaction data for the\n     * given {@code OptimizeProposition} offer.\n     */\n    public void displayed() {...}\n\n    /**\n     * Dispatches an event for the Edge network extension to send an Experience Event to the Edge network with the tap interaction data for the\n     * given {@code OptimizeProposition} offer.\n     */\n    public void tapped() {...}\n\n    /**\n     * Generates a map containing XDM formatted data for {@code Experience Event - Proposition Interactions} field group from this {@code OptimizeProposition} item.\n     *\n     * The returned XDM data does contain the {@code eventType} for the Experience Event with value {@code decisioning.propositionDisplay}.\n     *\n     * Note: The Edge sendEvent API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, and override\n     * dataset identifier.\n     *\n     * @return {@code Map<String, Object>} containing the XDM data for the proposition interaction.\n     */\n    public Map<String, Object> generateDisplayInteractionXdm() {...}\n\n    /**\n     * Generates a map containing XDM formatted data for {@code Experience Event - Proposition Interactions} field group from this {@code OptimizeProposition} offer.\n     *\n     * The returned XDM data contains the {@code eventType} for the Experience Event with value {@code decisioning.propositionInteract}.\n     *\n     * Note: The Edge sendEvent API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, and override\n     * dataset identifier.\n     *\n     * @return {@code Map<String, Object>} containing the XDM data for the proposition interaction.\n     */\n    public Map<String, Object> generateTapInteractionXdm() {...}\n\n}\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"offer\" repeat=\"4\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-7\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`/// \\`Offer\\` class\n@objc(AEPOffer)\npublic class Offer: NSObject, Codable {\n    /// Unique Offer identifier\n    @objc public let id: String\n\n    /// Offer revision detail at the time of the request\n    @objc public let etag: String\n\n    /// Offer priority score\n    @objc public let score: Int\n\n    /// Offer schema string\n    @objc public let schema: String\n\n    /// Offer metadata\n    @objc public let meta: [String: Any]?\n    \n    /// Offer type as represented in enum \\`OfferType\\`\n    @objc public let type: OfferType\n\n    /// Optional Offer language array\n    @objc public let language: [String]?\n\n    /// Offer content string\n    @objc public let content: String\n\n    /// Optional Offer characteristics dictionary\n    @objc public let characteristics: [String: String]?\n}\n`}</code></pre>\n    <p>{`The `}<inlineCode parentName=\"p\">{`Offer`}</inlineCode>{` class extension provides methods for generating XDM data for Proposition Interactions field group which can be used for proposition tracking. It also contains direct methods for tracking proposition display and tap interactions.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`/// \\`Offer\\` extension\n@objc\npublic extension Offer {\n    /// Creates a dictionary containing XDM formatted data for \\`Experience Event - Proposition Interactions\\` field group from the given proposition option.\n    ///\n    /// The Edge \\`sendEvent(experienceEvent:_:)\\` API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, or override dataset identifier.\n    /// If the proposition reference within the option is released and no longer valid, the method returns \\`nil\\`.\n    ///\n    /// - Note: The returned XDM data also contains the \\`eventType\\` for the Experience Event with value \\`decisioning.propositionDisplay\\`.\n    /// - Returns A dictionary containing XDM data for the proposition interactions.\n    func generateDisplayInteractionXdm() -> [String: Any]? {...}\n\n    /// Creates a dictionary containing XDM formatted data for \\`Experience Event - Proposition Interactions\\` field group from the given proposition option.\n    ///\n    /// The Edge \\`sendEvent(experienceEvent:_:)\\` API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, or override dataset identifier.\n    /// If the proposition reference within the option is released and no longer valid, the method returns \\`nil\\`.\n    ///\n    /// - Note: The returned XDM data also contains the \\`eventType\\` for the Experience Event with value \\`decisioning.propositionInteract\\`.\n    /// - Returns A dictionary containing XDM data for the proposition interactions.\n    func generateTapInteractionXdm() -> [String: Any]? {...}\n\n    /// Dispatches an event for the Edge extension to send an Experience Event to the Edge network with the display interaction data for the given proposition item.\n    func displayed() {...}\n\n    /// Dispatches an event for the Edge extension to send an Experience Event to the Edge network with the tap interaction data for the given proposition item.\n    func tapped() {...}\n}\n`}</code></pre>\n    <Variant platform=\"android\" api=\"offertype\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-9\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public enum OfferType {\n    UNKNOWN, JSON, TEXT, HTML, IMAGE;\n\n    @Override\n    public String toString() {...}\n\n    /**\n     * Returns the {@code OfferType} for the given {@code format}.\n     *\n     * @param format {@link String} containing the {@link Offer} format.\n     * @return {@link OfferType} indicating the {@code Offer} format.\n     */\n    public static OfferType from(final String format) {...}\n}\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"offertype\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-8\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`/// Enum representing the supported Offer Types.\npublic enum OfferType: Int, Codable {\n\n    /// Unknown Offer type\n    case unknown = 0\n\n    /// JSON Offer\n    case json = 1\n\n    /// Plain text Offer\n    case text = 2\n\n    /// Html Offer\n    case html = 3\n\n    /// Image Offer\n    case image = 4\n\n    /// Initializes OfferType with the provided format string.\n    /// - Parameter format: Offer format string\n    init(from format: String) {...}\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Variant","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","platform","api","repeat","parentName","isMDXComponent"],"sourceRoot":""}