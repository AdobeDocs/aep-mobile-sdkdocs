{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-in-app-message-tutorials-native-from-javascript-md-4edac274778dae25a848.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/in-app-message/tutorials/native-from-javascript.md","webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/in-app-message/tutorials/tabs/native-from-javascript.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Tabs from './tabs/native-from-javascript.md';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst TabsBlock = makeShortcode(\"TabsBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"native-handling-of-javascript-events\"\n    }}>{`Native handling of JavaScript events`}</h1>\n    <p>{`You can handle events from in-app message interactions natively within your application by completing the following steps:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#implement-and-assign-a-presentationdelegate-messagingdelegate\"\n        }}>{`Implement and assign a `}<inlineCode parentName=\"a\">{`PresentationDelegate`}</inlineCode>{`/`}<inlineCode parentName=\"a\">{`MessagingDelegate`}</inlineCode></a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#register-a-javascript-handler-for-your-in-app-message\"\n        }}>{`Register a JavaScript handler for your In-App Message`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#post-the-javascript-message-from-your-in-app-message\"\n        }}>{`Post the JavaScript message from your In-App Message`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"implement-and-assign-a-presentationdelegate-messagingdelegate\"\n    }}>{`Implement and assign a `}<inlineCode parentName=\"h2\">{`PresentationDelegate`}</inlineCode>{`/ `}<inlineCode parentName=\"h2\">{`MessagingDelegate`}</inlineCode></h2>\n    <p>{`To register a JavaScript event handler with a `}<inlineCode parentName=\"p\">{`Message`}</inlineCode>{` object, you will first need to implement and set a `}<inlineCode parentName=\"p\">{`PresentationDelegate`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{` (for older Android SDK versions and iOS SDK).`}</p>\n    <p>{`Please read the `}<a parentName=\"p\" {...{\n        \"href\": \"./messaging-delegate.md\"\n      }}>{`tutorial`}</a>{` for more detailed instructions on implementing and using a PresentationDelegate/ MessagingDelegate (for older Android SDK versions and iOS SDK).`}</p>\n    <h2 {...{\n      \"id\": \"register-a-javascript-handler-for-your-in-app-message\"\n    }}>{`Register a JavaScript handler for your In-App Message`}</h2>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"3\" mdxType=\"TabsBlock\" />\n    <p>{`Android 3.x`}</p>\n    <Tabs query=\"platform=android3x&function=register\" mdxType=\"Tabs\" />\n    <p>{`Android 2.x (Older version)`}</p>\n    <Tabs query=\"platform=android2x&function=register\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&function=register\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"post-the-javascript-message-from-your-in-app-message\"\n    }}>{`Post the JavaScript message from your In-App Message`}</h2>\n    <p>{`Now that the in-app message has been displayed, the final step is to post the JavaScript message.`}</p>\n    <p>{`Continuing from the previous example, the developer is going to post the `}<inlineCode parentName=\"p\">{`myInappCallback`}</inlineCode>{` message from their HTML, which will in turn call the handler previously configured:`}</p>\n    <h3 {...{\n      \"id\": \"html\"\n    }}>{`HTML`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<html>\n    <head>\n        <script type=\"text/javascript\">\n            function callNative(action) {\n                try {\n                    // the name of the message handler is the same name that must be registered in native code.\n                    // in this case the message name is \"myInappCallback\"\n                    webkit.messageHandlers.myInappCallback.postMessage(action);\n                } catch(err) {\n                    console.log('The native context does not exist yet'); }\n                }\n            </script>\n    </head>\n    <body>\n        <button onclick=\"callNative('native callbacks are cool!')\">Native callback!</button>\n    </body>\n</html>\n`}</code></pre>\n    <p>{`(The above HTML is not representative of a valid in-app message, and is intended only to demonstrate how to post the JavaScript message).`}</p>\n    <p>{`When the user clicks the button inside of this in-app message, the handler configured in the previous step will be called. The handler will send an Experience Event tracking the interaction, and print the following message to the console:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`JavaScript body passed to native callback: native callbacks are cool!\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`The test apps in this repository demonstrate calling native code from JavaScript:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/aepsdk-messaging-ios/tree/main/TestApps/MessagingDemoApp\"\n        }}>{`Swift`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/aepsdk-messaging-ios/tree/main/TestApps/MessagingDemoAppObjC\"\n        }}>{`Objective-C`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/aepsdk-messaging-android/tree/main/code/testapp\"\n        }}>{`Kotlin`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android3x\" function=\"register\" repeat=\"7\" mdxType=\"Variant\" />\n    <p>{`In the `}<inlineCode parentName=\"p\">{`onShow`}</inlineCode>{` function of the `}<inlineCode parentName=\"p\">{`PresentationDelegate`}</inlineCode>{`, call `}<inlineCode parentName=\"p\">{`handleJavascriptMessage(String, AdobeCallback<String>)`}</inlineCode>{` to register your handler.`}</p>\n    <p>{`The name of the message you intend to pass from the JavaScript side should be specified in the first parameter.`}</p>\n    <p>{`The following example shows a handler that dispatches an `}<inlineCode parentName=\"p\">{`decisioning.propositionInteract`}</inlineCode>{` Experience Event natively when the JavaScript of the in-app message posts a myInappCallback message:`}</p>\n    <h4 {...{\n      \"id\": \"kotlin\"\n    }}>{`Kotlin`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var eventHandler: InAppMessageEventHandler? = null\nvar currentMessagePresentable: Presentable<InAppMessage>? = null\n\noverride fun onShow(presentable: Presentable<*>) {\n  if (presentable.getPresentation() !is InAppMessage) {\n    return\n  }\n  currentMessagePresentable = presentable as Presentable<InAppMessage>\n  eventHandler = currentMessagePresentable?.getPresentation()?.eventHandler\n  // in-line handling of JavaScript calls\n  eventHandler?.handleJavascriptMessage(\"myInappCallback\") { content ->\n    if (content != null) {\n        println(\"JavaScript body passed to native callback: $content\")\n        val message: Message? = MessagingUtils.getMessageForPresentable(currentMessagePresentable)\n        message?.track(content, MessagingEdgeEventType.INTERACT);\n    }\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`InAppMessageEventHandler eventHandler = null;\nPresentable<InAppMessage> currentMessagePresentable = null;\n\n@Override\npublic void onShow(Presentable<?> presentable) {\n    if (!(presentable.getPresentation() instanceof InAppMessage)) {\n      return;\n    }\n    currentMessagePresentable = (Presentable<InAppMessage>) presentable;\n    eventHandler = currentMessagePresentable.getPresentation().getEventHandler();\n    // in-line handling of JavaScript calls\n    eventHandler.handleJavascriptMessage(\"myInappCallback\", content -> {\n        if (content != null) {\n            System.out.println(\"JavaScript body passed to native callback: \" + content);\n            Message message = MessagingUtils.getMessageForPresentable(currentMessagePresentable);\n            if (message != null) {\n                message.track(content, MessagingEdgeEventType.INTERACT);\n            }\n        }\n    });\n}\n`}</code></pre>\n    <Variant platform=\"android2x\" function=\"register\" repeat=\"5\" mdxType=\"Variant\" />\n    <p>{`In the `}<inlineCode parentName=\"p\">{`shouldShowMessage`}</inlineCode>{` function of the `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{`, call `}<inlineCode parentName=\"p\">{`public void handleJavascriptMessage(final String name, final AdobeCallback<String> callback)`}</inlineCode>{` to register your handler.`}</p>\n    <p>{`The name of the message you intend to pass from the JavaScript side should be specified in the first parameter.`}</p>\n    <p>{`The following example shows a handler that dispatches a `}<inlineCode parentName=\"p\">{`decisioning.propositionInteract`}</inlineCode>{` Experience Event natively when the JavaScript of the in-app message posts a `}<inlineCode parentName=\"p\">{`myInappCallback`}</inlineCode>{` message:`}</p>\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic boolean shouldShowMessage(FullscreenMessage fullscreenMessage) {\n  Message message = (Message) fullscreenMessage.getParent();\n  \n  // in-line handling of JavaScript calls\n  message.handleJavascriptMessage(\"myInappCallback\", new AdobeCallback<String>() {\n    @Override\n    public void call(String content) {\n      System.out.println(\"JavaScript body passed to native callback: \" + content);\n      message.track(content, MessagingEdgeEventType.IN_APP_INTERACT);\n    }\n  });\n}\n`}</code></pre>\n    <Variant platform=\"ios\" function=\"register\" repeat=\"5\" mdxType=\"Variant\" />\n    <p>{`In the `}<inlineCode parentName=\"p\">{`shouldShowMessage`}</inlineCode>{` function of the `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{`, call `}<a parentName=\"p\" {...{\n        \"href\": \"./class-message.md#handlejavascriptmessage_withhandler\"\n      }}><inlineCode parentName=\"a\">{`handleJavascriptMessage(_:withHandler)`}</inlineCode></a>{` to register your handler.`}</p>\n    <p>{`The name of the message you intend to pass from the JavaScript side should be specified in the first parameter.`}</p>\n    <p>{`The following example shows a handler that dispatches a `}<inlineCode parentName=\"p\">{`decisioning.propositionInteract`}</inlineCode>{` Experience Event natively when the JavaScript of the in-app message posts a `}<inlineCode parentName=\"p\">{`myInappCallback`}</inlineCode>{` message:`}</p>\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func shouldShowMessage(message: Showable) -> Bool {    \n    let fullscreenMessage = message as? FullscreenMessage\n    let message = fullscreenMessage?.parent\n\n    // in-line handling of JavaScript calls\n    message?.handleJavascriptMessage(\"myInappCallback\") { content\n\n        print(\"JavaScript body passed to native callback: \\\\(content ?? \"empty\")\")\n\n        message?.track(content as? String, withEdgeEventType: .inappInteract)\n    }\n\n    return true\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","TabsBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","orientation","slots","repeat","query","isMDXComponent","Variant","platform","function"],"sourceRoot":""}