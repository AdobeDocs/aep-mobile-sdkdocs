{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-push-notification-ios-display-rich-notifications-md-461e4e49783009703c3e.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGC,GAAK,YAER,OAAO,SAACJ,GAAS,UAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,qCAAmC,sCAE3C,gKACA,sDAAuC,cAAGC,WAAW,IACjD,KAAQ,0HAAwH,4DAC/D,uJACrE,eACE,GAAM,iDAA+C,kDAEvD,wGAAyF,uBAAYA,WAAW,KAAG,aAA2B,2LAC9I,0DACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBAAgB,krHAmFrC,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/push-notification/ios/display-rich-notifications.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"displaying-rich-push-notification\"\n    }}>{`Displaying rich push notification`}</h1>\n    <p>{`This document details how to handle and display media notification on iOS device for notification generated from Adobe Journey Optimizer.`}</p>\n    <p>{`Follow Apple's documentation to `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/usernotifications/modifying_content_in_newly_delivered_notifications#2942063\"\n      }}>{`add a notification service app extension to your project`}</a>{`. Then use the service app extension to download images or other media attachments for the notification before displaying it on user's iOS device.`}</p>\n    <h2 {...{\n      \"id\": \"notification-service-extension-implementation\"\n    }}>{`Notification service extension implementation`}</h2>\n    <p>{` Notifications from Adobe Journey Optimizer contain a media attachment URL in the `}<inlineCode parentName=\"p\">{`adb_media`}</inlineCode>{` key of the notification payload. Use the service extension to download the media attachment from the URL and attach it to the notification before displaying it on the user's device.`}</p>\n    <p>{` Here is an example implementation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import UserNotifications\n\nclass NotificationService: UNNotificationServiceExtension {\n\n    var contentHandler: ((UNNotificationContent) -> Void)?\n    var bestAttemptContent: UNMutableNotificationContent?\n\n    override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) {\n        self.contentHandler = contentHandler\n        bestAttemptContent = (request.content.mutableCopy() as? UNMutableNotificationContent)\n        \n        // defer this block to be executed to call the callback\n        defer {\n            contentHandler(bestAttemptContent ?? request.content)\n        }\n        \n        guard let attachment = request.adobeAttachment else { return }\n        bestAttemptContent?.attachments = [attachment]\n        \n    }\n    \n    override func serviceExtensionTimeWillExpire() {\n        // Called just before the extension will be terminated by the system.\n        // Use this as an opportunity to deliver your \"best attempt\" at modified content, otherwise the original push payload will be used.\n        if let contentHandler = contentHandler, let bestAttemptContent =  bestAttemptContent {\n            contentHandler(bestAttemptContent)\n        }\n    }\n\n}\n\nextension UNNotificationRequest {\n    var adobeAttachment: UNNotificationAttachment? {\n        // return nil if the notification does not contain a valid value for adb_media key\n        guard let attachmentString = content.userInfo[\"adb_media\"] as? String else {\n            return nil\n        }\n        \n        // do not attach anything if it is not a valid URL\n        guard let attachmentURL = URL(string: attachmentString) else {\n            return nil\n        }\n        \n        // do not attach anything if the url does not contain downloadable data\n        guard let attachmentData = try? Data(contentsOf: attachmentURL) else {\n            return nil\n        }\n        \n        return try? UNNotificationAttachment(data: attachmentData, options: nil, attachmentURL: attachmentURL)\n    }\n}\n\nextension UNNotificationAttachment {\n\n    /// Convenience initializer to create a UNNotificationAttachment from a URL\n    /// - Parameters:\n    ///  - data: the data to be displayed in the notification\n    ///  - options : options for the attachment\n    ///  - attachmentURL : the URL of the rich media to be displayed in the notification\n    convenience init(data: Data, options: [NSObject: AnyObject]?, attachmentURL: URL) throws {\n        let fileManager = FileManager.default\n        let temporaryFolderURL = URL(fileURLWithPath: NSTemporaryDirectory()).appendingPathComponent(ProcessInfo.processInfo.globallyUniqueString,\n                                                                                                     isDirectory: true)\n        try fileManager.createDirectory(at: temporaryFolderURL, withIntermediateDirectories: true, attributes: nil)\n        var attachmentType : String\n        \n        // determine the attachment type from the url\n        // common format are png, jpg, gif, mp3,  mpeg4, avi, mp4\n        // Reference Apple documentation for supported file types and maximum size : https://developer.apple.com/documentation/usernotifications/unnotificationattachment\n        /// NOTE : Please edit the below code according to the type of rich media notification that your app needs to support\n        attachmentType = \".jpg\"\n        \n        let attachmentName = UUID().uuidString + attachmentType\n        let fileURL = temporaryFolderURL.appendingPathComponent(attachmentName)\n        try data.write(to: fileURL)\n        try self.init(identifier: attachmentName, url: fileURL, options: options)\n    }\n    \n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}