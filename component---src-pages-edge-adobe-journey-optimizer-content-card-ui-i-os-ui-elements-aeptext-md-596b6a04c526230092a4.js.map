{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-content-card-ui-i-os-ui-elements-aeptext-md-596b6a04c526230092a4.js","mappings":"4OAOsBA,E,wEADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAIY,cAJJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EAClB,GAEMG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGP,GAAK,YAER,OAAO,SAACI,GAAS,UAAKD,EAAiBH,EAAK,CAAEO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,WAAS,YAEjB,8GACA,0HACA,gDAAiC,uBAAYC,WAAW,KAAG,oBAAkC,0DAC7F,eACE,GAAM,cAAY,eAEpB,uBACE,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MAAI,aAEf,eAAIA,WAAW,KACb,MAAS,MAAI,SAEf,eAAIA,WAAW,KACb,MAAS,MAAI,gBAEf,eAAIA,WAAW,KACb,MAAS,MAAI,oBAInB,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MAAI,YAEf,eAAIA,WAAW,KACb,MAAS,MAAI,WAEf,eAAIA,WAAW,KACb,MAAS,MAAI,6CAEf,eAAIA,WAAW,KACb,MAAS,MAAI,SAGjB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MAAI,SAEf,eAAIA,WAAW,KACb,MAAS,OACR,cAAGA,WAAW,KACb,KAAQ,0DAAwD,UAEpE,eAAIA,WAAW,KACb,MAAS,MAAI,sCAEf,eAAIA,WAAW,KACb,MAAS,MAAI,kCACsB,oBAAI,oBAAI,mBAAQA,WAAW,MAAI,SAAmB,OAAO,oBAAM,kBAAkB,oBAAM,aAAa,oBAAM,mBAAuB,oBAAI,mBAAQA,WAAW,MAAI,QAAkB,OAAO,oBAAM,iBAAiB,oBAAM,aAAa,oBAAM,oBAAoB,sBAAW,oBAAI,mBAAQA,WAAW,MAAI,cAAwB,QAAQ,oBAAM,kBAAkB,oBAAM,cAAc,oBAAM,uBAExZ,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MAAI,UAEf,eAAIA,WAAW,KACb,MAAS,OACR,cAAGA,WAAW,KACb,KAAQ,2DAAyD,WAErE,eAAIA,WAAW,KACb,MAAS,MAAI,2BAEf,eAAIA,WAAW,KACb,MAAS,MAAI,oCACwB,oBAAI,oBAAI,mBAAQA,WAAW,MAAI,SAAmB,MAAM,cAAGA,WAAW,KACrG,KAAQ,mEAAiE,YACpD,OAAO,oBAAI,mBAAQA,WAAW,MAAI,QAAkB,MAAM,cAAGA,WAAW,KAC7F,KAAQ,mEAAiE,eAClD,2BAAY,mBAAQA,WAAW,MAAI,cAAwB,MAAM,cAAGA,WAAW,KACtG,KAAQ,gEAA8D,QACzD,SAEvB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MAAI,aAEf,eAAIA,WAAW,KACb,MAAS,MAAI,oBAEf,eAAIA,WAAW,KACb,MAAS,MAAI,sFAEf,eAAIA,WAAW,KACb,MAAS,MAAI,WAKrB,SAACV,EAAW,CAACW,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,qDAAsC,cAAGC,WAAW,IAChD,KAAQ,+DAA6D,cAClD,mDACvB,eACE,GAAM,iBAAe,kBAEvB,kEAAmD,uBAAYA,WAAW,KAAG,WAAyB,oCAAoC,uBAAYA,WAAW,KAAG,sBAAoC,MACxM,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBAAgB,4rBAyBrC,CAEAH,EAAWM,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/content-card-ui/iOS/ui-elements/aeptext.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"aeptext\"\n    }}>{`AEPText`}</h1>\n    <p>{`The AEPText class is a fundamental UI component used to display text for content cards.`}</p>\n    <p>{`This class allows you to customize the text element with properties like font, color, and modifier.`}</p>\n    <p>{`AEPText class conforms to `}<inlineCode parentName=\"p\">{`ObservableObject`}</inlineCode>{`, allowing it to be used reactively in SwiftUI views.`}</p>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Property`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Type`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Default Value`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`content`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`String`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The actual text content to be displayed.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`N/A`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`font`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"https://developer.apple.com/documentation/swiftui/font\"\n            }}>{`Font`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The font to be used for the text.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Depends on the type of text:  `}<ul><li><strong parentName=\"td\">{`Title`}</strong>{`:  `}<br />{`  System font `}<br />{` Size 15 `}<br />{` Medium weight`}</li><li><strong parentName=\"td\">{`Body`}</strong>{` : `}<br />{` System font `}<br />{` Size 13 `}<br />{` Regular weight `}<br /></li><li><strong parentName=\"td\">{`ButtonText`}</strong>{` :  `}<br />{` System font  `}<br />{` Size 13  `}<br />{` Regular weight`}</li></ul></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`color`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><a parentName=\"td\" {...{\n              \"href\": \"https://developer.apple.com/documentation/swiftui/color\"\n            }}>{`Color`}</a></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The color of the text.`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Depends on the type of text:    `}<ul><li><strong parentName=\"td\">{`Title`}</strong>{`: `}<a parentName=\"td\" {...{\n                  \"href\": \"https://developer.apple.com/documentation/swiftui/color/primary\"\n                }}>{`primary`}</a></li>{`   `}<li><strong parentName=\"td\">{`Body`}</strong>{`: `}<a parentName=\"td\" {...{\n                  \"href\": \"https://developer.apple.com/documentation/swiftui/color/primary\"\n                }}>{`secondary`}</a></li><li>{`    `}<strong parentName=\"td\">{`ButtonText`}</strong>{`: `}<a parentName=\"td\" {...{\n                  \"href\": \"https://developer.apple.com/documentation/swiftui/color/blue\"\n                }}>{`blue`}</a>{` `}</li></ul></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`modifier`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`AEPViewModifier`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`A custom view modifer that can be applied to the text view for additional styling`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`N/A`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`All properties are marked with `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/combine/published\"\n      }}>{`@Published`}</a>{`. Any changes will trigger updates to your UI.`}</p>\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p>{`Below is an example of how to customize the `}<inlineCode parentName=\"p\">{`AEPText`}</inlineCode>{` properties when working with a `}<inlineCode parentName=\"p\">{`SmallImageTemplate`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class MyCustomizer : ContentCardCustomizing {\n    \n    func customize(template: SmallImageTemplate) {        \n        // Customize the title text element\n        template.title.font = .subheadline\n        template.title.textColor = .green        \n        template.title.modifier = AEPViewModifier(MyTitleModifier())\n        \n        // Customize the body text element, if available\n        template.body?.font = .caption        \n    }\n    \n    struct MyTitleModifier: ViewModifier {\n        func body(content: Content) -> some View {\n            content\n                .padding()\n                .background(Color.yellow)\n                .cornerRadius(5)\n        }\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}