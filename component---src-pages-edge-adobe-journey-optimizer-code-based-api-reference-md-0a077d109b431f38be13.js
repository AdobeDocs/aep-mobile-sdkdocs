"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[4984,5201],{9477:function(e,a,r){r.r(a),r.d(a,{_frontmatter:function(){return d},default:function(){return f}});var n,o=r(87462),i=r(63366),s=(r(15007),r(64983)),t=r(91515),p=r(60517),l=["components"],d={},c=(n="TabsBlock",function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.mdx)("div",e)}),u={_frontmatter:d},m=t.Z;function f(e){var a=e.components,r=(0,i.Z)(e,l);return(0,s.mdx)(m,(0,o.Z)({},u,r,{components:a,mdxType:"MDXLayout"}),(0,s.mdx)("h1",{id:"code-based-experiences--content-cards---api-reference"},"Code-based Experiences & Content Cards - API reference"),(0,s.mdx)("p",null,"This document lists the public APIs available in the Messaging extension for implementing code-based experiences and content cards."),(0,s.mdx)("h2",{id:"getpropositionsforsurfaces"},"getPropositionsForSurfaces"),(0,s.mdx)("p",null,"The ",(0,s.mdx)("inlineCode",{parentName:"p"},"getPropositionsForSurfaces")," API retrieves the previously fetched propositions from the SDK's in-memory propositions cache for the provided surfaces. The completion handler is invoked with the decision propositions corresponding to the given surfaces or ",(0,s.mdx)("inlineCode",{parentName:"p"},"AEPError"),", if it occurs."),(0,s.mdx)("p",null,"If a requested surface was not previously cached prior to calling ",(0,s.mdx)("inlineCode",{parentName:"p"},"getPropositionsForSurfaces")," (using the ",(0,s.mdx)("inlineCode",{parentName:"p"},"updatePropositionsForSurfaces")," API), no propositions will be returned for that surface."),(0,s.mdx)(c,{orientation:"horizontal",slots:"heading, content",repeat:"2",mdxType:"TabsBlock"}),(0,s.mdx)("p",null,"Android"),(0,s.mdx)(p.default,{query:"platform=android&api=get-propositions-for-surfaces",mdxType:"Tabs"}),(0,s.mdx)("p",null,"iOS"),(0,s.mdx)(p.default,{query:"platform=ios&api=get-propositions-for-surfaces",mdxType:"Tabs"}),(0,s.mdx)("h2",{id:"updatepropositionsforsurfaces"},"updatePropositionsForSurfaces"),(0,s.mdx)("p",null,"The ",(0,s.mdx)("inlineCode",{parentName:"p"},"updatePropositionsForSurfaces")," API dispatches an event for the Edge network extension to fetch personalization decisions from the AJO campaigns for the provided surfaces array. The returned decision propositions are cached in-memory by the Messaging extension."),(0,s.mdx)("p",null,"To retrieve previously cached decision propositions, use ",(0,s.mdx)("inlineCode",{parentName:"p"},"getPropositionsForSurfaces")," API."),(0,s.mdx)(c,{orientation:"horizontal",slots:"heading, content",repeat:"2",mdxType:"TabsBlock"}),(0,s.mdx)("p",null,"Android"),(0,s.mdx)(p.default,{query:"platform=android&api=update-propositions-for-surfaces",mdxType:"Tabs"}),(0,s.mdx)("p",null,"iOS"),(0,s.mdx)(p.default,{query:"platform=ios&api=update-propositions-for-surfaces",mdxType:"Tabs"}),(0,s.mdx)("h2",{id:"updatepropositionsforsurfaceswithcompletionhandler"},"updatePropositionsForSurfacesWithCompletionHandler"),(0,s.mdx)("p",null,"The ",(0,s.mdx)("inlineCode",{parentName:"p"},"updatePropositionsForSurfaces")," API dispatches an event for the Edge network extension to fetch personalization decisions from the AJO campaigns for the provided surfaces array. The returned decision propositions are cached in-memory by the Messaging extension."),(0,s.mdx)("p",null,"If provided, ",(0,s.mdx)("inlineCode",{parentName:"p"},"completion")," will be called on the Messaging extension's background thread once the response has been fully processed. ",(0,s.mdx)("inlineCode",{parentName:"p"},"true")," will be passed to the ",(0,s.mdx)("inlineCode",{parentName:"p"},"completion")," method if a network response was returned and successfully processed."),(0,s.mdx)("p",null,"To retrieve previously cached decision propositions, use ",(0,s.mdx)("inlineCode",{parentName:"p"},"getPropositionsForSurfaces")," API."),(0,s.mdx)(c,{orientation:"horizontal",slots:"heading, content",repeat:"2",mdxType:"TabsBlock"}),(0,s.mdx)("p",null,"Android"),(0,s.mdx)(p.default,{query:"platform=android&api=update-propositions-for-surfaces-with-completion-handler",mdxType:"Tabs"}),(0,s.mdx)("p",null,"iOS"),(0,s.mdx)(p.default,{query:"platform=ios&api=update-propositions-for-surfaces-with-completion-handler",mdxType:"Tabs"}))}f.isMDXComponent=!0},60517:function(e,a,r){r.r(a),r.d(a,{_frontmatter:function(){return l},default:function(){return m}});var n,o=r(87462),i=r(63366),s=(r(15007),r(64983)),t=r(91515),p=["components"],l={},d=(n="Variant",function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,s.mdx)("div",e)}),c={_frontmatter:l},u=t.Z;function m(e){var a=e.components,r=(0,i.Z)(e,p);return(0,s.mdx)(u,(0,o.Z)({},c,r,{components:a,mdxType:"MDXLayout"}),(0,s.mdx)(d,{platform:"android",api:"get-propositions-for-surfaces",repeat:"9",mdxType:"Variant"}),(0,s.mdx)("h4",{id:"java"},"Java"),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Syntax")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-java"},"public static void getPropositionsForSurfaces(@NonNull final List<Surface> surfaces, @NonNull final AdobeCallback<Map<Surface, List<Proposition>>> callback)\n")),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("em",{parentName:"li"},"surfaces")," is a list of surfaces for which propositions are requested."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("em",{parentName:"li"},"callback")," ",(0,s.mdx)("inlineCode",{parentName:"li"},"call")," method is invoked with propositions map of type ",(0,s.mdx)("inlineCode",{parentName:"li"},"Map<Surface, List<Proposition>>"),". If the callback is an instance of ",(0,s.mdx)("a",{parentName:"li",href:"../../../../home/base/mobile-core/api-reference.md#adobecallbackwitherror"},"AdobeCallbackWithError"),", and if the operation times out or an error occurs in retrieving propositions, the ",(0,s.mdx)("inlineCode",{parentName:"li"},"fail")," method is invoked with the appropriate ",(0,s.mdx)("a",{parentName:"li",href:"../../../../home/base/mobile-core/api-reference.md#adobeerror"},"AdobeError"),".")),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Example")),(0,s.mdx)("h4",{id:"kotlin"},"Kotlin"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-kotlin"},'val surface1 = Surface("myActivity#button")\nval surface2 = Surface("myActivityAttributes")\nval surfaces = listOf(surface1, surface2)\n\nMessaging.getPropositionsForSurfaces(surfaces) {\n  it?.let { propositionsMap ->\n    if (propositionsMap.isNotEmpty()) {\n      // get the propositions for the given surfaces\n      propositionsMap[surface1]?.let {\n        // read surface1 propositions\n      }\n      propositionsMap[surface2]?.let {\n        // read surface2 propositions\n      }\n    }\n  }\n}\n')),(0,s.mdx)("h4",{id:"java-1"},"Java"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-java"},'final Surface surface1 = new Surface("myActivity#button");\nfinal Surface surface2 = new Surface("myActivityAttributes");\n\nfinal List<Surface> surfaces = new ArrayList<>();\nsurfaces.add(surface1);\nsurfaces.add(surface2);\n\nMessaging.getPropositionsForSurfaces(surfaces, new AdobeCallbackWithError<Map<Surface, List<Proposition>>>() {\n    @Override\n    public void fail(final AdobeError adobeError) {\n        // handle error\n    }\n\n    @Override\n    public void call(Map<Surface, List<Proposition>> propositionsMap) {\n        if (propositionsMap != null && !propositionsMap.isEmpty()) {\n            // get the propositions for the given surfaces\n            if (propositionsMap.contains(surface1)) {\n                final List<Proposition> propositions1 = propositionsMap.get(surface1)\n                // read surface1 propositions\n            }\n            if (propositionsMap.contains(surface2)) {\n                final List<Proposition> proposition2 = propositionsMap.get(surface2)\n                // read surface2 propositions\n            }\n        }\n    }\n});\n')),(0,s.mdx)(d,{platform:"ios",api:"get-propositions-for-surfaces",repeat:"12",mdxType:"Variant"}),(0,s.mdx)("h4",{id:"swift"},"Swift"),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Syntax")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-swift"},"static func getPropositionsForSurfaces(_ surfacePaths: [Surface], _ completion: @escaping ([Surface: [Proposition]]?, Error?) -> Void)\n")),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("em",{parentName:"li"},"surfaces")," is an array of surfaces for which propositions are requested."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("em",{parentName:"li"},"completion")," is invoked with propositions dictionary of type ",(0,s.mdx)("inlineCode",{parentName:"li"},"[Surface: [Proposition]]"),". An ",(0,s.mdx)("inlineCode",{parentName:"li"},"Error")," is returned if SDK fails to retrieve the propositions.")),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Example")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-swift"},'let surface1 = Surface(path: "myView#button")\nlet surface2 = Surface(path: "myViewAttributes")\n\nMessaging.getPropositionsForSurfaces([surface1, surface2]) { propositionsDict, error in\n    guard error == nil else {\n        // handle error\n        return\n    }\n\n    guard let propositionsDict = propositionsDict else {\n        // bail early if no propositions\n        return\n    }\n    \n    // get the propositions for the given surfaces\n    if let propositions1 = propositionsDict[surface1] {\n        // read surface1 propositions\n    }\n\n    if let propositions2 = propositionsDict[surface2] {\n        // read surface2 propositions\n    }\n}\n')),(0,s.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Syntax")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-objc"},"+ (void) getPropositionsForSurfaces: (NSArray<AEPSurface*>* _Nonnull) surfaces \n              completion: (void (^ _Nonnull)(NSDictionary<AEPSurface*, NSArray<AEPProposition*>*>* _Nullable propositionsDict, NSError* _Nullable error)) completion;\n")),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("em",{parentName:"li"},"surfaces")," is an array of surfaces for which propositions are requested."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("em",{parentName:"li"},"completion")," is invoked with propositions dictionary of type ",(0,s.mdx)("inlineCode",{parentName:"li"},"NSDictionary<AEPSurface*, NSArray<AEPProposition*>*>"),". An ",(0,s.mdx)("inlineCode",{parentName:"li"},"NSError")," is returned if SDK fails to retrieve the propositions.")),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Example")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-objc"},'AEPSurface* surface1 = [[AEPSurface alloc] initWithPath: @"myView#button"];\nAEPSurface* surface2 = [[AEPSurface alloc] initWithPath: @"myView#button"];\n\n[AEPMobileMessaging getPropositionsForSurfaces: @[surface1, surface2] \n                        completion: ^(NSDictionary<AEPDecisionScope*, NSArray<AEPProposition*>*>* propositionsDict, NSError* error) {\n  if (error != nil) {\n    // handle error   \n    return;\n  }\n\n  NSArray<AEPProposition*>* proposition1 = propositionsDict[surface1];\n  // read surface1 propositions\n\n  NSArray<AEPProposition*>* proposition2 = propositionsDict[surface2];\n  // read surface2 propositions\n}];\n')),(0,s.mdx)(d,{platform:"android",api:"update-propositions-for-surfaces",repeat:"9",mdxType:"Variant"}),(0,s.mdx)("h4",{id:"java-2"},"Java"),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Syntax")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-java"},"public static void updatePropositionsForSurfaces(@NonNull final List<Surface> surfaces)\n")),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("em",{parentName:"li"},"surfaces")," is a list of surfaces for which propositions need updating.")),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Example")),(0,s.mdx)("h4",{id:"kotlin-1"},"Kotlin"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-kotlin"},'val surface1 = Surface("myActivity#button")\nval surface2 = Surface("myActivityAttributes")\nval surfaces = listOf(surface1, surface2)\n\nMessaging.updatePropositionsForSurfaces(surfaces)\n')),(0,s.mdx)("h4",{id:"java-3"},"Java"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-java"},'final Surface surface1 = new Surface("myActivity#button");\nfinal Surface surface2 = new Surface("myActivityAttributes");\n\nfinal List<Surface> surfaces = new ArrayList<>();\nsurfaces.add(surface1);\nsurfaces.add(surface2);\n\nMessaging.updatePropositionsForSurfaces(surfaces)\n')),(0,s.mdx)(d,{platform:"ios",api:"update-propositions-for-surfaces",repeat:"12",mdxType:"Variant"}),(0,s.mdx)("h4",{id:"swift-1"},"Swift"),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Syntax")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-swift"},"static func updatePropositionsForSurfaces(_ surfaces: [Surface])\n")),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("em",{parentName:"li"},"surfaces")," is an array of surfaces for which propositions need updating.")),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Example")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-swift"},'let surface1 = Surface(path: "myView#button")\nlet surface2 = Surface(path: "myViewAttributes")\n\nMessaging.updatePropositionsForSurfaces([surface1, surface2])\n')),(0,s.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Syntax")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-objc"},"+ (void) updatePropositionsForSurfaces: (NSArray<AEPSurface*>* _Nonnull) surfaces;\n")),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("em",{parentName:"li"},"surfaces")," is an array of surfaces for which propositions need updating.")),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Example")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-objc"},'AEPSurface* surface1 = [[AEPSurface alloc] initWithPath: @"myView#button"];\nAEPSurface* surface2 = [[AEPSurface alloc] initWithPath: @"myView#button"];\n\n[AEPMobileMessaging updatePropositionsForSurfaces: @[surface1, surface2]]; \n')),(0,s.mdx)(d,{platform:"android",api:"update-propositions-for-surfaces-with-completion-handler",repeat:"9",mdxType:"Variant"}),(0,s.mdx)("h4",{id:"java-4"},"Java"),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Syntax")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-java"},"public static void updatePropositionsForSurfaces(@NonNull final List<Surface> surfaces, @Nullable final AdobeCallback<Boolean> callback)\n")),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("em",{parentName:"li"},"surfaces")," is a list of surfaces for which propositions need updating."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("em",{parentName:"li"},"callback")," ",(0,s.mdx)("inlineCode",{parentName:"li"},"call")," method is invoked with ",(0,s.mdx)("inlineCode",{parentName:"li"},"true")," if a network response was returned and successfully processed, ",(0,s.mdx)("inlineCode",{parentName:"li"},"false")," otherwise")),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Example")),(0,s.mdx)("h4",{id:"kotlin-2"},"Kotlin"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-kotlin"},'val surface1 = Surface("myActivity#button")\nval surface2 = Surface("myActivityAttributes")\nval surfaces = listOf(surface1, surface2)\n\nMessaging.updatePropositionsForSurfaces(surfaces) { success ->\n    if (success) {\n        // handle success scenario\n    } else {\n        // handle error scenario\n    }\n}\n')),(0,s.mdx)("h4",{id:"java-5"},"Java"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-java"},'final Surface surface1 = new Surface("myActivity#button");\nfinal Surface surface2 = new Surface("myActivityAttributes");\n\nfinal List<Surface> surfaces = new ArrayList<>();\nsurfaces.add(surface1);\nsurfaces.add(surface2);\n\nMessaging.updatePropositionsForSurfaces(surfaces, success -> {\n    if (success) {\n        // handle success scenario\n    } else {\n        // handle error scenario\n    }\n});\n')),(0,s.mdx)(d,{platform:"ios",api:"update-propositions-for-surfaces-with-completion-handler",repeat:"12",mdxType:"Variant"}),(0,s.mdx)("h4",{id:"swift-2"},"Swift"),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Syntax")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-swift"},"static func updatePropositionsForSurfaces(_ surfaces: [Surface], _ completion: ((Bool) -> Void)? = nil)\n")),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("em",{parentName:"li"},"surfaces")," is an array of surfaces for which propositions need updating."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("em",{parentName:"li"},"completion")," is invoked with ",(0,s.mdx)("inlineCode",{parentName:"li"},"true")," if a network response was returned and successfully processed, ",(0,s.mdx)("inlineCode",{parentName:"li"},"false")," otherwise")),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Example")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-swift"},'let surface1 = Surface(path: "myView#button")\nlet surface2 = Surface(path: "myViewAttributes")\n\nMessaging.updatePropositionsForSurfaces([surface1, surface2]) { success in\n    if success {\n        // handle success scenario\n    } else {\n        // handle error scenario\n    }\n}\n')),(0,s.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Syntax")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-objc"},"+ (void) updatePropositionsForSurfaces: (NSArray<AEPSurface*>* _Nonnull) surfaces\n                            completion: (void (^)(BOOL)) completion;\n")),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("em",{parentName:"li"},"surfaces")," is an array of surfaces for which propositions need updating."),(0,s.mdx)("li",{parentName:"ul"},(0,s.mdx)("em",{parentName:"li"},"completion")," is invoked with ",(0,s.mdx)("inlineCode",{parentName:"li"},"true")," if a network response was returned and successfully processed, ",(0,s.mdx)("inlineCode",{parentName:"li"},"false")," otherwise")),(0,s.mdx)("p",null,(0,s.mdx)("strong",{parentName:"p"},"Example")),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-objc"},'AEPSurface* surface1 = [[AEPSurface alloc] initWithPath: @"myView#button"];\nAEPSurface* surface2 = [[AEPSurface alloc] initWithPath: @"myViewAttributes"];\n\n[AEPMobileMessaging updatePropositionsForSurfaces:@[surface1, surface2] completion:^(BOOL success) {\n    if (success) {\n        // handle success scenario\n    } else {\n        // handle error scenario\n    }\n}];\n')))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-edge-adobe-journey-optimizer-code-based-api-reference-md-0a077d109b431f38be13.js.map