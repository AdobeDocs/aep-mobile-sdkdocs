"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[1137],{63732:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return m},default:function(){return u}});var a=n(87462),i=n(63366),r=(n(15007),n(64983)),d=n(91515),l=["components"],m={},o=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",t)}},p=o("Variant"),s=o("InlineNestedAlert"),c={_frontmatter:m},g=d.Z;function u(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.mdx)(g,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)(p,{platform:"android",api:"extension-version",repeat:"8",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static String extensionVersion()\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"String extensionVersion = Identity.extensionVersion();\n")),(0,r.mdx)("h4",{id:"kotlin"},"Kotlin"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"val extensionVersion = Identity.extensionVersion()\n")),(0,r.mdx)(p,{platform:"ios",api:"extension-version",repeat:"10",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static var extensionVersion: String\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"let extensionVersion = EdgeIdentity.extensionVersion\n")),(0,r.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (nonnull NSString*) extensionVersion;\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"NSString *extensionVersion = [AEPMobileEdgeIdentity extensionVersion];\n")),(0,r.mdx)(p,{platform:"android",api:"get-experience-cloud-id",repeat:"10",mdxType:"Variant"}),(0,r.mdx)(s,{variant:"info",header:"false",iconPosition:"left",mdxType:"InlineNestedAlert"},(0,r.mdx)("p",null,"The ECID value is returned via the ",(0,r.mdx)("a",{parentName:"p",href:"../../home/base/mobile-core/api-reference.md#public-classes"},"AdobeCallback"),". When ",(0,r.mdx)("a",{parentName:"p",href:"../../home/base/mobile-core/api-reference.md#public-classes"},"AdobeCallbackWithError")," is provided to this API, the timeout value is 500ms. If the operation times out or an unexpected error occurs, the ",(0,r.mdx)("inlineCode",{parentName:"p"},"fail")," method is called with the appropriate ",(0,r.mdx)("a",{parentName:"p",href:"../../home/base/mobile-core/api-reference.md#public-classes"},"AdobeError"),".")),(0,r.mdx)("h4",{id:"java-1"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void getExperienceCloudId(final AdobeCallback<String> callback);\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"callback")," is invoked after the ECID is available. The callback may be invoked on a different thread.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"Identity.getExperienceCloudId(new AdobeCallback<String>() {    \n    @Override    \n    public void call(String id) {        \n         // Handle the ID returned here    \n    }\n});\n")),(0,r.mdx)("h4",{id:"kotlin-1"},"Kotlin"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"Identity.getExperienceCloudId { id ->\n    // Handle the ID returned here\n}\n")),(0,r.mdx)(p,{platform:"ios",api:"get-experience-cloud-id",repeat:"11",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-1"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static func getExperienceCloudId(completion: @escaping (String?, Error?) -> Void)\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"completion")," is invoked after the ECID is available. The default timeout is 1000ms.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"Identity.getExperienceCloudId { (ecid, error) in\n  if let error = error {\n    // Handle the error here\n  } else {\n    // Handle the retrieved ID here\n  }\n}\n")),(0,r.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) getExperienceCloudId:^(NSString * _Nullable ecid, NSError * _Nullable error)completion\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[AEPMobileEdgeIdentity getExperienceCloudId:^(NSString *ecid, NSError *error) {   \n    // handle the error and the retrieved ID here    \n}];\n")),(0,r.mdx)(p,{platform:"android",api:"get-identities",repeat:"10",mdxType:"Variant"}),(0,r.mdx)(s,{variant:"info",header:"false",iconPosition:"left",mdxType:"InlineNestedAlert"},(0,r.mdx)("p",null,"When ",(0,r.mdx)("a",{parentName:"p",href:"../../home/base/mobile-core/api-reference.md#public-classes"},"AdobeCallbackWithError")," is provided, and you are fetching the identities from the Mobile SDK, the timeout value is 500ms. If the operation times out or an unexpected error occurs, the ",(0,r.mdx)("inlineCode",{parentName:"p"},"fail")," method is called with the appropriate ",(0,r.mdx)("a",{parentName:"p",href:"../../home/base/mobile-core/api-reference.md#public-classes"},"AdobeError"),".")),(0,r.mdx)("h4",{id:"java-2"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void getIdentities(final AdobeCallback<IdentityMap> callback);\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"callback")," is invoked after the identities are available. The return format is an instance of ",(0,r.mdx)("a",{parentName:"li",href:"#identitymap"},"IdentityMap"),". The callback may be invoked on a different thread.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"Identity.getIdentities(new AdobeCallback<IdentityMap>() {    \n    @Override    \n    public void call(IdentityMap identityMap) {        \n         // Handle the IdentityMap returned here    \n    }\n});\n")),(0,r.mdx)("h4",{id:"kotlin-2"},"Kotlin"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"Identity.getIdentities { identityMap ->\n  // Handle the IdentityMap returned here        \n}\n")),(0,r.mdx)(p,{platform:"ios",api:"get-identities",repeat:"11",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-2"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static func getIdentities(completion: @escaping (IdentityMap?, Error?) -> Void)\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"completion")," is invoked after the identities are available.  The default timeout is 1000ms. The return format is an instance of ",(0,r.mdx)("a",{parentName:"li",href:"#identitymap"},"IdentityMap"),".")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"Identity.getIdentities { (identityMap, error) in\n  if let error = error {\n    // Handle the error here\n  } else {\n    // Handle the retrieved identitites here\n  }\n}\n")),(0,r.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) getIdentities:^(AEPIdentityMap * _Nullable map, NSError * _Nullable error)completion\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[AEPMobileEdgeIdentity getIdentities:^(AEPIdentityMap *map, NSError *error) {   \n    // handle the error and the retrieved ID here\n}];\n")),(0,r.mdx)(p,{platform:"android",api:"get-url-variables",repeat:"10",mdxType:"Variant"}),(0,r.mdx)(s,{variant:"info",header:"false",iconPosition:"left",mdxType:"InlineNestedAlert"},(0,r.mdx)("p",null,"When ",(0,r.mdx)("inlineCode",{parentName:"p"},"AdobeCallbackWithError")," is provided and you are fetching the URL variables from the Mobile SDK, the timeout value is 500ms. If the operation times out or an unexpected error occurs, the ",(0,r.mdx)("inlineCode",{parentName:"p"},"fail")," method is called with the appropriate ",(0,r.mdx)("inlineCode",{parentName:"p"},"AdobeError"),".")),(0,r.mdx)("h4",{id:"java-3"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void getUrlVariables(final AdobeCallback<String> callback);\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"callback")," has a String value that contains the visitor identifiers as a query string after the service request is complete.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'Identity.getUrlVariables(new AdobeCallback<String>() {    \n    @Override    \n    public void call(String urlVariablesString) {        \n        // Handle the URL query parameter string here\n        // For example, open the URL in a webView  \n        WebView webView;\n        webView = (WebView)findViewById(R.id.your_webview); // Initialize with your webView\n        webview.loadUrl("https://example.com?" + urlVariablesString);\n    }\n});\n')),(0,r.mdx)("h4",{id:"kotlin-3"},"Kotlin"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'Identity.getUrlVariables { urlVariablesString ->\n  // Handle the URL query parameter string here\n  // For example, open the URL in a webView      \n  val webView = findViewById<WebView>(R.id.your_webview) // Initialize with your webView\n  webView.loadUrl("http://www.example.com?" + urlVariablesString)    \n}\n')),(0,r.mdx)(p,{platform:"ios",api:"get-url-variables",repeat:"11",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-3"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static func getUrlVariables(completion: @escaping (String?, Error?) -> Void)\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"completion")," is invoked with ",(0,r.mdx)("inlineCode",{parentName:"li"},"urlVariables")," containing the visitor identifiers as a query string, or with ",(0,r.mdx)("inlineCode",{parentName:"li"},"error")," if an unexpected error occurs or the request times out. The returned ",(0,r.mdx)("inlineCode",{parentName:"li"},"Error")," contains the ",(0,r.mdx)("a",{parentName:"li",href:"../../home/base/mobile-core/api-reference.md#public-classes"},"AEPError")," code of the specific error. The default timeout is 1000ms.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'Identity.getUrlVariables { (urlVariables, error) in\n  if let error = error {\n    // Handle the error here\n  } else {\n    var urlStringWithVisitorData: String = "https://example.com"\n    if let urlVariables: String = urlVariables {\n      urlStringWithVisitorData.append("?" + urlVariables)\n    }\n\n    guard let urlWithVisitorData: URL = URL(string: urlStringWithVisitorData) else {\n      // Handle the error, unable to construct URL\n      return\n    }\n\n    // Handle the retrieved urlVariables encoded string here\n    // APIs which update the UI must be called from main thread\n    DispatchQueue.main.async {\n        self.webView.load(URLRequest(url: urlWithVisitorData))\n    }\n  }\n}\n')),(0,r.mdx)("h4",{id:"objective-c-3"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) getUrlVariables:^(NSString * _Nullable urlVariables, NSError * _Nullable error)completion\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[AEPMobileEdgeIdentity getUrlVariables:^(NSString *urlVariables, NSError *error){\n  if (error) {\n  // Handle the error here\n  } else {\n    // Handle the URL query parameter string here\n    NSString* urlString = @"https://example.com";\n    NSString* urlStringWithVisitorData = [NSString stringWithFormat:@"%@?%@", urlString, urlVariables];\n    NSURL* urlWithVisitorData = [NSURL URLWithString:urlStringWithVisitorData];\n\n    // APIs which update the UI must be called from main thread\n    dispatch_async(dispatch_get_main_queue(), ^{\n      [[self webView] loadRequest:[NSURLRequest requestWithURL:urlWithVisitorData]];\n    }\n  }\n}];\n')),(0,r.mdx)(p,{platform:"android",api:"register-extension",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-4"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void registerExtension()\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"import com.adobe.marketing.mobile.edge.identity.Identity\n\n...\nIdentity.registerExtension();\n")),(0,r.mdx)(p,{platform:"android",api:"remove-identity",repeat:"8",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-5"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void removeIdentity(final IdentityItem item, final String namespace);\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'IdentityItem item = new IdentityItem("user@example.com");\nIdentity.removeIdentity(item, "Email");\n')),(0,r.mdx)("h4",{id:"kotlin-4"},"Kotlin"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'val item = IdentityItem("user@example.com")\nIdentity.removeIdentity(item, "Email")\n')),(0,r.mdx)(p,{platform:"ios",api:"remove-identity",repeat:"10",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-4"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static func removeIdentity(item: IdentityItem, withNamespace: String)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'Identity.removeIdentity(item: IdentityItem(id: "user@example.com"), withNamespace: "Email")\n')),(0,r.mdx)("h4",{id:"objective-c-4"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) removeIdentityItem:(AEPIdentityItem * _Nonnull) item\n                             withNamespace: (NSString * _Nonnull) namespace\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'AEPIdentityItem *item = [[AEPIdentityItem alloc] initWithId:@"user@example.com" authenticatedState:AEPAuthenticatedStateAuthenticated primary:false];\n[AEPMobileEdgeIdentity removeIdentityItem:item withNamespace:@"Email"];\n')),(0,r.mdx)(p,{platform:"android",api:"set-advertising-identifier",repeat:"14",mdxType:"Variant"}),(0,r.mdx)(s,{variant:"warning",header:"false",iconPosition:"left",mdxType:"InlineNestedAlert"},(0,r.mdx)("p",null,"In order to enable collection of the user's current advertising tracking authorization selection for the provided advertising identifier, you need to install and register the ",(0,r.mdx)("a",{parentName:"p",href:"../consent-for-edge-network/index.md"},"AEPEdgeConsent")," extension and update the ",(0,r.mdx)("a",{parentName:"p",href:"../edge-network/index.md"},"AEPEdge")," dependency to minimum 1.3.2.")),(0,r.mdx)(s,{variant:"info",header:"false",iconPosition:"left",mdxType:"InlineNestedAlert"},(0,r.mdx)("p",null,"These examples require Google Play Services to be configured in your mobile application and use the Google Mobile Ads Lite SDK. For instructions on how to import the SDK and configure your ",(0,r.mdx)("inlineCode",{parentName:"p"},"ApplicationManifest.xml")," file see ",(0,r.mdx)("a",{parentName:"p",href:"https://developers.google.com/admob/android/lite-sdk"},"Google Mobile Ads Lite SDK setup"),". For more information about advertising identifiers and how to handle them correctly in your mobile application see ",(0,r.mdx)("a",{parentName:"p",href:"https://developers.google.com/android/reference/com/google/android/gms/ads/identifier/AdvertisingIdClient"},"Google Play Services documentation about AdvertisingIdClient"),".")),(0,r.mdx)("h4",{id:"java-6"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void setAdvertisingIdentifier(final String advertisingIdentifier);\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"advertisingIdentifier")," is an ID string that provides developers with a simple, standard system to continue to track ads throughout their apps.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'import com.google.android.gms.ads.identifier.AdvertisingIdClient;\nimport com.google.android.gms.common.GooglePlayServicesNotAvailableException;\nimport com.google.android.gms.common.GooglePlayServicesRepairableException;\nimport java.io.IOException;\nimport android.util.Log;\n\n...\n@Override\npublic void onResume() {\n    super.onResume();\n    ...\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            String advertisingIdentifier = null;\n\n            try {\n                AdvertisingIdClient.Info adInfo = AdvertisingIdClient.getAdvertisingIdInfo(getApplicationContext());\n                if (adInfo != null) {\n                    if (!adInfo.isLimitAdTrackingEnabled()) {\n                        advertisingIdentifier = adInfo.getId();\n                    } else {\n                        Log.d("ExampleActivity", "Limit Ad Tracking is enabled by the user, cannot process the advertising identifier");\n                    }\n                }\n            } catch (IOException e) {\n                // Unrecoverable error connecting to Google Play services (e.g.,\n                // the old version of the service doesn\'t support getting AdvertisingId).\n                Log.d("ExampleActivity", "IOException while retrieving the advertising identifier " + e.getLocalizedMessage());\n            } catch (GooglePlayServicesNotAvailableException e) {\n                // Google Play services is not available entirely.\n                Log.d("ExampleActivity", "GooglePlayServicesNotAvailableException while retrieving the advertising identifier " + e.getLocalizedMessage());\n            } catch (GooglePlayServicesRepairableException e) {\n                // Google Play services is not installed, up-to-date, or enabled.\n                Log.d("ExampleActivity", "GooglePlayServicesRepairableException while retrieving the advertising identifier " + e.getLocalizedMessage());\n            }\n            MobileCore.setAdvertisingIdentifier(advertisingIdentifier);\n        }\n    }).start();\n}\n')),(0,r.mdx)("h4",{id:"kotlin-5"},"Kotlin"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"advertisingIdentifier")," is an ID string that provides developers with a simple, standard system to continue to track ads throughout their apps.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'import android.content.Context\nimport android.util.Log\nimport com.google.android.gms.ads.identifier.AdvertisingIdClient\nimport com.google.android.gms.common.GooglePlayServicesNotAvailableException\nimport com.google.android.gms.common.GooglePlayServicesRepairableException\nimport java.io.IOException\n...\n\nsuspend fun getGAID(applicationContext: Context): String {\n    var adID = ""\n    try {\n        val idInfo = AdvertisingIdClient.getAdvertisingIdInfo(applicationContext)\n        if (idInfo.isLimitAdTrackingEnabled) {\n            Log.d("ExampleActivity", "Limit Ad Tracking is enabled by the user, setting ad ID to \\"\\"")\n            return adID\n        }\n        Log.d("ExampleActivity", "Limit Ad Tracking disabled; ad ID value: ${idInfo.id}")\n        adID = idInfo.id\n    } catch (e: GooglePlayServicesNotAvailableException) {\n        Log.d("ExampleActivity", "GooglePlayServicesNotAvailableException while retrieving the advertising identifier ${e.localizedMessage}")\n    } catch (e: GooglePlayServicesRepairableException) {\n        Log.d("ExampleActivity", "GooglePlayServicesRepairableException while retrieving the advertising identifier ${e.localizedMessage}")\n    } catch (e: IOException) {\n        Log.d("ExampleActivity", "IOException while retrieving the advertising identifier ${e.localizedMessage}")\n    }\n    Log.d("ExampleActivity", "Returning ad ID value: $adID")\n    return adID\n}\n')),(0,r.mdx)("p",null,"Call site:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'import kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\n...\n\n // Create background coroutine scope to fetch ad ID value\nval scope = CoroutineScope(Dispatchers.IO).launch {\n    val adID = sharedViewModel.getGAID(context.applicationContext)\n    Log.d("ExampleActivity", "Sending ad ID value: $adID to MobileCore.setAdvertisingIdentifier")\n    MobileCore.setAdvertisingIdentifier(adID)\n}\n')),(0,r.mdx)(p,{platform:"ios",api:"set-advertising-identifier",repeat:"14",mdxType:"Variant"}),(0,r.mdx)("p",null,"In order to enable the collection of current advertising tracking user's selection based on the provided advertising identifier, you need to install and register the ",(0,r.mdx)("a",{parentName:"p",href:"../consent-for-edge-network/index.md"},"Consent for Edge Network")," extension and update the ",(0,r.mdx)("a",{parentName:"p",href:"../edge-network/index.md"},"Edge Network extension")," dependency to minimum 1.4.1."),(0,r.mdx)("p",null,"Starting from iOS 14+, applications must use the ",(0,r.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/apptrackingtransparency"},"App Tracking Transparency")," framework to request user authorization before using the Identifier for Advertising (IDFA). To access IDFA and handle it correctly in your mobile application, see the ",(0,r.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/adsupport/asidentifiermanager"},"Apple developer documentation about IDFA"),"."),(0,r.mdx)("h4",{id:"swift-5"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(setAdvertisingIdentifier:)\npublic static func setAdvertisingIdentifier(_ identifier: String?)\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"identifier")," is an ID string that provides developers with a simple, standard system to continue to track ads throughout their apps.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'import AdSupport\nimport AppTrackingTransparency\n...\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    ...\n    if #available(iOS 14, *) {\n       setAdvertisingIdentifierUsingTrackingManager()\n    } else {\n       // Fallback on earlier versions\n       setAdvertisingIdentifierUsingIdentifierManager()\n    }\n\n}\n\nfunc setAdvertisingIdentifierUsingIdentifierManager() {\n    var idfa:String = "";\n        if (ASIdentifierManager.shared().isAdvertisingTrackingEnabled) {\n            idfa = ASIdentifierManager.shared().advertisingIdentifier.uuidString;\n        } else {\n            Log.debug(label: "AppDelegateExample",\n                      "Advertising Tracking is disabled by the user, cannot process the advertising identifier.");\n        }\n        MobileCore.setAdvertisingIdentifier(idfa);\n}\n\n@available(iOS 14, *)\nfunc setAdvertisingIdentifierUsingTrackingManager() {\n    ATTrackingManager.requestTrackingAuthorization { (status) in\n        var idfa: String = "";\n\n        switch (status) {\n        case .authorized:\n            idfa = ASIdentifierManager.shared().advertisingIdentifier.uuidString\n        case .denied:\n            Log.debug(label: "AppDelegateExample",\n                      "Advertising Tracking is denied by the user, cannot process the advertising identifier.")\n        case .notDetermined:\n            Log.debug(label: "AppDelegateExample",\n                      "Advertising Tracking is not determined, cannot process the advertising identifier.")\n        case .restricted:\n            Log.debug(label: "AppDelegateExample",\n                      "Advertising Tracking is restricted by the user, cannot process the advertising identifier.")\n        }\n\n        MobileCore.setAdvertisingIdentifier(idfa)\n    }\n}\n')),(0,r.mdx)("h4",{id:"objective-c-5"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) setAdvertisingIdentifier: (NSString * _Nullable identifier);\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("em",{parentName:"li"},"identifier")," is an ID string that provides developers with a simple, standard system to continue to track ads throughout their apps.")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'#import <AdSupport/ASIdentifierManager.h>\n#import <AppTrackingTransparency/ATTrackingManager.h>\n...\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n-   ...\n-   \n    if (@available(iOS 14, *)) {\n        [self setAdvertisingIdentifierUsingTrackingManager];\n    } else {\n        // fallback to earlier versions\n        [self setAdvertisingIdentifierUsingIdentifierManager];\n    }\n\n}\n\n- (void) setAdvertisingIdentifierUsingIdentifierManager {\n    // setup the advertising identifier\n    NSString *idfa = nil;\n    if ([[ASIdentifierManager sharedManager] isAdvertisingTrackingEnabled]) {\n        idfa = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];\n    } else {\n        [AEPLog debugWithLabel:@"AppDelegateExample"\n                       message:@"Advertising Tracking is disabled by the user, cannot process the advertising identifier"];\n    }\n    [AEPMobileCore setAdvertisingIdentifier:idfa];\n\n}\n\n- (void) setAdvertisingIdentifierUsingTrackingManager API_AVAILABLE(ios(14)) {\n    [ATTrackingManager requestTrackingAuthorizationWithCompletionHandler:\n    ^(ATTrackingManagerAuthorizationStatus status){\n        NSString *idfa = nil;\n        switch(status) {\n            case ATTrackingManagerAuthorizationStatusAuthorized:\n                idfa = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];\n                break;\n            case ATTrackingManagerAuthorizationStatusDenied:\n                [AEPLog debugWithLabel:@"AppDelegateExample"\n                               message:@"Advertising Tracking is denied by the user, cannot process the advertising identifier"];\n                break;\n            case ATTrackingManagerAuthorizationStatusNotDetermined:\n                [AEPLog debugWithLabel:@"AppDelegateExample"\n                               message:@"Advertising Tracking is not determined, cannot process the advertising identifier"];\n                break;\n            case ATTrackingManagerAuthorizationStatusRestricted:\n                [AEPLog debugWithLabel:@"AppDelegateExample"\n                               message:@"Advertising Tracking is restricted by the user, cannot process the advertising identifier"];\n                break;\n        }\n\n        [AEPMobileCore setAdvertisingIdentifier:idfa];\n    }];\n}\n')),(0,r.mdx)(p,{platform:"android",api:"update-identities",repeat:"8",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-7"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void updateIdentities(final IdentityMap identityMap);\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'IdentityItem item = new IdentityItem("user@example.com");\nIdentityMap identityMap = new IdentityMap();\nidentityMap.addItem(item, "Email")\nIdentity.updateIdentities(identityMap);\n')),(0,r.mdx)("h4",{id:"kotlin-6"},"Kotlin"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'val item = IdentityItem("user@example.com")\nval identityMap = IdentityMap()\nidentityMap.addItem(item, "Email")\nIdentity.updateIdentities(identityMap)\n')),(0,r.mdx)(p,{platform:"ios",api:"update-identities",repeat:"10",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-6"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static func updateIdentities(with map: IdentityMap)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'let identityMap = IdentityMap()\nidentityMap.addItem(item: IdentityItem(id: "user@example.com"), withNamespace: "Email")\nIdentity.updateIdentities(with: identityMap)\n')),(0,r.mdx)("h4",{id:"objective-c-6"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) updateIdentities:(AEPIdentityMap * _Nonnull)map\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'AEPIdentityItem *item = [[AEPIdentityItem alloc] initWithId:@"user@example.com" authenticatedState:AEPAuthenticatedStateAuthenticated primary:false];\nAEPIdentityMap *map = [[AEPIdentityMap alloc] init];\n[map addItem:item withNamespace:@"Email"];\n[AEPMobileEdgeIdentity updateIdentities:map];\n')),(0,r.mdx)(p,{platform:"android",api:"identity-map",repeat:"6",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-8"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'// Construct\nIdentityMap identityMap = new IdentityMap();\n\n// Add an item\nIdentityItem item = new IdentityItem("user@example.com");\nidentityMap.addItem(item, "Email");\n\n// Remove an item\nIdentityItem item = new IdentityItem("user@example.com");\nidentityMap.removeItem(item, "Email");\n\n// Get a list of items for a given namespace\nList<IdentityItem> items = identityMap.getIdentityItemsForNamespace("Email");\n\n// Get a list of all namespaces used in current IdentityMap\nList<String> namespaces = identityMap.getNamespaces();\n\n// Check if IdentityMap has no identities\nboolean hasNotIdentities = identityMap.isEmpty();\n')),(0,r.mdx)("h4",{id:"kotlin-7"},"Kotlin"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'// Construct\nval identityMap = IdentityMap()\n\n// Add an item\nval item = IdentityItem("user@example.com")\nidentityMap.addItem(item, "Email")\n\n// Remove an item\nval item = IdentityItem("user@example.com")\nidentityMap.removeItem(item, "Email")\n\n// Get a list of items for a given namespace\nval items = identityMap.getIdentityItemsForNamespace("Email")\n\n// Get a list of all namespaces used in current IdentityMap\nval namespaces = identityMap.getNamespaces()\n\n// Check if IdentityMap has no identities\nval hasNotIdentities = identityMap.isEmpty()\n')),(0,r.mdx)(p,{platform:"ios",api:"identity-map",repeat:"6",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-7"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'// Initialize\nlet identityMap: IdentityMap = IdentityMap()\n\n// Add an item\nidentityMap.add(item: IdentityItem(id: "user@example.com"), withNamespace: "Email")\n\n// Remove an item\nidentityMap.remove(item: IdentityItem(id: "user@example.com", withNamespace: "Email"))\n\n// Get a list of items for a given namespace\nlet items: [IdentityItem] = identityMap.getItems(withNamespace: "Email")\n\n// Get a list of all namespaces used in current IdentityMap\nlet namespaces: [String] = identityMap.namespaces\n\n// Check if IdentityMap has no identities\nlet hasNoIdentities: Bool = identityMap.isEmpty\n')),(0,r.mdx)("h4",{id:"objective-c-7"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'// Initialize\nAEPIdentityMap* identityMap = [[AEPIdentityMap alloc] init];\n\n// Add an item\nAEPIdentityItem* item = [[AEPIdentityItem alloc] initWithId:@"user@example.com" authenticatedState:AEPAuthenticatedStateAuthenticated primary:false];\n[identityMap addItem:item withNamespace:@"Email"];\n\n// Remove an item\nAEPIdentityItem* item = [[AEPIdentityItem alloc] initWithId:@"user@example.com" authenticatedState:AEPAuthenticatedStateAuthenticated primary:false];\n[identityMap removeItem:item withNamespace:@"Email"];\n\n// Get a list of items for a given namespace\nNSArray<AEPIdentityItem*>* items = [identityMap getItemsWithNamespace:@"Email"];\n\n// Get a list of all namespaces used in current IdentityMap\nNSArray<NSString*>* namespaces = identityMap.namespaces;\n\n// Check if IdentityMap has no identities\nbool hasNoIdentities = identityMap.isEmpty;\n')),(0,r.mdx)(p,{platform:"android",api:"identity-item",repeat:"6",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-9"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'// Construct\nIdentityItem item = new IdentityItem("identifier");\n\nIdentityItem item = new IdentityItem("identifier", AuthenticatedState.AUTHENTICATED, false);\n\n\n// Getters\nString id = item.getId();\n\nAuthenticatedState state = item.getAuthenticatedState();\n\nboolean primary = item.isPrimary();\n')),(0,r.mdx)("h4",{id:"kotlin-8"},"Kotlin"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'// Construct\nval item = IdentityItem("identifier")\n\nval item = IdentityItem("identifier", AuthenticatedState.AUTHENTICATED, false)\n\n// Getters\nval id = item.id\n\nval state = item.authenticatedState\n\nval primary = item.isPrimary\n')),(0,r.mdx)(p,{platform:"ios",api:"identity-item",repeat:"6",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-8"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'// Initialize\nlet item = IdentityItem(id: "identifier")\n\nlet item = IdentityItem(id: "identifier", authenticatedState: .authenticated, primary: false)\n\n// Getters\nlet id: String = item.id\n\nlet state: AuthenticatedState = item.authenticatedState\n\nlet primary: Bool = item.primary\n')),(0,r.mdx)("h4",{id:"objective-c-8"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'// Initialize\nAEPIdentityItem* item = [[AEPIdentityItem alloc] initWithId:@"identity" authenticatedState:AEPAuthenticatedStateAuthenticated primary:false];\n\n// Getters\nNSString* id = primaryEmail.id;\n\nlong state = primaryEmail.authenticatedState;\n\nbool primary = primaryEmail.primary;\n')),(0,r.mdx)(p,{platform:"android",api:"authenticated-state",repeat:"6",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-10"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'public enum AuthenticatedState {\n    AMBIGUOUS("ambiguous"),\n    AUTHENTICATED("authenticated"),\n    LOGGED_OUT("loggedOut");\n}\n')),(0,r.mdx)("h4",{id:"kotlin-9"},"Kotlin"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'enum class AuthenticatedState(val name: String) {\n    AMBIGUOUS("ambiguous"),\n    AUTHENTICATED("authenticated"),\n    LOGGED_OUT("loggedOut")\n}\n')),(0,r.mdx)(p,{platform:"ios",api:"authenticated-state",repeat:"2",mdxType:"Variant"}),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(AEPAuthenticatedState)\npublic enum AuthenticatedState: Int, RawRepresentable, Codable {\n    case ambiguous = 0\n    case authenticated = 1\n    case loggedOut = 2\n}\n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=77bfce397aed6f28943d798a9117b28abe2e385b-da106719dd282e3dba38.js.map