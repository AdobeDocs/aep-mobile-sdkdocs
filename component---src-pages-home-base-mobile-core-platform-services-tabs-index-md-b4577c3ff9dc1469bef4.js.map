{"version":3,"file":"component---src-pages-home-base-mobile-core-platform-services-tabs-index-md-b4577c3ff9dc1469bef4.js","mappings":"4OAOsBA,E,wEADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAIQ,UAJA,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EAClB,GAEMG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGP,GAAK,YAER,OAAO,SAACI,GAAS,UAAKD,EAAiBH,EAAK,CAAEO,WAAYA,EAAYC,QAAQ,eAG5E,SAACT,EAAO,CAACU,SAAS,UAAUC,KAAK,SAASC,OAAO,IAAIH,QAAQ,aAC7D,eACE,GAAM,QAAM,SAEd,qBAAK,iBAAMI,WAAW,MAClB,UAAa,iBAAe,oFAGhC,SAACb,EAAO,CAACU,SAAS,MAAMC,KAAK,SAASC,OAAO,IAAIH,QAAQ,aACzD,eACE,GAAM,SAAO,UAEf,qBAAK,iBAAMI,WAAW,MAClB,UAAa,kBAAgB,wFAGjC,SAACb,EAAO,CAACU,SAAS,UAAUC,KAAK,WAAWC,OAAO,IAAIH,QAAQ,aAC/D,eACE,GAAM,UAAQ,SAEhB,oEAAqD,uBAAYI,WAAW,KAAG,WAAyB,kHACxG,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,0VAiBhC,oCAAqB,uBAAYA,WAAW,KAAG,qBAAmC,YAAY,uBAAYA,WAAW,KAAG,mBAAiC,oDACzJ,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,2EAGhC,qEAAsD,uBAAYA,WAAW,KAAG,kBAAgC,mDAAmD,uBAAYA,WAAW,KAAG,qBAAmC,UAChO,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,8DAGhC,SAACb,EAAO,CAACU,SAAS,MAAMC,KAAK,WAAWC,OAAO,IAAIH,QAAQ,aAC3D,eACE,GAAM,WAAS,UAEjB,mMAAoL,uBAAYI,WAAW,KAAG,SAAuB,MACrO,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBAAgB,2LAQjC,oCAAqB,uBAAYA,WAAW,KAAG,kBAAgC,mBAAmB,uBAAYA,WAAW,KAAG,mBAAiC,sBAC7J,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBAAgB,6DAGjC,qEAAsD,uBAAYA,WAAW,KAAG,kBAAgC,6CAChH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBAAgB,kDAKrC,CAEAN,EAAWO,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/home/base/mobile-core/platform-services/tabs/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" task=\"access\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`CacheService cacheService = ServiceProvider.getInstance().getCacheService();\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"access\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`private var cacheService: Caching { return ServiceProvider.shared.cacheService }\n`}</code></pre>\n    <Variant platform=\"android\" task=\"override\" repeat=\"7\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <p>{`First, implement a class that conforms to the `}<inlineCode parentName=\"p\">{`Logging`}</inlineCode>{` interface. Below is an example of a logging service that only prints out messages with a log level of Error.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`class ErrorLogger implements Logging {\n @Override\n public void trace(String tag, String message) {}\n\n @Override\n public void debug(String tag, String message) {}\n\n @Override\n public void warning(String tag, String message) {}\n\n @Override\n public void error(String tag, String message) {\n  Log.e(\"ErrorLogger\", message);\n }\n}\n`}</code></pre>\n    <p>{`Next, use the `}<inlineCode parentName=\"p\">{`setLoggingService`}</inlineCode>{` API of `}<inlineCode parentName=\"p\">{`ServiceProvider`}</inlineCode>{` to update the logging service used by the SDK.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`ServiceProvider.getInstance().setLoggingService(new ErrorLogger());\n`}</code></pre>\n    <p>{`To revert to the default implementation of the `}<inlineCode parentName=\"p\">{`LoggingService`}</inlineCode>{`, you can set the logging service to nil using `}<inlineCode parentName=\"p\">{`setLoggingService`}</inlineCode>{` API.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`ServiceProvider.getInstance().setLoggingService(null);\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"override\" repeat=\"7\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <p>{`First, implement a type that conforms to the Logging protocol, as defined above.  Below is an example of a logging service that only prints out messages with a log level of `}<inlineCode parentName=\"p\">{`Error`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class ErrorLogger: Logging {\n  func log(level: LogLevel, label: String, message: String) {\n    guard level == .error else { return }\n    print(\"\\\\(label): \\\\(message)\")\n  }\n}\n`}</code></pre>\n    <p>{`Next, set the `}<inlineCode parentName=\"p\">{`loggingService`}</inlineCode>{` on the shared `}<inlineCode parentName=\"p\">{`ServiceProvider`}</inlineCode>{` used by the SDK.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`ServiceProvider.shared.loggingService = ErrorLogger()\n`}</code></pre>\n    <p>{`To revert to the default implementation of the `}<inlineCode parentName=\"p\">{`LoggingService`}</inlineCode>{`, you can set the loggingService to nil.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`ServiceProvider.shared.loggingService = nil\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Variant","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","platform","task","repeat","parentName","isMDXComponent"],"sourceRoot":""}