"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[1607],{88851:function(e,a,n){n.r(a),n.d(a,{_frontmatter:function(){return d},default:function(){return u}});var t,s=n(87462),r=n(63366),l=(n(15007),n(64983)),i=n(91515),o=["components"],d={},m=(t="Variant",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.mdx)("div",e)}),p={_frontmatter:d},c=i.Z;function u(e){var a=e.components,n=(0,r.Z)(e,o);return(0,l.mdx)(c,(0,s.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,l.mdx)(m,{platform:"android",task:"obtain",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("p",null,"On Android, the web view is represented as ",(0,l.mdx)("inlineCode",{parentName:"p"},"WebView"),".  "),(0,l.mdx)("h4",{id:"java"},"Java"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"@Override\npublic boolean shouldShowMessage(FullscreenMessage fullscreenMessage) {\n  // access to the whole message from the parent\n  Message message = (Message) fullscreenMessage.getParent();\n      \n  WebView webView = message.getWebView();\n  \n  ...\n}\n")),(0,l.mdx)(m,{platform:"ios",task:"obtain",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("p",null,"On iOS, the web view is represented as ",(0,l.mdx)("inlineCode",{parentName:"p"},"WKWebView"),".  "),(0,l.mdx)("h4",{id:"swift"},"Swift"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"func shouldShowMessage(message: Showable) -> Bool {\n    // access to the whole message from the parent\n    let fullscreenMessage = message as? FullscreenMessage\n    let message = fullscreenMessage?.parent\n\n    let messageWebView = message?.view as? WKWebView\n\n    ...\n}\n")),(0,l.mdx)(m,{platform:"android",task:"call",repeat:"4",mdxType:"Variant"}),(0,l.mdx)("p",null,"With a reference to the ",(0,l.mdx)("inlineCode",{parentName:"p"},"WebView"),", the instance method ",(0,l.mdx)("inlineCode",{parentName:"p"},"public void evaluateJavascript(@NonNull String script, @Nullable ValueCallback<String> resultCallback)")," can now be leveraged to call a JavaScript method."),(0,l.mdx)("p",null,"Further details of this API are explained in the ",(0,l.mdx)("a",{parentName:"p",href:"https://developer.android.com/reference/android/webkit/WebView#evaluateJavascript(java.lang.String,%20android.webkit.ValueCallback%3Cjava.lang.String%3E)"},"Android documentation")," - the example below is provided for the purpose of demonstration:"),(0,l.mdx)("h4",{id:"java-1"},"Java"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'@Override\npublic boolean shouldShowMessage(FullscreenMessage fullscreenMessage) {\n  // access to the whole message from the parent\n  Message message = (Message) fullscreenMessage.getParent();\n      \n  WebView webView = message.getWebView();\n  // webview operations must be run on the ui thread\n  webView.post(new Runnable() {\n    @Override\n    public void run() {\n      webView.evaluateJavascript("startTimer()", new ValueCallback<String>() {\n        @Override\n        public void onReceiveValue(String s) {\n          // do something with the content\n        }\n      });\n    }\n  });\n  \n  ...\n}\n')),(0,l.mdx)(m,{platform:"ios",task:"call",repeat:"4",mdxType:"Variant"}),(0,l.mdx)("p",null,"With a reference to the ",(0,l.mdx)("inlineCode",{parentName:"p"},"WKWebView"),", the instance method ",(0,l.mdx)("inlineCode",{parentName:"p"},"evaluateJavaScript(_:completionHandler:)")," can now be leveraged to call a JavaScript method."),(0,l.mdx)("p",null,"Further details of this API are explained in the ",(0,l.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/webkit/wkwebview/1415017-evaluateJavaScript"},"Apple documentation")," - the example below is provided for the purpose of demonstration:"),(0,l.mdx)("h4",{id:"swift-1"},"Swift"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},'func shouldShowMessage(message: Showable) -> Bool {\n    // access to the whole message from the parent\n    let fullscreenMessage = message as? FullscreenMessage\n    let message = fullscreenMessage?.parent\n\n    // the `shouldShowMessage` delegate method is called on a background thread.\n    // need to dispatch code that uses the webview back to the main thread.\n    DispatchQueue.main.async {\n        let messageWebView = message?.view as? WKWebView\n\n        messageWebView?.evaluateJavaScript("startTimer();") { result, error in\n            if error != nil {\n                // handle error\n                return\n            }\n\n            if result != nil {\n                // do something with the result\n            }\n        }                \n    }\n\n    ...\n}\n')))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-edge-adobe-journey-optimizer-in-app-message-tutorials-tabs-javascript-from-native-md-066c3a0874dc177f0938.js.map