{"version":3,"file":"component---src-pages-home-base-mobile-core-lifecycle-index-md-d0d1bbbb66aa4ef7499b.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/home/base/mobile-core/lifecycle/index.md","webpack://dev-site-documentation-template/./src/pages/home/base/mobile-core/lifecycle/tabs/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Tabs from './tabs/index.md';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst TabsBlock = makeShortcode(\"TabsBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"lifecycle\"\n    }}>{`Lifecycle`}</h1>\n    <p>{`Sessions contain information about the app's current lifecycle, such as the device information, the application install or upgrade information, the session start and pause times, the number of application launches, and additional context data that is provided by the developer through the `}<inlineCode parentName=\"p\">{`LifecycleStart`}</inlineCode>{` API. Session data is persisted, so it is available across application launches.`}</p>\n    <h2 {...{\n      \"id\": \"add-lifecycle-to-your-app\"\n    }}>{`Add Lifecycle to your app`}</h2>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&task=add\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&task=add\" mdxType=\"Tabs\" />\n    {/*- React Native\n     <Tabs query=\"platform=react-native&task=add\"/>\n     Flutter\n     <Tabs query=\"platform=flutter&task=add\"/> -*/}\n    <h2 {...{\n      \"id\": \"register-lifecycle-with-mobile-core-and-add-appropriate-startpause-calls\"\n    }}>{`Register Lifecycle with Mobile Core and add appropriate Start/Pause calls`}</h2>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&task=register\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&task=register\" mdxType=\"Tabs\" />\n    {/*- React Native\n     <Tabs query=\"platform=react-native&task=register\"/> -*/}\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst InlineNestedAlert = makeShortcode(\"InlineNestedAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" task=\"add\" repeat=\"8\" mdxType=\"Variant\" />\n    <ol>\n      <li parentName=\"ol\">{`Add the Lifecycle extension and its dependency, the `}<a parentName=\"li\" {...{\n          \"href\": \"../index.md\"\n        }}>{`Mobile Core`}</a>{` extension to your project using the app's Gradle file.`}</li>\n    </ol>\n    <h4 {...{\n      \"id\": \"kotlin\"\n    }}>{`Kotlin`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`implementation(platform(\"com.adobe.marketing.mobile:sdk-bom:3.+\"))\nimplementation(\"com.adobe.marketing.mobile:core\")\nimplementation(\"com.adobe.marketing.mobile:lifecycle\")\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"groovy\"\n    }}>{`Groovy`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`implementation platform('com.adobe.marketing.mobile:sdk-bom:3.+')\nimplementation 'com.adobe.marketing.mobile:core'\nimplementation 'com.adobe.marketing.mobile:lifecycle'\n`}</code></pre>\n    <InlineNestedAlert variant=\"warning\" header=\"false\" iconPosition=\"left\" mdxType=\"InlineNestedAlert\">\n      <p>{`Using dynamic dependency versions is `}<strong parentName=\"p\">{`not`}</strong>{` recommended for production apps. Please read the `}<a parentName=\"p\" {...{\n          \"href\": \"../../../resources/manage-gradle-dependencies.md\"\n        }}>{`managing Gradle dependencies guide`}</a>{` for more information.`}</p>\n    </InlineNestedAlert>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Import the Lifecycle and MobileCore extensions in your application's main activity.`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import com.adobe.marketing.mobile.MobileCore;\nimport com.adobe.marketing.mobile.Lifecycle;\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"add\" repeat=\"8\" mdxType=\"Variant\" />\n    <ol>\n      <li parentName=\"ol\">{`Add the AEPLifecycle extension and its dependency, the `}<a parentName=\"li\" {...{\n          \"href\": \"../index.md\"\n        }}>{`Mobile Core`}</a>{` extension, to your project using Cocoapods.`}</li>\n    </ol>\n    <p>{`Add the following pods in your `}<inlineCode parentName=\"p\">{`Podfile`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-pod\"\n      }}>{`pod 'AEPCore', '~> 5.0'\npod 'AEPLifecycle', '~> 5.0'\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Import the Lifecycle library:`}</li>\n    </ol>\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import AEPCore\nimport AEPLifecycle\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`@import AEPCore;\n@import AEPLifecycle;\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" task=\"add\" repeat=\"3\"/>\n     #### JavaScript\n     Import the Lifecycle extension\n     ```jsx\n     import {ACPLifecycle} from '@adobe/react-native-acpcore';\n     ```\n     <Variant platform=\"flutter\" task=\"add\" repeat=\"3\"/>\n     #### Dart\n     Import the Lifecycle extension\n     ```dart\n     import 'package:flutter_acpcore/flutter_acplifecycle.dart';\n     ``` -*/}\n    <Variant platform=\"android\" task=\"register\" repeat=\"9\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <ol>\n      <li parentName=\"ol\">{`Register the Lifecycle extension:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class MobileApp extends Application {\n@Override\npublic void onCreate() {\nsuper.onCreate();\n     MobileCore.setApplication(this);\n     List<Class<? extends Extension>> extensions = Arrays.asList(Lifecycle.EXTENSION, ...);\n     MobileCore.registerExtensions(extensions, o -> {\n        // Any other post registration processing\n    });\n  }\n}\n\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`In the `}<inlineCode parentName=\"li\">{`onResume`}</inlineCode>{` function, start the lifecycle data collection:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`    @Override\n    public void onResume() {\n        MobileCore.setApplication(getApplication());\n        MobileCore.lifecycleStart(null);\n    }\n`}</code></pre>\n    <p>{`Setting the application is only necessary on activities that are entry points for your application. However, setting the application on each Activity has no negative impact and ensures that the SDK always has the necessary reference to your application. We recommend that you call `}<inlineCode parentName=\"p\">{`setApplication`}</inlineCode>{`in each of your activities.`}</p>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`In the `}<inlineCode parentName=\"li\">{`onPause`}</inlineCode>{` function, pause the lifecycle data collection:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`    @Override\n    public void onPause() {\n        MobileCore.lifecyclePause();\n    }\n`}</code></pre>\n    <p>{`To ensure accurate session and crash reporting, this call must be added to every activity.`}</p>\n    <Variant platform=\"ios\" task=\"register\" repeat=\"32\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <ol>\n      <li parentName=\"ol\">{`Register the Lifecycle extension with the SDK Core by adding the following to your app's `}<inlineCode parentName=\"li\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` delegate method. This will register the extension with Core and begin Lifecycle event processing:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    MobileCore.registerExtensions([Lifecycle.self, ...], {\n        ...\n    }\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Start Lifecycle data collection by calling `}<inlineCode parentName=\"li\">{`lifecycleStart:`}</inlineCode>{` from within the callback of the `}<inlineCode parentName=\"li\">{`MobileCore.registerExtensions`}</inlineCode>{` method in your app's `}<inlineCode parentName=\"li\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` delegate method.`}</li>\n    </ol>\n    <p>{`If your iOS application supports background capabilities, your `}<inlineCode parentName=\"p\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` method might be called when iOS launches your app in the background. If you do not want background launches to count towards your lifecycle metrics, then `}<inlineCode parentName=\"p\">{`lifecycleStart:`}</inlineCode>{` should only be called when the application state is not equal to `}<inlineCode parentName=\"p\">{`UIApplicationStateBackground`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n    let appState = application.applicationState\n    MobileCore.registerExtensions([Lifecycle.self, ...], {\n        if appState != .background {\n        // only start lifecycle if the application is not in the background\n        MobileCore.lifecycleStart(additionalContextData: nil)\n        }\n    }\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`When launched, if your app is resuming from a backgrounded state, iOS might call your `}<inlineCode parentName=\"li\">{`applicationWillEnterForeground:`}</inlineCode>{` delegate method. You also need to call `}<inlineCode parentName=\"li\">{`lifecycleStart:`}</inlineCode>{`, but this time you do not need all of the supporting code that you used in `}<inlineCode parentName=\"li\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{`:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func applicationWillEnterForeground(_ application: UIApplication) {\n    MobileCore.lifecycleStart(additionalContextData: nil)\n}\n`}</code></pre>\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`sceneWillEnterForeground`}</inlineCode>{` method as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func sceneWillEnterForeground(_ scene: UIScene) {\n    MobileCore.lifecycleStart(additionalContextData: nil)\n}\n`}</code></pre>\n    <p>{`For more information on handling foregrounding applications with Scenes, refer to Apple's documentation `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_foreground\"\n      }}>{`here`}</a></p>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`When the app enters the background, pause Lifecycle data collection from your app's `}<inlineCode parentName=\"li\">{`applicationDidEnterBackground:`}</inlineCode>{` delegate method:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func applicationDidEnterBackground(_ application: UIApplication) {\n    MobileCore.lifecyclePause()\n}\n`}</code></pre>\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`sceneDidEnterBackground`}</inlineCode>{` method as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func sceneDidEnterBackground(_ scene: UIScene) {\n    MobileCore.lifecyclePause()\n}\n`}</code></pre>\n    <p>{`For more information on handling backgrounding applications with Scenes, refer to Apple's documentation `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background\"\n      }}>{`here`}</a></p>\n    <h4 {...{\n      \"id\": \"objective-c-1\"\n    }}>{`Objective-C`}</h4>\n    <ol>\n      <li parentName=\"ol\">{`Register the Lifecycle extension with the SDK Core by adding the following to your app's `}<inlineCode parentName=\"li\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` delegate method. This will register the extension with Core and begin Lifecycle event processing:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    // register the lifecycle extension\n[AEPMobileCore registerExtensions:@[AEPMobileLifecycle.class, ...] completion:^{\n    ...\n}];\nreturn YES;\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Start Lifecycle data collection by calling `}<inlineCode parentName=\"li\">{`lifecycleStart:`}</inlineCode>{` from within the callback of the `}<inlineCode parentName=\"li\">{`AEPMobileCore::registerExtensions:`}</inlineCode>{` method in your app's `}<inlineCode parentName=\"li\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` delegate method.`}</li>\n    </ol>\n    <p>{`If your iOS application supports background capabilities, your `}<inlineCode parentName=\"p\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` method might be called when iOS launches your app in the background. If you do not want background launches to count towards your lifecycle metrics, then `}<inlineCode parentName=\"p\">{`lifecycleStart:`}</inlineCode>{` should only be called when the application state is not equal to `}<inlineCode parentName=\"p\">{`UIApplicationStateBackground`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (BOOL) application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    // register the lifecycle extension, and begin event processing with Core\n    const UIApplicationState appState = application.applicationState;\n    [AEPMobileCore registerExtensions:@[AEPMobileLifecycle.class, ...] completion:^{\n    // only start lifecycle if the application is not in the background\n    if (appState != UIApplicationStateBackground) {\n        [AEPMobileCore lifecycleStart:nil];\n    }\n    }];\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`When launched, if your app is resuming from a backgrounded state, iOS might call your `}<inlineCode parentName=\"li\">{`applicationWillEnterForeground:`}</inlineCode>{` delegate method. You also need to call `}<inlineCode parentName=\"li\">{`lifecycleStart:`}</inlineCode>{`, but this time you do not need all of the supporting code that you used in `}<inlineCode parentName=\"li\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{`:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) applicationWillEnterForeground:(UIApplication *)application {\n    [AEPMobileCore lifecycleStart:nil];\n}\n`}</code></pre>\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`sceneWillEnterForeground`}</inlineCode>{` method as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) sceneWillEnterForeground:(UIScene *)scene {\n    [AEPMobileCore lifecycleStart:nil];\n}\n`}</code></pre>\n    <p>{`For more information on handling foregrounding applications with Scenes, refer to Apple's documentation `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_foreground\"\n      }}>{`here`}</a></p>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`When the app enters the background, pause Lifecycle data collection from your app's `}<inlineCode parentName=\"li\">{`applicationDidEnterBackground:`}</inlineCode>{` delegate method:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) applicationDidEnterBackground:(UIApplication *)application {\n    [AEPMobileCore lifecyclePause];\n}\n`}</code></pre>\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`sceneDidEnterBackground`}</inlineCode>{` method as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) sceneDidEnterBackground:(UIScene *)scene {\n    [AEPMobileCore lifecyclePause];\n}\n`}</code></pre>\n    <p>{`For more information on handling backgrounding applications with Scenes, refer to Apple's documentation `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background\"\n      }}>{`here`}</a></p>\n    {/*- <Variant platform=\"react-native\" task=\"register\" repeat=\"2\"/>\n     **Registering the extension with Core**\n     When using React Native, registering Lifecycle with Mobile Core should be done in native code which is shown under the Android and iOS (ACP 2.x) tabs. -*/}\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","TabsBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","orientation","slots","repeat","query","isMDXComponent","makeShortcode","Variant","InlineNestedAlert","platform","task","variant","header","iconPosition"],"sourceRoot":""}