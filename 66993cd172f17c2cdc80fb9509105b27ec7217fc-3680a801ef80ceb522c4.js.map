{"version":3,"file":"66993cd172f17c2cdc80fb9509105b27ec7217fc-3680a801ef80ceb522c4.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/documentation/edge-network/tabs/api-reference.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" api=\"extension-version\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static String extensionVersion();\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`String extensionVersion = Edge.extensionVersion();\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"extension-version\" repeat=\"10\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static let extensionVersion\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let extensionVersion = Edge.extensionVersion\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (nonnull NSString*) extensionVersion;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`NSString *extensionVersion = [AEPMobileEdge extensionVersion];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"get-location-hint\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void getLocationHint(final AdobeCallback<String> callback)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`callback`}</em>{` is invoked with the location hint. The location hint value may be null if the location hint expired or was not set. The callback may be invoked on a different thread. If `}<inlineCode parentName=\"li\">{`AdobeCallbackWithError`}</inlineCode>{` is provided, the default timeout is 1000ms and the `}<inlineCode parentName=\"li\">{`fail`}</inlineCode>{` method is called if the operation times out or an unexpected error occurs.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Edge.getLocationHint(new AdobeCallbackWithError<String>() {\n    @Override\n    public void call(final String hint) {\n        // handle the hint here\n    }\n\n    @Override\n    public void fail(AdobeError adobeError) {\n        // handle error here\n    }\n});\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"get-location-hint\" repeat=\"11\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func getLocationHint(completion: @escaping (String?, Error?) -> Void)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`completion`}</em>{` is invoked with the location hint, or an `}<inlineCode parentName=\"li\">{`AEPError`}</inlineCode>{` if the request times out or an unexpected error occurs. The location hint value may be nil if the location hint expired or was not set. The default timeout is 1000ms. The completion handler may be invoked on a different thread.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`Edge.getLocationHint { (hint, error) in\n  if let error = error {\n    // handle error here\n  } else {\n    // handle location hint here\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-1\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) getLocationHint:^(NSString * _Nullable hint, NSError * _Nullable error)completion\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`[AEPMobileEdge getLocationHint:^(NSString *hint, NSError *error) {   \n    // handle the error and the hint here\n}];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"register-extension\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-2\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void registerExtension();\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Edge.registerExtension();\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"register-extension\" repeat=\"12\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-2\"\n    }}>{`Swift`}</h4>\n    <p>{`Use the MobileCore API to register the Edge extension.`}</p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`// MobileCore\npublic static func registerExtensions(_ extensions: [Extension.Type], _ completion: (() -> Void)? = nil)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import AEPEdge\n\n...\nMobileCore.registerExtensions([Edge.self, ...], {\n  // processing after registration\n})\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-2\"\n    }}>{`Objective-C`}</h4>\n    <p>{`Use the AEPMobileCore API to register the Edge extension.`}</p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) registerExtensions: (NSArray<Class*>* _Nonnull) extensions \n                  completion: (void (^ _Nullable)(void)) completion;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`@import AEPEdge;\n\n[AEPMobileCore registerExtensions:@[AEPMobileEdge.class] completion:nil];...\n\n`}</code></pre>\n    <Variant platform=\"android\" api=\"send-event\" repeat=\"8\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-3\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void sendEvent(final ExperienceEvent experienceEvent, final EdgeCallback callback);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`experienceEvent`}</em>{` - the XDM `}<a parentName=\"li\" {...{\n          \"href\": \"#experienceevent\"\n        }}>{`Experience Event`}</a>{` to be sent to Adobe Experience Platform Edge Network`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`completion`}</em>{` - optional callback to be invoked when the request is complete, returning the associated `}<a parentName=\"li\" {...{\n          \"href\": \"#edgeeventhandle\"\n        }}>{`EdgeEventHandle(s)`}</a>{` received from the Adobe Experience Platform Edge Network. It may be invoked on a different thread.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// create experience event from Map\nMap<String, Object> xdmData = new HashMap<>();\nxdmData.put(\"eventType\", \"SampleXDMEvent\");\nxdmData.put(\"sample\", \"data\");\n    \nExperienceEvent experienceEvent = new ExperienceEvent.Builder()\n  .setXdmSchema(xdmData)\n  .build();\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// example 1 - send the experience event without handling the Edge Network response\nEdge.sendEvent(experienceEvent, null);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// example 2 - send the experience event and handle the Edge Network response onComplete\nEdge.sendEvent(experienceEvent, new EdgeCallback() {\n  @Override\n  public void onComplete(final List<EdgeEventHandle> handles) {\n        // handle the Edge Network response \n  }\n});\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"send-event\" repeat=\"15\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-3\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func sendEvent(experienceEvent: ExperienceEvent, _ completion: (([EdgeEventHandle]) -> Void)? = nil)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`experienceEvent`}</em>{` - the XDM `}<a parentName=\"li\" {...{\n          \"href\": \"#experienceevent\"\n        }}>{`Experience Event`}</a>{` to be sent to Adobe Experience Platform Edge Network`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`completion`}</em>{` - optional callback to be invoked when the request is complete, returning the associated `}<a parentName=\"li\" {...{\n          \"href\": \"#edgeeventhandle\"\n        }}>{`EdgeEventHandle(s)`}</a>{` received from the Adobe Experience Platform Edge Network. It may be invoked on a different thread.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`//create experience event from dictionary:\nvar xdmData : [String: Any] = [\"eventType\" : \"SampleXDMEvent\",\n                              \"sample\": \"data\"]\nlet experienceEvent = ExperienceEvent(xdm: xdmData)\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`// example 1 - send the experience event without handling the Edge Network response\nEdge.sendEvent(experienceEvent: experienceEvent)\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`// example 2 - send the experience event and handle the Edge Network response onComplete\nEdge.sendEvent(experienceEvent: experienceEvent) { (handles: [EdgeEventHandle]) in\n            // handle the Edge Network response\n        }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-3\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) sendExperienceEvent:(AEPExperienceEvent * _Nonnull) completion:^(NSArray<AEPEdgeEventHandle *> * _Nonnull)completion\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`//create experience event from dictionary:\nNSDictionary *xdmData = @{ @\"eventType\" : @\"SampleXDMEvent\"};\nNSDictionary *data = @{ @\"sample\" : @\"data\"};\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`// example 1 - send the experience event without handling the Edge Network response\n[AEPMobileEdge sendExperienceEvent:event completion:nil];\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`// example 2 - send the experience event and handle the Edge Network response onComplete\n[AEPMobileEdge sendExperienceEvent:event completion:^(NSArray<AEPEdgeEventHandle *> * _Nonnull handles) {\n  // handle the Edge Network response\n}];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"set-location-hint\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-4\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void setLocationHint(final String hint)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`hint`}</em>{` the Edge Network location hint to use when connecting to the Adobe Experience Platform Edge Network.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Edge.setLocationHint(hint);\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"set-location-hint\" repeat=\"11\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-4\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`@objc(setLocationHint:)\npublic static func setLocationHint(_ hint: String?)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`hint`}</em>{` the Edge Network location hint to use when connecting to the Adobe Experience Platform Edge Network.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`Edge.setLocationHint(hint)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-4\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) setLocationHint: (NSString * _Nullable hint);\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`[AEPMobileEdge setLocationHint:hint];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"xdm-schema\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-5\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`/**\n * The interface that represents an Experience XDM event data schema.\n */\npublic interface Schema {\n\n    /**\n     * Returns the version of this schema as defined in the Adobe Experience Platform.\n     * @return the version of this schema.\n     */\n    String getSchemaVersion();\n\n    /**\n     * Returns the identifier for this schema as defined in the Adobe Experience Platform.\n     * The identifier is a URI where this schema is defined.\n     * @return the URI identifier for this schema.\n     */\n    String getSchemaIdentifier();\n\n    /**\n     * Returns the identifier for this dataset as defined in the Adobe Experience Platform.\n     * @return the dataset ID\n     */\n    String getDatasetIdentifier();\n\n    /**\n     * Serialize this {@code Schema} object to a map with the same format as its XDM schema.\n     * @return the XDM-formatted map of this {@code Schema} object.\n     */\n    Map<String, Object> serializeToXdm();\n}\n`}</code></pre>\n    <p>{`By implementing the `}<strong parentName=\"p\">{`Property`}</strong>{` interface, you can define complex properties for your XDM Schema. A complex property is defined as not being a primitive type, String, or Date.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public interface Property {\n\n    /**\n     * Serialize this {@code Property} object to a map with the same format as its XDM schema.\n     * @return XDM-formatted map of this {@code Property} object.\n     */\n    Map<String, Object> serializeToXdm();\n}\n`}</code></pre>\n    <p>{`When defining your custom XDM schema(s), implement these interfaces to ensure that the AEP Edge extension successfully serializes the provided data before sending it to Adobe Experience Platform Edge Network.`}</p>\n    <Variant platform=\"ios-aep\" api=\"xdm-schema\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-5\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`/// An interface representing a Platform XDM Event Data schema.\npublic protocol XDMSchema: Encodable {\n\n    /// Returns the version of this schema as defined in the Adobe Experience Platform.\n    /// - Returns: The version of this schema\n    var schemaVersion: String { get }\n\n    /// Returns the identifier for this schema as defined in the Adobe Experience Platform.\n    /// The identifier is a URI where this schema is defined.\n    /// - Returns: The URI identifier for this schema\n    var schemaIdentifier: String { get }\n\n    /// Returns the identifier for this dataset as defined in the Adobe Experience Platform.\n    /// This is a system generated identifier for the Dataset the event belongs to.\n    /// - Returns: The  identifier as a String for this dataset\n    var datasetIdentifier: String { get }\n}\n`}</code></pre>\n    <Variant platform=\"android\" api=\"edge-event-handle\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-6\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`/**\n * The {@link EdgeEventHandle} is a response fragment from Adobe Experience Edge Service for a sent XDM Experience Event.\n * One event can receive none, one or multiple {@link EdgeEventHandle}(s) as response.\n */\npublic class EdgeEventHandle {\n  /**\n     * @return the payload type or null if not found in the {@link JSONObject} response\n     */\n  public String getType() {...}\n\n  /**\n     * @return the event payload values for this {@link EdgeEventHandle} or null if not found in the {@link JSONObject} response\n     */\n  public List<Map<String, Object>> getPayload() {...}\n}\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"edge-event-handle\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-6\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`@objc(AEPEdgeEventHandle)\npublic class EdgeEventHandle: NSObject, Codable {\n    /// Payload type\n    @objc public let type: String?\n\n    /// Event payload values\n    @objc public let payload: [[String: Any]]?\n}\n`}</code></pre>\n    <Variant platform=\"android\" api=\"experience-event\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-7\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-Java\"\n      }}>{`public final class ExperienceEvent {\n\n  public static class Builder {\n    ...\n\n    public Builder() {\n      ...\n    }\n\n    /**\n      * Sets free form data associated with this event to be passed to Adobe Experience Edge.\n      *\n      * @param data free form data, JSON like types are accepted\n      * @return instance of current builder\n      * @throws UnsupportedOperationException if this instance was already built\n      */\n    public Builder setData(final Map<String, Object> data) {...}\n\n    /**\n      * Solution specific XDM event data for this event.\n      *\n      * @param xdm {@link Schema} information\n      * @return instance of current builder\n      * @throws UnsupportedOperationException if this instance was already built\n      */\n    public Builder setXdmSchema(final Schema xdm) {...}\n\n    /**\n      * Solution specific XDM event data and dataset identifier for this event.\n      *\n      * @param xdm {@code Map<String, Object>} of raw XDM schema data\n      * @param datasetIdentifier The Experience Platform dataset identifier where this event is sent.\n      *                          If not provided, the default dataset defined in the configuration ID is used\n      * @return instance of current builder\n      * @throws UnsupportedOperationException if this instance was already built\n      */\n    public Builder setXdmSchema(final Map<String, Object> xdm, final String datasetIdentifier) {...}\n\n    /**\n      * Solution specific XDM event data for this event, passed as raw mapping of keys and\n      * Object values.\n      *\n      * @param xdm {@code Map<String, Object>} of raw XDM schema data\n      * @return instance of current builder\n      * @throws UnsupportedOperationException if this instance was already built\n      */\n    public Builder setXdmSchema(final Map<String, Object> xdm) {...}\n\n    /**\n      * Builds and returns a new instance of {@code ExperienceEvent}.\n      *\n      * @return a new instance of {@code ExperienceEvent} or null if one of the required parameters is missing\n      * @throws UnsupportedOperationException if this instance was already built\n      */\n    public ExperienceEvent build() {...}\n  }\n\n  public Map<String, Object> getData() {...}\n\n  public Map<String, Object> getXdmSchema() {...} \n}  \n`}</code></pre>\n    <p><strong parentName=\"p\">{`Examples`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`//Example 1\n// set freeform data to the Experience event\nMap<String, Object> xdmData = new HashMap<>();\nxdmData.put(\"eventType\", \"SampleXDMEvent\");\nxdmData.put(\"sample\", \"data\");\n\nMap<String, Object> data = new HashMap<>();\ndata.put(\"free\", \"form\");\ndata.put(\"data\", \"example\");\n\nExperienceEvent experienceEvent = new ExperienceEvent.Builder()\n  .setXdmSchema(xdmData)\n  .setData(data)\n  .build();\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`//Example 2\n// Create Experience Event from XDM Schema implementations\npublic class XDMSchemaExample implements com.adobe.marketing.mobile.xdm.Schema {\n  private String eventType;\n  private String otherField;\n      ...\n\n      public String getEventType() {\n        return this.eventType;\n      }\n\n      public void setEventType(final String newValue) {\n        this.eventType = newValue;\n      }\n\n      public String getOtherField() {\n        return this.otherField;\n      }\n\n      public void setOtherField(final String newValue) {\n        this.otherField = newValue;\n      }\n      }\n\n// Create Experience Event from Schema\nXDMSchemaExample xdmData = new XDMSchemaExample();\nxdmData.setEventType(\"SampleXDMEvent\");\nxdmData.setOtherField(\"OtherFieldValue\");\n\nExperienceEvent experienceEvent = new ExperienceEvent.Builder()\n  .setXdmSchema(xdmData)\n  .build();\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`//Example 3\n// Set the destination Dataset identifier to the current Experience event:\nMap<String, Object> xdmData = new HashMap<>();\nxdmData.put(\"eventType\", \"SampleXDMEvent\");\nxdmData.put(\"sample\", \"data\");\n\nExperienceEvent experienceEvent = new ExperienceEvent.Builder()\n  .setXdmSchema(xdmData, \"datasetIdExample\")\n  .build();\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"experience-event\" repeat=\"10\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`@objc(AEPExperienceEvent)\npublic class ExperienceEvent: NSObject {\n\n    /// XDM formatted data, use an \\`XDMSchema\\` implementation for a better XDM data injection and format control\n    @objc public let xdm: [String: Any]?\n\n    /// Optional free-form data associated with this event\n    @objc public let data: [String: Any]?\n\n    /// Adobe Experience Platform dataset identifier, if not set the default dataset identifier set in the Edge Configuration is used\n    @objc public let datasetIdentifier: String?\n\n    /// Initialize an Experience Event with the provided event data\n    /// - Parameters:\n    ///   - xdm:  XDM formatted data for this event, passed as a raw XDM Schema data dictionary.\n    ///   - data: Any free form data in a [String : Any] dictionary structure.\n    ///   - datasetIdentifier: The Experience Platform dataset identifier where this event should be sent to; if not provided, the default dataset identifier set in the Edge configuration is used\n    @objc public init(xdm: [String: Any], data: [String: Any]? = nil, datasetIdentifier: String? = nil) {...}\n\n    /// Initialize an Experience Event with the provided event data\n    /// - Parameters:\n    ///   - xdm: XDM formatted event data passed as an XDMSchema\n    ///   - data: Any free form data in a [String : Any] dictionary structure.\n    public init(xdm: XDMSchema, data: [String: Any]? = nil) {...}\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"swift-7\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Examples`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`//Example 1\n// set freeform data to the Experience event\nvar xdmData : [String: Any] = [\"eventType\" : \"SampleXDMEvent\",\n                              \"sample\": \"data\"]\n\nlet experienceEvent = ExperienceEvent(xdm: xdmData, data: [\"free\": \"form\", \"data\": \"example\"])\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`//Example 2\n// Create Experience Event from XDM Schema implementations\nimport AEPEdge\n\npublic struct XDMSchemaExample : XDMSchema {\n    public let schemaVersion = \"1.0\" // Returns the version of this schema as defined in the Adobe Experience Platform.\n    public let schemaIdentifier = \"\" // The URI identifier for this schema\n    public let datasetIdentifier = \"\" // The identifier for the Dataset this event belongs to.\n\n    public init() {}\n\n    public var eventType: String?\n    public var otherField: String?\n\n    enum CodingKeys: String, CodingKey {\n    case eventType = \"eventType\"\n    case otherField = \"otherField\"\n    }       \n}\n\nextension XDMSchemaExample {\n    public func encode(to encoder: Encoder) throws {\n      var container = encoder.container(keyedBy: CodingKeys.self)\n      if let unwrapped = eventType { try container.encode(unwrapped, forKey: .eventType) }\n      if let unwrapped = otherField { try container.encode(unwrapped, forKey: .otherField) }\n    }\n}\n...\n\n// Create Experience Event from XDMSchema\nvar xdmData = XDMSchemaExample()\nxdmData.eventType = \"SampleXDMEvent\"\nxdm.otherField = \"OtherFieldValue\"\nlet event = ExperienceEvent(xdm: xdmData)\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`//Example 3\n// Set the destination Dataset identifier to the current Experience event:\nvar xdmData : [String: Any] = [\"eventType\" : \"SampleXDMEvent\",\n                              \"sample\": \"data\"]\n\nlet experienceEvent = ExperienceEvent(xdm: xdmData, datasetIdentifier: \"datasetIdExample\")\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-5\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Examples`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`//Example 1\n// set freeform data to the Experience event\nNSDictionary *xdmData = @{ @\"eventType\" : @\"SampleXDMEvent\"};\nNSDictionary *data = @{ @\"sample\" : @\"data\"};\n    \n    AEPExperienceEvent *event = [[AEPExperienceEvent alloc] initWithXdm:xdmData data:data datasetIdentifier:nil];\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`//Example 2\n// Set the destination Dataset identifier to the current Experience event:\nNSDictionary *xdmData = @{ @\"eventType\" : @\"SampleXDMEvent\"};\n   \nAEPExperienceEvent *event = [[AEPExperienceEvent alloc] initWithXdm:xdmData data:nil datasetIdentifier:@\"datasetIdExample\"];\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Variant","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","platform","api","repeat","parentName","isMDXComponent"],"sourceRoot":""}