{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-content-card-ui-android-tutorial-customizing-content-card-templates-md-ae8e6b85ccd95e74a986.js","mappings":"4OAOsBA,E,wEADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAIU,YAJF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EAClB,GAEMG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGP,GAAK,YAER,OAAO,SAACI,GAAS,UAAKD,EAAiBH,EAAK,CAAEO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,4CAA0C,6CAElD,2GACA,eACE,GAAM,YAAU,aAElB,iGAAkF,cAAGC,WAAW,IAC5F,KAAQ,oEAAkE,qBAChD,sLAC9B,eACE,GAAM,qEAAmE,oDACpB,uBAAYA,WAAW,MAAI,uBAClF,uFACA,oBACE,eAAIA,WAAW,MAAI,iCAAkC,uBAAYA,WAAW,MAAI,YAA0B,uGAAuG,cAAGA,WAAW,KAC3N,KAAQ,8CAA4C,kBAC7B,qIAAqI,uBAAYA,WAAW,MAAI,YAA0B,MACrN,eAAIA,WAAW,MAAI,8FAA+F,uBAAYA,WAAW,MAAI,qBAAmC,OAElL,0DACA,SAACV,EAAS,CAACW,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,SAASJ,QAAQ,eACvE,eACE,GAAM,UAAQ,WAEhB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,mBAAiB,u7CAsCtC,CAEAH,EAAWO,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/content-card-ui/Android/tutorial/customizing-content-card-templates.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"customizing-content-card-templates-style\"\n    }}>{`Customizing Content Card Templates style`}</h1>\n    <p>{`This tutorial explains how to customize the UI of content cards in your application.`}</p>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`The Messaging extension provides a way to customize content cards by using `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.android.com/develop/ui/compose/modifiers?hl=en\"\n      }}>{`Compose modifiers`}</a>{` in conjunction with additional parameters provided when creating a style object. Refer to each individual style class to see the customizable settings available for each style.`}</p>\n    <h2 {...{\n      \"id\": \"setting-custom-style-parameters-when-creating-a-smallimageuistyle\"\n    }}>{`Setting custom style parameters when creating a `}<inlineCode parentName=\"h2\">{`SmallImageUIStyle`}</inlineCode></h2>\n    <p>{`Perform the following steps to customize content card templates:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Create a style object with a `}<inlineCode parentName=\"li\">{`Modifier`}</inlineCode>{` passing in any additional customizations as part of the constructor parameters. If customizing an `}<a parentName=\"li\" {...{\n          \"href\": \"../public-classes/styles/aepbuttonstyle.md\"\n        }}>{`AepButtonStyle`}</a>{`, for example, you may pass customizations such as the enabled state, elevation, shape, border, color, and padding alongside the `}<inlineCode parentName=\"li\">{`Modifier`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`Use the created style object when invoking the builder of the template style object (e.g. `}<inlineCode parentName=\"li\">{`SmallImageUIStyle`}</inlineCode>{`)`}</li>\n    </ol>\n    <p>{`Below is an example implementation:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Kotlin\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"kotlin\"\n    }}>{`Kotlin`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`// create a custom style for the small image card in row\nval smallImageCardStyleRow = SmallImageUIStyle.Builder()\n    .cardStyle(AepCardStyle(modifier = Modifier.width(400.dp).height(200.dp)))\n  .rootRowStyle(AepRowStyle(modifier = Modifier.fillMaxSize()))\n    .imageStyle(AepImageStyle(modifier = Modifier.width(100.dp).height(100.dp)))\n    .buttonRowStyle(AepRowStyle(modifier = Modifier.fillMaxSize()))\n    .buttonStyle(\n    arrayOf(\n      Pair(\n      AepButtonStyle(modifier = Modifier.padding(8.dp)),\n      AepTextStyle(textStyle = TextStyle(color = Color.Green, fontSize = 16.sp)))))\n    .dismissButtonStyle(AepIconStyle(modifier = Modifier.padding(8.dp)))\n  .dismissButtonAlignment(Alignment.TopEnd)\n    .textColumnStyle(AepColumnStyle(modifier = Modifier.fillMaxSize()))\n    .bodyAepTextStyle(AepTextStyle(textStyle = TextStyle(Color.Yellow)))\n    .titleAepTextStyle(AepTextStyle(textStyle = TextStyle(Color.Green)))\n    .build()\n\n// Create row with composables from AepUI instances\nLazyRow {\n  items(reorderedAepUIList) { aepUI ->                   \n    when (aepUI) {\n      is SmallImageUI -> {\n        val state = aepUI.getState()\n        if (!state.dismissed) \n        {\n          SmallImageCard(ui = aepUI, \n                         style = smallImageCardStyleRow, // setting the custom style here\n                         observer = ContentCardEventObserver(contentCardCallback))\n        }\n      }\n    }\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","CodeBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}