{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-content-card-ui-android-api-usage-md-49cce3e45bf2f97b667a.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EAClB,CAAC,EACKG,EAAcL,EAAc,eAC5BM,EAAYN,EAAc,aAC1BO,EAAc,CAClBR,aAAAA,GAEIS,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGT,GAAK,YAER,OAAO,SAACM,GAAS,UAAKD,EAAiBL,EAAK,CAAES,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,iBAAe,kBAEvB,6IACA,eACE,GAAM,oBAAkB,qBAE1B,0BAAW,uBAAYC,WAAW,KAAG,oBAAkC,gCAAgC,cAAGA,WAAW,IACjH,KAAQ,6BAA2B,SACrB,6CAA6C,uBAAYA,WAAW,KAAG,SAAuB,yGAChH,SAACR,EAAW,CAACS,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,+NAAgN,cAAGC,WAAW,IAC1N,KAAQ,oEACP,uBAAYA,WAAW,KAAG,kCAAmD,8FAClF,eACE,GAAM,UAAQ,WAEhB,SAACP,EAAS,CAACS,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,SAASL,QAAQ,eACvE,eACE,GAAM,UAAQ,WAEhB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,mBAAiB,+DAGlC,eACE,GAAM,WAAS,YAEjB,SAACP,EAAS,CAACS,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,SAASL,QAAQ,eACvE,eACE,GAAM,YAAU,WAElB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,mBAAiB,00BA2BtC,CAEAH,EAAWQ,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/content-card-ui/Android/api-usage.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"api-reference\"\n    }}>{`API Reference`}</h1>\n    <p>{`This document provides information on how to use the Messaging APIs to receive content card views in your application.`}</p>\n    <h2 {...{\n      \"id\": \"getcontentcardui\"\n    }}>{`getContentCardUI`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`getContentCardUI`}</inlineCode>{` method retrieves a flow of `}<a parentName=\"p\" {...{\n        \"href\": \"./public-classes/aepui.md\"\n      }}>{`AepUI`}</a>{` objects for the provided surface. These `}<inlineCode parentName=\"p\">{`AepUI`}</inlineCode>{` objects represent templated content cards whose UI can be rendered using provided card composables.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Calling this API will only retrieve the content cards are already downloaded and cached by the Messaging extension. This API will not download content cards from Adobe Journey Optimizer. You must call `}<a parentName=\"p\" {...{\n        \"href\": \"../../code-based/api-reference.md#updatePropositionsForSurfaces\"\n      }}><inlineCode parentName=\"a\">{`updatePropositionsForSurfaces`}</inlineCode></a>{` API from the AEPMessaging extension with the desired surfaces prior to calling this API.`}</p>\n    <h3 {...{\n      \"id\": \"syntax\"\n    }}>{`Syntax`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Kotlin\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"kotlin\"\n    }}>{`Kotlin`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`suspend fun getContentCardUI(): Flow<List<AepUI<*, *>>>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h3>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Kotlin\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"kotlin-1\"\n    }}>{`Kotlin`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`// Download the content cards for homepage surface using Messaging extension\nval surfaces = mutableListOf<Surface>()\nval surface = Surface(\"homepage\")\nsurfaces.add(surface)\nMessaging.updatePropositionsForSurfaces(surfaces)\n\n// Initialize the ContentCardUIProvider\nval contentCardUIProvider = ContentCardUIProvider(surface)\n\n// get the content cards within a view model\nclass MyScreenViewModel : ViewModel {\n  private val contentCardUIProvider = MessagingContentCardProvider(...)\n  private val _aepUIList = MutableStateFlow<List<AepUI<*, *>>>(emptyList())\n  val aepUIList: StateFlow<List<AepUI<*, *>>> = _aepUIList.asStateFlow()\n\n  // fetch the list of cards when necessary \n  viewModelScope.launch {\n    contentCardUIProvider.getContentCardUI().collect { \n      aepUi ->\n      _aepUIList.value = aepUi\n    }\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","InlineAlert","CodeBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}