{"version":3,"file":"component---src-pages-solution-adobe-campaign-classic-tabs-api-reference-md-9e433f43298bb061b9f0.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/solution/adobe-campaign-classic/tabs/api-reference.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" api=\"extension-version\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@NonNull \npublic static String extensionVersion();\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`String campaignClassicExtensionVersion = CampaignClassic.extensionVersion();\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"extension-version\" repeat=\"10\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static var extensionVersion: String\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let campaignClassicVersion = CampaignClassic.extensionVersion\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objective-c\"\n      }}>{`+ (nonnull NSString *)extensionVersion\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objective-c\"\n      }}>{`NSString *campaignClassicVersion = [AEPMobileCampaignClassic extensionVersion];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"register-device\" repeat=\"7\" mdxType=\"Variant\" />\n    <p>{`To prepare your app to handle push notifications, see the tutorial on `}<a parentName=\"p\" {...{\n        \"href\": \"https://firebase.google.com/docs/cloud-messaging/android/client\"\n      }}>{`setting up a Firebase Cloud Messaging client app on Android`}</a>{`. After you receive the Firebase Cloud Messaging (FCM) SDK registration token, send this token and the device information to Campaign Classic by using the `}<inlineCode parentName=\"p\">{`registerDevice`}</inlineCode>{` API.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`registerDevice`}</inlineCode>{` API registers a device with your Campaign Classic registration server. It takes the FCM registration token as a parameter with a user key that identifies a user, such as an email address or a login name. You can also provide a map of the custom key-value pairs that you want to associate with the registration.`}</p>\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void registerDevice(@NonNull final String token, final String userKey, final Map<String, Object> additionalParams)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic void onNewToken(String token) {\n    Log.d(\"TestApp\", \"Refreshed token: \" + token);\n\n    // If you want to send messages to this application instance or\n    // manage this app's subscriptions on the server side, send the\n    // Instance ID token to your app server.\n    if (token != null) {\n        Log.d(\"TestApp\", \"FCM SDK registration token received : \" + token);\n        \n        // Create a map of additional parameters\n        Map<String, Object> additionalParams = new HashMap<String, Object>();\n        additionalParams.put(\"name\", \"John\");\n        additionalParams.put(\"serial\", 12345);\n        additionalParams.put(\"premium\", true);\n    \n        // Send the registration info\n        CampaignClassic.registerDevice(token, \"john@example.com\", additionalParams);\n    }\n}\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"register-device\" repeat=\"12\" mdxType=\"Variant\" />\n    <p>{`To get your app ready to handle push notifications, see the tutorial on `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/HandlingRemoteNotifications.html#//apple_ref/doc/uid/TP40008194-CH6-SW1\"\n      }}>{`configuring remote notification support`}</a>{`. After you receive the Apple Push Notification service (APNs) token, send this token and the device information to Campaign Classic using the `}<inlineCode parentName=\"p\">{`registerDevice`}</inlineCode>{` API.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`registerDevice`}</inlineCode>{` API registers a device with your Campaign Classic registration server. It takes the APNS token as a parameter with a user key that identifies a user, such as an email address or a login name. You can also provide a map of the custom key-value pairs that you want to associate with the registration.`}</p>\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func registerDevice(token: Data, userKey: String?, additionalParameters: [String: Any]?)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    let params: [String: Any] = [\n        \"name\": \"John\",\n        \"serial\": 12345,\n        \"premium\": true\n    ]\n\n    CampaignClassic.registerDevice(token: deviceToken, userKey: \"johnDoe@example.com\", additionalParameters: params)\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-1\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) registerDeviceWithToken:(nonnull NSData*)token userKey:(nullable NSString*)userKey additionalParams:(nullable NSDictionary<NSString *, id> *)additionalParams;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n    NSMutableDictionary *params = [[NSMutableDictionary alloc] initWithObjectsAndKeys:  @\"John\", @\"name\", nil];\n    [params setObject: [NSNumber numberWithInt:12345] forKey: @\"serial\"];\n    [params setObject: [NSNumber numberWithBool:YES]  forKey: @\"premium\"];\n\n    [AEPMobileCampaignClassic registerDeviceWithToken:deviceToken userKey:@\"john@example.com\" additionalParameters:params];\n}\n`}</code></pre>\n    <Variant platform=\"android\" api=\"register-extension\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-2\"\n    }}>{`Java`}</h4>\n    <h4 {...{\n      \"id\": \"syntax\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void registerExtension()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`CampaignClassic.registerExtension();\n`}</code></pre>\n    <Variant platform=\"android\" api=\"track-notification-click\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-3\"\n    }}>{`Java`}</h4>\n    <p>{`If `}<inlineCode parentName=\"p\">{`trackInfo`}</inlineCode>{` is null, or does not contain the necessary tracking identifiers, `}<inlineCode parentName=\"p\">{`messageId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_mId`}</inlineCode>{`) and `}<inlineCode parentName=\"p\">{`deliveryId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_dId`}</inlineCode>{`), a track request is `}<strong parentName=\"p\">{`not`}</strong>{` sent.`}</p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void trackNotificationClick(@NonNull final Map<String, String> trackInfo)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic void onResume() {\n    super.onResume();\n    \n    // The messageId (_mId) and deliveryId (_dId) can be passed in the intent extras.\n    // This is assuming you extract the messageId and deliveryId from the\n    // received push message and are including it in the intent (intent.putExtra())\n    // of the displayed notification.\n\n    Bundle extras = getIntent().getExtras();\n    if (extras != null) {\n        String deliveryId = extras.getString(\"_dId\");\n        String messageId = extras.getString(\"_mId\");\n        if (deliveryId != null && messageId != null) {\n            Map<String,String> trackInfo = new HashMap<>();\n            trackInfo.put(\"_mId\", messageId);\n            trackInfo.put(\"_dId\", deliveryId);\n\n            // Send the tracking information for message opening\n            CampaignClassic.trackNotificationClick(trackInfo);\n        }\n    }\n}\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"track-notification-click\" repeat=\"11\" mdxType=\"Variant\" />\n    <p>{`You can pass the `}<inlineCode parentName=\"p\">{`launchOptions`}</inlineCode>{` that were received upon opening the application or `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{`, which contains the received push payload in `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{`. If `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{` is null or does not contain the necessary tracking identifiers, `}<inlineCode parentName=\"p\">{`broadlogId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_mId`}</inlineCode>{`) and `}<inlineCode parentName=\"p\">{`deliveryId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_dId`}</inlineCode>{`), a track request is `}<strong parentName=\"p\">{`not`}</strong>{` sent.`}</p>\n    <h4 {...{\n      \"id\": \"swift-2\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func trackNotificationClick(withUserInfo userInfo: [AnyHashable: Any])\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n    CampaignClassic.trackNotificationClick(withUserInfo: response.notification.request.content.userInfo)\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-2\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) trackNotificationClickWithUserInfo: (nonnull NSDictionary*) userInfo;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler{\n    NSDictionary *userInfo = response.notification.request.content.userInfo;\n    [AEPMobileCampaignClassic trackNotificationClickWithUserInfo:userInfo];\n    completionHandler();\n}\n`}</code></pre>\n    <Variant platform=\"android\" api=\"track-notification-receive\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-4\"\n    }}>{`Java`}</h4>\n    <p>{`If `}<inlineCode parentName=\"p\">{`trackInfo`}</inlineCode>{` is null or does not contain the necessary tracking identifiers, `}<inlineCode parentName=\"p\">{`messageId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_mId`}</inlineCode>{`) and `}<inlineCode parentName=\"p\">{`deliveryId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_dId`}</inlineCode>{`), a track request is `}<strong parentName=\"p\">{`not`}</strong>{` sent.`}</p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void trackNotificationReceive(@NonNull final Map<String, String> trackInfo)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class MyFirebaseMessagingService extends FirebaseMessagingService {\n    @Override\n    public void onMessageReceived(RemoteMessage remoteMessage) {\n        Log.d(\"TestApp\", \"Receive message from: \" + remoteMessage.getFrom());\n        Map<String,String> payloadData = message.getData();\n\n        // Check if message contains data payload.\n        if (payloadData.size() > 0) {\n            Map<String,String> trackInfo = new HashMap<>();\n            trackInfo.put(\"_mId\", payloadData.get(\"_mId\"));\n            trackInfo.put(\"_dId\", payloadData.get(\"_dId\"));\n\n            // Send the tracking information for message received\n            CampaignClassic.trackNotificationReceive(trackInfo);\n        }\n    }\n}\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"track-notification-receive\" repeat=\"11\" mdxType=\"Variant\" />\n    <p>{`You can pass the `}<inlineCode parentName=\"p\">{`launchOptions`}</inlineCode>{` that were received upon opening the application or `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{`, which contains the received push payload in `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{`. If `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{` is null or does not contain the necessary tracking identifiers, `}<inlineCode parentName=\"p\">{`broadlogId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_mId`}</inlineCode>{`) and `}<inlineCode parentName=\"p\">{`deliveryId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_dId`}</inlineCode>{`), a track request is `}<strong parentName=\"p\">{`not`}</strong>{` sent.`}</p>\n    <h4 {...{\n      \"id\": \"swift-3\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func trackNotificationReceive(withUserInfo userInfo: [AnyHashable: Any])\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n    guard let aps = userInfo[\"aps\"] as? [String: Any] else {\n        completionHandler(.failed)\n        return\n    }\n    if aps[\"content-available\"] as? Int == 1 {\n        // Track silent push notification receive\n        CampaignClassic.trackNotificationReceive(withUserInfo: userInfo)\n        completionHandler(.noData)\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-3\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) trackNotificationReceiveWithUserInfo:(nonnull NSDictionary*) userInfo;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)launchOptions fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler\n{\n    if ( launchOptions) NSLog(@\"launchOptions: %@\", [launchOptions description]);\n    // Tracking silent push notification receive\n    if ( [launchOptions[@\"aps\"][@\"content-available\"] intValue] == 1 ) {\n        NSLog(@\"Silent Push Notification\");\n        [AEPMobileCampaignClassic trackNotificationReceiveWithUserInfo:userInfo];\n        completionHandler(UIBackgroundFetchResultNoData);\n    }\n}\n`}</code></pre>\n    <Variant platform=\"android\" api=\"handle-remote-message\" repeat=\"7\" mdxType=\"Variant\" />\n    <h2 {...{\n      \"id\": \"requires-extension-version-v210-through-the-next-major-version-release-\"\n    }}><em parentName=\"h2\"><strong parentName=\"em\">{`Requires extension version v2.1.0 through the next major version release `}</strong></em></h2>\n    <p>{`Builds an `}<inlineCode parentName=\"p\">{`AEPPushPayload`}</inlineCode>{` with data extracted from a `}<inlineCode parentName=\"p\">{`RemoteMessage`}</inlineCode>{`'s payload. The built `}<inlineCode parentName=\"p\">{`AEPPushPayload`}</inlineCode>{` is then used to construct a `}<inlineCode parentName=\"p\">{`Notification`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"java-5\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@NonNull \npublic static boolean handleRemoteMessage(@NonNull final Context context, @NonNull final RemoteMessage remoteMessage);\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic void onMessageReceived(RemoteMessage remoteMessage) {\n    Log.d(LOG_TAG, \"From: \" + remoteMessage.getFrom());\n        if (AEPMessagingService.handleRemoteMessage(this, remoteMessage)) {\n            // Campaign extension has handled the notification\n        } else {\n            // Handle notification from other sources\n        }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Variant","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","platform","api","repeat","parentName","isMDXComponent"],"sourceRoot":""}