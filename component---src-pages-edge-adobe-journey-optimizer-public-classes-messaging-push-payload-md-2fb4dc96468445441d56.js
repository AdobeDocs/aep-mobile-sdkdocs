"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[1327],{58496:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return u},default:function(){return m}});var a=t(87462),i=t(63366),o=(t(15007),t(64983)),s=t(91515),r=["components"],u={},l={_frontmatter:u},c=s.Z;function m(e){var n=e.components,t=(0,i.Z)(e,r);return(0,o.mdx)(c,(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"messagingpushpayload"},"MessagingPushPayload"),(0,o.mdx)("p",null,"This document explains how to use MessagingPushPayload class for getting the notification attributes like title, body, actions etc for creating a push notification received from Adobe Journey Optimizer (AJO)."),(0,o.mdx)("p",null,"MessagePushPayload is an Android only helper class for extracting the data payload attributes from RemoteMessage. Use this class for ",(0,o.mdx)("a",{parentName:"p",href:"../push-notification/android/manual-display-and-tracking.md"},"manual display and tracking of push notifications"),"."),(0,o.mdx)("h2",{id:"creating-the-messagingpushpayload-object"},"Creating the MessagingPushPayload object"),(0,o.mdx)("p",null,"Use the following constructors in the FirebaseMessagingService class's ",(0,o.mdx)("inlineCode",{parentName:"p"},"onMessageReceived")," method:"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Syntax")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"    // Using the remote message\n    public MessagingPushPayload(RemoteMessage message)\n \n    // Using the data map\n    public MessagingPushPayload(Map<String, String> data)\n")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Example")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"// Using the remote message\n@Override\npublic void onMessageReceived(@NonNull RemoteMessage remoteMessage) {\n    MessagingPushPayload payload = new MessagingPushPayload(remoteMessage);\n}\n\n// Using the data map\n@Override\npublic void onMessageReceived(@NonNull RemoteMessage remoteMessage) {\n    MessagingPushPayload payload = new MessagingPushPayload(remoteMessage.getData());\n}\n")),(0,o.mdx)("h2",{id:"public-apis"},"Public APIs"),(0,o.mdx)("p",null,"Public APIs are used to get attributes from the push payload, which are used while creating the push notification."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"// Returns the title from the remote message\npublic String getTitle()\n\n// Returns the body from the remote message \npublic String getBody()\n\n// Returns the sound from the remote message \n// The sound string represents the filename of a sound resource bundled in the app.\npublic String getSound()\n\n// Returns the notification badge count from the remote message \npublic int getBadgeCount()\n\n// Returns the notification priority from the remote message. \n// For more information, please read the Firebase documentation (https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#notificationpriority) \npublic int getNotificationPriority()\n\n// Returns the channel ID from the remote message. \npublic String getChannelId()\n\n// Returns the icon string from the remote message.\n// The icon string represents the drawable resource name in the app.\npublic String getIcon()\n\n// Returns the image URL from the remote message.\npublic String getImageUrl()\n\n// Returns the data map from the remote message.\npublic Map<String, String> getData()\n\n// Returns an ActionType object which represents the type of action which needs to be performed on push notification interaction.\n// More information about the ActionType enum definition can be found in the ActionType section below.\npublic ActionType getActionType()\n\n// Returns the action URI as a string. The action URI is used to direct the push notification interaction.\npublic String getActionUri()\n\n// Returns a list of ActionButtons. More information about the ActionButtons class definition can be found in the ActionButtons section below.\npublic List<ActionButton> getActionButtons()\n")),(0,o.mdx)("h3",{id:"internal-classes-and-enums"},"Internal classes and enums"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"ActionType")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"public enum ActionType {\n    DEEPLINK, WEBURL, OPENAPP, NONE\n}\n")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"ActionButtons")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"// Constructor\npublic ActionButton(final String label, final String link, final String type)\n\n// Public APIs\n\n// Returns the label for the action button\npublic String getLabel()\n\n// Returns the link for the action button\npublic String getLink()\n\n// Returns the ActionType for the action button\npublic ActionType getType()\n")))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-edge-adobe-journey-optimizer-public-classes-messaging-push-payload-md-2fb4dc96468445441d56.js.map