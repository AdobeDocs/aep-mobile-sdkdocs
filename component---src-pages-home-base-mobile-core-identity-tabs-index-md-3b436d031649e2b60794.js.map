{"version":3,"file":"component---src-pages-home-base-mobile-core-identity-tabs-index-md-3b436d031649e2b60794.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/home/base/mobile-core/identity/tabs/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst InlineNestedAlert = makeShortcode(\"InlineNestedAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" task=\"add\" repeat=\"10\" mdxType=\"Variant\" />\n    <ol>\n      <li parentName=\"ol\">{`Add the `}<inlineCode parentName=\"li\">{`Identity`}</inlineCode>{` library to your project using the app's gradle file.`}</li>\n    </ol>\n    <h4 {...{\n      \"id\": \"kotlin\"\n    }}>{`Kotlin`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`implementation(platform(\"com.adobe.marketing.mobile:sdk-bom:3.+\"))\nimplementation(\"com.adobe.marketing.mobile:core\")\nimplementation(\"com.adobe.marketing.mobile:identity\")\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"groovy\"\n    }}>{`Groovy`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`implementation platform('com.adobe.marketing.mobile:sdk-bom:3.+')\nimplementation 'com.adobe.marketing.mobile:core'\nimplementation 'com.adobe.marketing.mobile:identity'\n`}</code></pre>\n    <InlineNestedAlert variant=\"warning\" header=\"false\" iconPosition=\"left\" mdxType=\"InlineNestedAlert\">\n      <p>{`Using dynamic dependency versions is `}<strong parentName=\"p\">{`not`}</strong>{` recommended for production apps. Please read the `}<a parentName=\"p\" {...{\n          \"href\": \"../../resources/manage-gradle-dependencies.md\"\n        }}>{`managing Gradle dependencies guide`}</a>{` for more information.`}</p>\n    </InlineNestedAlert>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Import the Identity and MobileCore extensions in your application's main activity.`}</li>\n    </ol>\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <p>{`Import the library:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import com.adobe.marketing.mobile.MobileCore;\nimport com.adobe.marketing.mobile.Identity;\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"add\" repeat=\"7\" mdxType=\"Variant\" />\n    <ol>\n      <li parentName=\"ol\">{`Add the Mobile Core and Identity extensions to your project using Cocoapods. Add following pods in your `}<inlineCode parentName=\"li\">{`Podfile`}</inlineCode>{`:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ruby\"\n      }}>{`use_frameworks!\ntarget 'YourTargetApp' do\n    pod 'AEPCore', '~> 5.0'\n    pod 'AEPIdentity', '~> 5.0'\nend\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Import the Identity library.`}</li>\n    </ol>\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import AEPCore\nimport AEPIdentity\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`@import AEPCore;\n@import AEPIdentity;\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" task=\"add\" repeat=\"2\"/>\n     #### JavaScript\n     ```jsx\n     import {ACPIdentity} from '@adobe/react-native-acpcore';\n     ```\n     <Variant platform=\"flutter\" task=\"add\" repeat=\"2\"/>\n     #### Dart\n     ```dart\n     import 'package:flutter_acpcore/flutter_acpidentity.dart';\n     ``` -*/}\n    <Variant platform=\"android\" task=\"register\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`After calling the `}<inlineCode parentName=\"p\">{`setApplication()`}</inlineCode>{` method in the `}<inlineCode parentName=\"p\">{`onCreate()`}</inlineCode>{` method, register the Identity extension.`}</p>\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class MobileApp extends Application {\n@Override\npublic void onCreate() {\nsuper.onCreate();\n     MobileCore.setApplication(this);\n     List<Class<? extends Extension>> extensions = Arrays.asList(Identity.EXTENSION, ...);\n     MobileCore.registerExtensions(extensions, o -> {\n        // Any other post registration processing\n    });\n  }\n}\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"register\" repeat=\"6\" mdxType=\"Variant\" />\n    <p>{`Register the Identity extension in your app's `}<inlineCode parentName=\"p\">{`didFinishLaunchingWithOptions`}</inlineCode>{` function:`}</p>\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <p>{`When including both Identity and Identity for Edge Network extensions, register the extensions using their full Swift module names, such as `}<inlineCode parentName=\"p\">{`AEPIdentity.Identity.self`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n     MobileCore.registerExtensions([Identity.self, ...], {\n       ...\n     })\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-1\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n [AEPMobileCore registerExtensions:@[AEPMobileIdentity.class, ...] completion:^{\n   ...\n }];\n return YES;\n}\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" task=\"register\" repeat=\"1\"/>\n     When using React Native, registering Identity with Mobile Core should be done in native code, which is shown under the Android and iOS tabs.\n     <Variant platform=\"flutter\" task=\"register\" repeat=\"1\"/>\n     When using Flutter, registering Identity with Mobile Core should be done in native code, which is shown under the Android and iOS tabs. -*/}\n    <Variant platform=\"android\" task=\"implement\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-2\"\n    }}>{`Java`}</h4>\n    <p>{`To append visitor information to the URL that is being used to open the web view, call `}<a parentName=\"p\" {...{\n        \"href\": \"#appendtourl-appendvisitorinfoforurl\"\n      }}>{`appendVisitorInfoForUrl`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Identity.appendVisitorInfoForURL(\"https://example.com\", new AdobeCallback<String>() {\n    @Override\n    public void call(String urlWithAdobeVisitorInfo) {\n        //handle the new URL here\n        //For example, open the URL on the device browser\n        //\n        Intent i = new Intent(Intent.ACTION_VIEW);\n        i.setData(Uri.parse(urlWithAdobeVisitorInfo));\n        startActivity(i);\n    }\n});\n`}</code></pre>\n    <p>{`Alternately, starting in SDK version 1.4.0 (Identity version 1.1.0), you can call `}<a parentName=\"p\" {...{\n        \"href\": \"#geturlvariables\"\n      }}>{`getUrlVariables`}</a>{` and build your own URL:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Identity.getUrlVariables(new AdobeCallback<String>() {\n    @Override\n    public void call(String stringWithAdobeVisitorInfo) {\n        //handle the URL query parameter string here\n        //For example, open the URL on the device browser\n        //\n        Intent i = new Intent(Intent.ACTION_VIEW);\n        i.setData(Uri.parse(\"https://example.com?\" + urlWithAdobeVisitorInfo));\n        startActivity(i);\n    }\n});\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"implement\" repeat=\"10\" mdxType=\"Variant\" />\n    <p>{`To append visitor information to the URL that is being used to open the web view, call `}<a parentName=\"p\" {...{\n        \"href\": \"./api-reference.md#appendtourl-appendvisitorinfoforurl\"\n      }}>{`appendToUrl`}</a>{`:`}</p>\n    <h4 {...{\n      \"id\": \"swift-2\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let url = URL(string: \"https://example.com\")\nIdentity.appendTo(url: url) { appendedUrl, error in\n    if error != nil {\n        // handle error here\n    } else {\n        // handle appended url here\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-2\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`NSURL *sampleUrl = [NSURL URLWithString:@\"https://example.com\"];\n[AEPMobileIdentity appendToUrl:sampleUrl completion:^(NSURL * _Nullable appendedUrl, NSError *error) {\n    if (error != nil) {\n        // Handle error here\n    } else {\n        // Handle appended url here\n    }\n}];\n`}</code></pre>\n    <p>{`Alternately, you can call `}<a parentName=\"p\" {...{\n        \"href\": \"api-reference.md#geturlvariables\"\n      }}>{`getUrlVariables`}</a>{` and build your own URL:`}</p>\n    <h4 {...{\n      \"id\": \"swift-3\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`Identity.getUrlVariables { urlVariables, error in\n    if error != nil {\n        // handle error here\n    } else {\n        if let url = URL(string: \"https://example.com?\\\\(urlVariables ?? \"\")\") {\n            DispatchQueue.main.async {\n                UIApplication.shared.open(url)\n            }\n        }\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-3\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`[AEPMobileIdentity getUrlVariables:^(NSString * _Nullable urlVariables, NSError *error) {\n    NSString *sampleURLString = @\"https://example.com\";\n    if (error != nil) {\n        // Handle variables being nil\n    } else {\n        NSString *stringWithData = [NSString stringWithFormat:@\"%@?%@\", sampleURLString, urlVariables];\n        NSURL *appendedUrl = [NSURL URLWithString:stringWithData];\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [[UIApplication sharedApplication] openURL:appendedUrl options:@{} completionHandler:nil];\n        });\n    }\n}];\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" task=\"implement\" repeat=\"5\"/>\n     #### JavaScript\n     To append visitor information to the URL that is being used to open the web view, call [appendVisitorInfoForUrl](api-reference.md#appendtourl-appendvisitorinfoforurl):\n     ```jsx\n     ACPIdentity.appendVisitorInfoForURL(\"www.example.com\").then(urlWithVistorData => console.log(\"Url with Visitor Data = \" + urlWithVisitorData));\n     ```\n     Alternately, starting with SDK version 1.0.5, you can call [getUrlVariables](api-reference.md#geturlvariables) and build your own URL:\n     ```jsx\n     ACPIdentity.getUrlVariables().then(urlVariables => console.log(\"query params = \" + urlVariables));\n     ```\n     <Variant platform=\"flutter\" task=\"implement\" repeat=\"5\"/>\n     #### Dart\n     To append visitor information to the URL that is being used to open the web view, call [appendVisitorInfoForUrl](api-reference.md#appendtourl-appendvisitorinfoforurl):\n     ```dart\n     String result = \"\";\n     try {\n      result = await FlutterACPIdentity.appendToUrl(\"www.example.com\");\n     } on PlatformException {\n      log(\"Failed to append URL\");\n     }\n     ```\n     Alternately, starting with SDK version 1.0.0-beta.1, you can call [getUrlVariables](api-reference.md#geturlvariables) and build your own URL:\n     ```dart\n     String result = \"\";\n     try {\n      result = await FlutterACPIdentity.urlVariables;\n     } on PlatformException {\n      log(\"Failed to get url variables\");\n     }\n     ``` -*/}\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","Variant","InlineNestedAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","platform","task","repeat","parentName","variant","header","iconPosition","isMDXComponent"],"sourceRoot":""}