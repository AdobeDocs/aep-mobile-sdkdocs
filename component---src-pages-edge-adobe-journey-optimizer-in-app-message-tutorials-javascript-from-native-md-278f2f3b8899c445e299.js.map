{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-in-app-message-tutorials-javascript-from-native-md-278f2f3b8899c445e299.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/in-app-message/tutorials/javascript-from-native.md","webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/in-app-message/tutorials/tabs/javascript-from-native.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Tabs from './tabs/javascript-from-native.md';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst TabsBlock = makeShortcode(\"TabsBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"execute-javascript-methods-from-native-code\"\n    }}>{`Execute JavaScript methods from native code`}</h1>\n    <p>{`You can execute JavaScript in an in-app message from native code by completing the following steps:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#implement-and-assign-a-presentationdelegate-messagingdelegate\"\n        }}>{`Implement and assign a `}<inlineCode parentName=\"a\">{`PresentationDelegate`}</inlineCode>{`/ `}<inlineCode parentName=\"a\">{`MessagingDelegate`}</inlineCode></a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#obtain-a-reference-to-the-inappmessageeventhandler-web-view\"\n        }}>{`Obtain a reference to the web view`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#call-the-javascript-method\"\n        }}>{`Call the JavaScript method`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"implement-and-assign-a-presentationdelegate-messagingdelegate\"\n    }}>{`Implement and assign a `}<inlineCode parentName=\"h2\">{`PresentationDelegate`}</inlineCode>{`/ `}<inlineCode parentName=\"h2\">{`MessagingDelegate`}</inlineCode></h2>\n    <p>{`To register a JavaScript event handler with a `}<inlineCode parentName=\"p\">{`Message`}</inlineCode>{` object, you will first need to implement and set a `}<inlineCode parentName=\"p\">{`PresentationDelegate`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{` (for older Android SDK versions and iOS SDK) you are using.`}</p>\n    <p>{`Please read the `}<a parentName=\"p\" {...{\n        \"href\": \"./messaging-delegate.md\"\n      }}>{`tutorial`}</a>{` for more detailed instructions on implementing and using a PresentationDelegate/ MessagingDelegate (for older Android SDK versions and iOS SDK).`}</p>\n    <h2 {...{\n      \"id\": \"obtain-a-reference-to-the-inappmessageeventhandler-web-view\"\n    }}>{`Obtain a reference to the `}<inlineCode parentName=\"h2\">{`InAppMessageEventHandler`}</inlineCode>{`/ web view`}</h2>\n    <p>{`In the `}<inlineCode parentName=\"p\">{`shouldShowMessage`}</inlineCode>{` function of the `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{`, get a reference to the web view used by the message.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"3\" mdxType=\"TabsBlock\" />\n    <p>{`Android 3.x`}</p>\n    <Tabs query=\"platform=android3x&task=obtain\" mdxType=\"Tabs\" />\n    <p>{`Android 2.x (Older version)`}</p>\n    <Tabs query=\"platform=android2x&task=obtain\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&task=obtain\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"call-the-javascript-method\"\n    }}>{`Call the JavaScript method`}</h2>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"3\" mdxType=\"TabsBlock\" />\n    <p>{`Android 3.x`}</p>\n    <Tabs query=\"platform=android3x&task=call\" mdxType=\"Tabs\" />\n    <p>{`Android 2.x (Older version)`}</p>\n    <Tabs query=\"platform=android2x&task=call\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&task=call\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`The test apps in this repository demonstrate executing JavaScript code from an in-app message's webview:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/aepsdk-messaging-ios/tree/main/TestApps/MessagingDemoApp\"\n        }}>{`Swift`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/aepsdk-messaging-ios/tree/main/TestApps/MessagingDemoAppObjC\"\n        }}>{`Objective-C`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/aepsdk-messaging-android/tree/main/code/testapp\"\n        }}>{`Kotlin`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android3x\" task=\"obtain\" repeat=\"5\" mdxType=\"Variant\" />\n    <p>{`In the `}<inlineCode parentName=\"p\">{`onShow`}</inlineCode>{` function of the `}<inlineCode parentName=\"p\">{`PresentationDelegate`}</inlineCode>{`, obtain a reference to the `}<inlineCode parentName=\"p\">{`InAppMessageEventHandler`}</inlineCode>{` for use in Javascript interactions.`}</p>\n    <h4 {...{\n      \"id\": \"kotlin\"\n    }}>{`Kotlin`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var eventHandler: InAppMessageEventHandler? = null\nvar currentMessagePresentable: Presentable<InAppMessage>? = null\n\noverride fun onShow(presentable: Presentable<*>) {\n  if (presentable.getPresentation() !is InAppMessage) {\n    return\n  }\n  currentMessagePresentable = presentable as Presentable<InAppMessage>\n  eventHandler = currentMessagePresentable?.getPresentation()?.eventHandler\n\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`InAppMessageEventHandler eventHandler = null;\nPresentable<InAppMessage> currentMessagePresentable = null;\n\n@Override\npublic void onShow(Presentable<?> presentable) {\n    if (!(presentable.getPresentation() instanceof InAppMessage)) {\n      return;\n    }\n    currentMessagePresentable = (Presentable<InAppMessage>) presentable;\n    eventHandler = currentMessagePresentable.getPresentation().getEventHandler();\n}\n`}</code></pre>\n    <Variant platform=\"android2x\" task=\"obtain\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`On Android, the web view is represented as `}<inlineCode parentName=\"p\">{`WebView`}</inlineCode>{`.  `}</p>\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic boolean shouldShowMessage(FullscreenMessage fullscreenMessage) {\n  // access to the whole message from the parent\n  Message message = (Message) fullscreenMessage.getParent();\n      \n  WebView webView = message.getWebView();\n  \n  ...\n}\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"obtain\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`On iOS, the web view is represented as `}<inlineCode parentName=\"p\">{`WKWebView`}</inlineCode>{`.  `}</p>\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func shouldShowMessage(message: Showable) -> Bool {\n    // access to the whole message from the parent\n    let fullscreenMessage = message as? FullscreenMessage\n    let message = fullscreenMessage?.parent\n\n    let messageWebView = message?.view as? WKWebView\n\n    ...\n}\n`}</code></pre>\n    <Variant platform=\"android3x\" task=\"call\" repeat=\"6\" mdxType=\"Variant\" />\n    <p>{`With a reference to the `}<inlineCode parentName=\"p\">{`InAppMessageEventHandler`}</inlineCode>{`, the instance method `}<inlineCode parentName=\"p\">{`evaluateJavascript(String, AdobeCallback<String>)`}</inlineCode>{` can now be leveraged to call a JavaScript method.`}</p>\n    <p>{`Further details of this API are explained in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.android.com/reference/android/webkit/WebView#evaluateJavascript(java.lang.String,%20android.webkit.ValueCallback%3Cjava.lang.String%3E)\"\n      }}>{`Android`}</a>{` documentation - the example below is provided for the purpose of demonstration:`}</p>\n    <h4 {...{\n      \"id\": \"kotlin-1\"\n    }}>{`Kotlin`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`var eventHandler: InAppMessageEventHandler? = null\nvar currentMessagePresentable: Presentable<InAppMessage>? = null\n\noverride fun onShow(presentable: Presentable<*>) {\n  if (presentable.getPresentation() !is InAppMessage) {\n    return\n  }\n  currentMessagePresentable = presentable as Presentable<InAppMessage>\n  eventHandler = currentMessagePresentable?.getPresentation()?.eventHandler\n  eventHandler?.evaluateJavascript(\"startTimer()\") { content ->\n    // do something with the content\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"java-2\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`InAppMessageEventHandler eventHandler = null;\nPresentable<InAppMessage> currentMessagePresentable = null;\n\n@Override\npublic void onShow(Presentable<?> presentable) {\n  if (!(presentable.getPresentation() instanceof InAppMessage)) {\n    return;\n  }\n  currentMessagePresentable = (Presentable<InAppMessage>) presentable;\n  eventHandler = currentMessagePresentable.getPresentation().getEventHandler();\n  if (eventHandler != null) {\n    eventHandler.evaluateJavascript(\"startTimer()\", s -> {\n    // do something with the content\n    });\n  }\n}\n`}</code></pre>\n    <Variant platform=\"android2x\" task=\"call\" repeat=\"4\" mdxType=\"Variant\" />\n    <p>{`With a reference to the `}<inlineCode parentName=\"p\">{`WebView`}</inlineCode>{`, the instance method `}<inlineCode parentName=\"p\">{`public void evaluateJavascript(@NonNull String script, @Nullable ValueCallback<String> resultCallback)`}</inlineCode>{` can now be leveraged to call a JavaScript method.`}</p>\n    <p>{`Further details of this API are explained in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.android.com/reference/android/webkit/WebView#evaluateJavascript(java.lang.String,%20android.webkit.ValueCallback%3Cjava.lang.String%3E)\"\n      }}>{`Android documentation`}</a>{` - the example below is provided for the purpose of demonstration:`}</p>\n    <h4 {...{\n      \"id\": \"java-3\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic boolean shouldShowMessage(FullscreenMessage fullscreenMessage) {\n  // access to the whole message from the parent\n  Message message = (Message) fullscreenMessage.getParent();\n      \n  WebView webView = message.getWebView();\n  // webview operations must be run on the ui thread\n  webView.post(new Runnable() {\n    @Override\n    public void run() {\n      webView.evaluateJavascript(\"startTimer()\", new ValueCallback<String>() {\n        @Override\n        public void onReceiveValue(String s) {\n          // do something with the content\n        }\n      });\n    }\n  });\n  \n  ...\n}\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"call\" repeat=\"4\" mdxType=\"Variant\" />\n    <p>{`With a reference to the `}<inlineCode parentName=\"p\">{`WKWebView`}</inlineCode>{`, the instance method `}<inlineCode parentName=\"p\">{`evaluateJavaScript(_:completionHandler:)`}</inlineCode>{` can now be leveraged to call a JavaScript method.`}</p>\n    <p>{`Further details of this API are explained in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/webkit/wkwebview/1415017-evaluateJavaScript\"\n      }}>{`Apple documentation`}</a>{` - the example below is provided for the purpose of demonstration:`}</p>\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func shouldShowMessage(message: Showable) -> Bool {\n    // access to the whole message from the parent\n    let fullscreenMessage = message as? FullscreenMessage\n    let message = fullscreenMessage?.parent\n\n    // the \\`shouldShowMessage\\` delegate method is called on a background thread.\n    // need to dispatch code that uses the webview back to the main thread.\n    DispatchQueue.main.async {\n        let messageWebView = message?.view as? WKWebView\n\n        messageWebView?.evaluateJavaScript(\"startTimer();\") { result, error in\n            if error != nil {\n                // handle error\n                return\n            }\n\n            if result != nil {\n                // do something with the result\n            }\n        }                \n    }\n\n    ...\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","TabsBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","orientation","slots","repeat","query","isMDXComponent","Variant","platform","task"],"sourceRoot":""}