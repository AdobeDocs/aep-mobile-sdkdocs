"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[88],{29128:function(e,a,n){n.r(a),n.d(a,{_frontmatter:function(){return m},default:function(){return u}});var r,t=n(87462),i=n(63366),l=(n(15007),n(64983)),d=n(91515),o=["components"],m={},s=(r="Variant",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.mdx)("div",e)}),p={_frontmatter:m},x=d.Z;function u(e){var a=e.components,n=(0,i.Z)(e,o);return(0,l.mdx)(x,(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,l.mdx)(s,{platform:"android",api:"extension-version",repeat:"8",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java"},"Java"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public static String extensionVersion()\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"String audienceExtensionVersion = Audience.extensionVersion();\n")),(0,l.mdx)("h4",{id:"kotlin"},"Kotlin"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"val extensionVersion = Audience.extensionVersion();\n")),(0,l.mdx)(s,{platform:"ios",api:"extension-version",repeat:"10",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"swift"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"static var extensionVersion: String\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"let audienceExtensionVersion  = Audience.extensionVersion()\n")),(0,l.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (nonnull NSString*) extensionVersion;\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"NSString *audienceExtensionVersion = [AEPMobileAudience extensionVersion];\n")),(0,l.mdx)(s,{platform:"android",api:"get-visitor-profile",repeat:"10",mdxType:"Variant"}),(0,l.mdx)("p",null,"This API returns the most recently obtained visitor profile. For easy access across multiple launches of your app, the visitor profile is saved in ",(0,l.mdx)("inlineCode",{parentName:"p"},"SharedPreferences"),". If no signal has been submitted, null is returned."),(0,l.mdx)("p",null,"When an AdobeCallbackWithError is provided, an AdobeError can be returned in the eventuality of an unexpected error or if the default timeout (5000ms) is met before the callback is returned with the visitor profile."),(0,l.mdx)("h4",{id:"java-1"},"Java"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public static void getVisitorProfile(final AdobeCallback<Map<String, String>> adobeCallback)\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"AdobeCallback<Map<String, String>> visitorProfileCallback = new AdobeCallback<Map<String, String>>() {\n    @Override\n    public void call(final Map<String, String> visitorProfile) {\n        // your own customized code\n    }\n};\n\nAudience.getVisitorProfile(visitorProfileCallback);\n")),(0,l.mdx)("h4",{id:"kotlin-1"},"Kotlin"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"Audience.getVisitorProfile { visitorProfile ->\n    // provide code to process the visitorProfile\n}\n")),(0,l.mdx)(s,{platform:"ios",api:"get-visitor-profile",repeat:"11",mdxType:"Variant"}),(0,l.mdx)("p",null,"This API returns the most recently obtained visitor profile."),(0,l.mdx)("h4",{id:"swift-1"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"static func getVisitorProfile(completion: @escaping ([String: String]?, Error?) -> Void)\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"Audience.getVisitorProfile { (visitorProfile, error) in\n   if error != nil {\n    // handle the error here\n   } else {\n    // handle the retrieved visitorProfile here\n   }\n  }\n")),(0,l.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+  (void) getVisitorProfile:^(NSDictionary<NSString *,NSString *> * _Nullable, NSError * _Nullable)completion\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objc"},"[AEPMobileAudience getVisitorProfile:^(NSDictionary<NSString *,NSString *> * _Nullable visitorProfile, NSError * _Nullable error) {\n   if (error) {\n    // handle the error here\n   } else {\n    // handle the returned visitorProfile dictionary here\n   }\n}];\n")),(0,l.mdx)(s,{platform:"android",api:"register-extension",repeat:"8",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java-2"},"Java"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public  static void registerExtension()\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"Audience.registerExtension();\n")),(0,l.mdx)("h4",{id:"kotlin-2"},"Kotlin"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"Audience.registerExtension()\n")),(0,l.mdx)(s,{platform:"android",api:"reset",repeat:"9",mdxType:"Variant"}),(0,l.mdx)("p",null,"This API resets the Audience Manager UUID and purges the current visitor profile from ",(0,l.mdx)("inlineCode",{parentName:"p"},"android.content.SharedPreferences"),". The Audience reset also clears the current in-memory DPID and DPUUID variables."),(0,l.mdx)("h4",{id:"java-3"},"Java"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public static void reset()\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"Audience.reset();\n")),(0,l.mdx)("h4",{id:"kotlin-3"},"Kotlin"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"Audience.reset()\n")),(0,l.mdx)(s,{platform:"ios",api:"reset",repeat:"11",mdxType:"Variant"}),(0,l.mdx)("p",null,"This API resets the Audience Manager UUID and purges the current visitor profile from ",(0,l.mdx)("inlineCode",{parentName:"p"},"UserDefaults"),". The Audience reset also clears the current in-memory DPID and DPUUID variables."),(0,l.mdx)("h4",{id:"swift-2"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"static func reset()\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"Audience.reset()\n")),(0,l.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) reset\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[AEPMobileAudience reset];\n")),(0,l.mdx)(s,{platform:"android",api:"signal-with-data",repeat:"12",mdxType:"Variant"}),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"signalWithData")," API sends Audience Manager a signal with traits and returns the matching segments for the visitor in a callback."),(0,l.mdx)("p",null,"Audience Manager sends the AAM UUID in response in initial signal call. The AAM UUID is persisted in ",(0,l.mdx)("inlineCode",{parentName:"p"},"SharedPreferences")," and is sent by the SDK in all subsequent signal requests. If available, the ECID is also sent in each signal request with the DPID and the DPUUID. The visitor profile that Audience Manager returns is saved in ",(0,l.mdx)("inlineCode",{parentName:"p"},"SharedPreferences")," and is updated with every signal call."),(0,l.mdx)("p",null,"When an ",(0,l.mdx)("inlineCode",{parentName:"p"},"AdobeCallbackWithError")," is provided, an ",(0,l.mdx)("inlineCode",{parentName:"p"},"AdobeError")," can be returned in the eventuality of an unexpected error or if the default timeout (5000ms) is met before the callback is returned with the visitor profile."),(0,l.mdx)("h4",{id:"java-4"},"Java"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public static void signalWithData(final Map<String, String> data, final AdobeCallback<Map<String, String>> callback)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"data")," is the traits data for the current visitor."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"callback")," is the void method that is invoked with the visitor's profile as a parameter.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'AdobeCallback<Map<String, String>> visitorProfileCallback = new AdobeCallback<Map<String, String>>() {\n    @Override\n    public void call(final Map<String, String> visitorProfile) {\n        // handle the returned visitorProfile here\n    }\n};\n​\nMap<String, String> traits = new HashMap<String, String>();\ntraits.put("trait", "xyz");\nAudience.signalWithData(traits, visitorProfileCallback);\n')),(0,l.mdx)("h4",{id:"kotlin-4"},"Kotlin"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'val traits: Map<String, String?> = mapOf(\n    "trait1" to "value1",\n    "trait2" to "value2"\n)\n\nAudience.signalWithData(traits) { visitorProfile ->\n    // handle the returned visitorProfile\n}\n')),(0,l.mdx)(s,{platform:"ios",api:"signal-with-data",repeat:"13",mdxType:"Variant"}),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"signalWithData")," API sends Audience Manager a signal with traits and returns the matching segments for the visitor in a closure."),(0,l.mdx)("p",null,"Audience Manager sends the AAM UUID in response in initial signal call. The AAM UUID is persisted in ",(0,l.mdx)("inlineCode",{parentName:"p"},"NSUserDefaults")," and is sent by the SDK in all subsequent signal requests. If available, the Experience Cloud ID (MID) is also sent in each signal request with the DPID and the DPUUID. The visitor profile that Audience Manager returns is saved in ",(0,l.mdx)("inlineCode",{parentName:"p"},"NSUserDefaults")," and is updated with every signal call."),(0,l.mdx)("h4",{id:"swift-3"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"static func signalWithData(data: [String: String], completion: @escaping ([String: String]?, Error?) -> Void)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"data")," is the traits data for the current visitor."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"callback")," is the void method that is invoked with the visitor's profile as a parameter.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},'Audience.signalWithData(data: ["trait": "trait value"]) { (traits, error) in\n  if error != nil {\n     // handle the error here\n     } else {\n     // handle the returned visitorProfile here\n     }\n}\n')),(0,l.mdx)("h4",{id:"objective-c-3"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) signalWithData:(NSDictionary<NSString *,NSString *> * _Nonnull) completion:^(NSDictionary<NSString *,NSString *> * _Nullable, NSError * _Nullable)completion\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSDictionary *traits = @{@"key1":@"value1",@"key2":@"value2"};\n[AEPMobileAudience signalWithData:traits completion:^(NSDictionary<NSString *,NSString *> * _Nullable visitorProfile, NSError* _Nullable error) {\n  if (error) {\n     // handle the error here\n     } else {\n     // handle the returned visitorProfile dictionary here\n     }\n}];\n')))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-solution-adobe-audience-manager-tabs-api-reference-md-f3274565cebdda998c56.js.map