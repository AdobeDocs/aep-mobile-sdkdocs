{"version":3,"file":"41b7f796116562f1371e0a2fb98c6ebc7f33ca5e-444e5e5902d5043048a6.js","mappings":"4OAUsBA,E,wEAFTC,EAAe,CAAC,EAOvBC,GALgBF,EAKQ,UALA,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EACjB,GAGKG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,SAACT,EAAD,CAASU,SAAS,UAAUC,IAAI,oBAAoBC,OAAO,IAAIH,QAAQ,aACvE,mBAAG,mBAAQI,WAAW,KAAnB,UACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,+CAIL,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,8DAIL,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,oBAAoBC,OAAO,KAAKH,QAAQ,aACxE,mBAAG,mBAAQI,WAAW,KAAnB,WACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBADZ,2CAIL,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBADZ,4DAIL,mBAAG,mBAAQA,WAAW,KAAnB,iBACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,+CAIL,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,8EAIL,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,0BAA0BC,OAAO,IAAIH,QAAQ,aAC7E,yDAA0C,cAAGI,WAAW,IACpD,KAAQ,kDAD8B,iBAA1C,WAEqC,cAAGA,WAAW,IAC/C,KAAQ,kDADyB,0BAFrC,wHAI2J,uBAAYA,WAAW,KAAvB,QAJ3J,2CAIsP,cAAGA,WAAW,IAChQ,KAAQ,kDAD0O,cAJtP,MAOA,mBAAG,mBAAQA,WAAW,KAAnB,UACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,sFAIL,oBACE,eAAIA,WAAW,OAAK,eAAIA,WAAW,MAAf,YAApB,iGAEF,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,6LASL,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,0BAA0BC,OAAO,KAAKH,QAAQ,aAC9E,mBAAG,mBAAQI,WAAW,KAAnB,WACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBADZ,yFAIL,oBACE,eAAIA,WAAW,OAAK,eAAIA,WAAW,MAAf,cAApB,8EAEF,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBADZ,qKAUL,mBAAG,mBAAQA,WAAW,KAAnB,iBACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,uGAIL,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,sJAML,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,iBAAiBC,OAAO,IAAIH,QAAQ,aACpE,2BAAY,cAAGI,WAAW,IACtB,KAAQ,kDADA,0BAAZ,qKAEwM,uBAAYA,WAAW,KAAvB,QAFxM,2CAEmS,cAAGA,WAAW,IAC7S,KAAQ,kDADuR,cAFnS,MAKA,mBAAG,mBAAQA,WAAW,KAAnB,UACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,oFAIL,oBACE,eAAIA,WAAW,OAAK,eAAIA,WAAW,MAAf,YAApB,wFAAiJ,cAAGA,WAAW,KAC3J,KAAQ,gBADqI,eAAjJ,0DAIF,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,kNASL,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,iBAAiBC,OAAO,KAAKH,QAAQ,aACrE,mBAAG,mBAAQI,WAAW,KAAnB,WACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBADZ,uFAIL,oBACE,eAAIA,WAAW,OAAK,eAAIA,WAAW,MAAf,cAApB,wHAAmL,cAAGA,WAAW,KAC7L,KAAQ,gCADuK,eAAnL,OAIF,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBADZ,8KAUL,mBAAG,mBAAQA,WAAW,KAAnB,iBACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,qGAIL,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,gJAML,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,oBAAoBC,OAAO,IAAIH,QAAQ,aACvE,2BAAY,uBAAYI,WAAW,KAAvB,0BAAZ,uKAAqP,uBAAYA,WAAW,KAAvB,QAArP,2CAAgV,uBAAYA,WAAW,KAAvB,cAAhV,MACA,mBAAG,mBAAQA,WAAW,KAAnB,UACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,iFAIL,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,YAApB,wHAEF,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,ocAaL,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,oBAAoBC,OAAO,KAAKH,QAAQ,aACxE,mBAAG,mBAAQI,WAAW,KAAnB,WACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBADZ,oFAIL,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,cAApB,qBAAgG,uBAAYA,WAAW,MAAvB,gBAAhG,mEAA4N,uBAAYA,WAAW,MAAvB,SAA5N,0EAAwV,uBAAYA,WAAW,MAAvB,SAAxV,kBAA4Z,cAAGA,WAAW,KACta,KAAQ,qDADgZ,YAA5Z,iEAIF,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBADZ,8rBAwBL,mBAAG,mBAAQA,WAAW,KAAnB,iBACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,0GAIL,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,yoBAkBL,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,qBAAqBC,OAAO,IAAIH,QAAQ,aACxE,mBAAG,mBAAQI,WAAW,KAAnB,UACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,8CAIL,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,sGAOL,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,qBAAqBC,OAAO,KAAKH,QAAQ,aACzE,4GAA6F,cAAGI,WAAW,IACvG,KAAQ,uDADiF,qCAA7F,MAGA,mBAAG,mBAAQA,WAAW,KAAnB,WACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBADZ,yIAKL,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBADZ,qFAOL,mBAAG,mBAAQA,WAAW,KAAnB,iBACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,iJAKL,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,0HAOL,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,kBAAkBC,OAAO,IAAIH,QAAQ,aACrE,mBAAG,mBAAQI,WAAW,KAAnB,UACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,2FAIL,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,0GAKL,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,kBAAkBC,OAAO,KAAKH,QAAQ,aACtE,mBAAG,mBAAQI,WAAW,KAAnB,WACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBADZ,6EAIL,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBADZ,mGAIL,mBAAG,mBAAQA,WAAW,KAAnB,iBACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,mJAKL,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,sOAKL,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,6BAA6BC,OAAO,KAAKH,QAAQ,aACjF,qMAAsL,cAAGI,WAAW,IAChM,KAAQ,wCAD0K,kBAAtL,8BAEyD,cAAGA,WAAW,IACnE,KAAQ,4BAD6C,WAFzD,kCAKA,mNAAoM,uBAAYA,WAAW,KAAvB,2BAApM,cAAqR,cAAGA,WAAW,IAC/R,KAAQ,wDADyQ,oCAArR,yHAEsK,cAAGA,WAAW,IAChL,KAAQ,6GAD0J,gEAFtK,MAKA,mBAAG,mBAAQA,WAAW,KAAnB,UACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,wFAIL,oBACE,eAAIA,WAAW,OAAK,eAAIA,WAAW,MAAf,yBAApB,8HAEF,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,uvDAqCL,mBAAG,mBAAQA,WAAW,KAAnB,YACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,mBADZ,0EAIL,oBACE,eAAIA,WAAW,OAAK,eAAIA,WAAW,MAAf,yBAApB,8HAEF,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,mBADZ,65CA+BL,iCACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,mBADZ,0cAcL,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,6BAA6BC,OAAO,KAAKH,QAAQ,aACjF,4LAA6K,cAAGI,WAAW,IACvL,KAAQ,wCADiK,kBAA7K,8BAEyD,cAAGA,WAAW,IACnE,KAAQ,4BAD6C,WAFzD,mCAKA,uEAAwD,cAAGA,WAAW,IAClE,KAAQ,qEAD4C,6BAAxD,4KAEkN,cAAGA,WAAW,IAC5N,KAAQ,2EADsM,4CAFlN,OAKA,mBAAG,mBAAQA,WAAW,KAAnB,WACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBADZ,4GAKL,oBACE,eAAIA,WAAW,OAAK,eAAIA,WAAW,MAAf,cAApB,8HAEF,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBADZ,61DAmDL,mBAAG,mBAAQA,WAAW,KAAnB,iBACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,6EAIL,oBACE,eAAIA,WAAW,OAAK,eAAIA,WAAW,MAAf,cAApB,8HAEF,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,o2EAyDL,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,oBAAoBC,OAAO,IAAIH,QAAQ,aACvE,mBAAG,mBAAQI,WAAW,KAAnB,UACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,2EAIL,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,4LAOL,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,oBAAoBC,OAAO,KAAKH,QAAQ,aACxE,mBAAG,mBAAQI,WAAW,KAAnB,WACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBADZ,2DAIL,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBADZ,8KAML,mBAAG,mBAAQA,WAAW,KAAnB,iBACH,mBAAG,mBAAQA,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,gEAIL,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,8SAOL,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,eAAeC,OAAO,IAAIH,QAAQ,aAClE,mBAAG,mBAAQI,WAAW,KAAnB,UACH,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,koBAsBL,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,eAAeC,OAAO,IAAIH,QAAQ,aAClE,mBAAG,mBAAQI,WAAW,KAAnB,WACH,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBADZ,imBAoBL,mBAAG,mBAAQA,WAAW,KAAnB,iBACH,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,w2BAsBL,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,gBAAgBC,OAAO,IAAIH,QAAQ,aACnE,mBAAG,mBAAQI,WAAW,KAAnB,UACH,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,uTAeL,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,gBAAgBC,OAAO,IAAIH,QAAQ,aACnE,mBAAG,mBAAQI,WAAW,KAAnB,WACH,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBADZ,wSAcL,mBAAG,mBAAQA,WAAW,KAAnB,iBACH,mBAAG,mBAAQA,WAAW,KAAnB,aACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,4SAYL,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,sBAAsBC,OAAO,IAAIH,QAAQ,aACzE,mBAAG,mBAAQI,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,2IAQL,SAACb,EAAD,CAASU,SAAS,UAAUC,IAAI,sBAAsBC,OAAO,IAAIH,QAAQ,aACzE,mBAAG,mBAAQI,WAAW,KAAnB,YACH,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBADZ,oLAWR,CAEDN,EAAWO,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/documentation/identity-for-edge-network/tabs/api-reference.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" api=\"extension-version\" repeat=\"5\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static String extensionVersion()\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`String extensionVersion = Identity.extensionVersion();\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"extension-version\" repeat=\"10\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static var extensionVersion: String\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let extensionVersion = EdgeIdentity.extensionVersion\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (nonnull NSString*) extensionVersion;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`NSString *extensionVersion = [AEPMobileEdgeIdentity extensionVersion];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"get-experience-cloud-id\" repeat=\"7\" mdxType=\"Variant\" />\n    <p>{`The ECID value is returned via the `}<a parentName=\"p\" {...{\n        \"href\": \"../mobile-core/api-reference.md#public-classes\"\n      }}>{`AdobeCallback`}</a>{`. When `}<a parentName=\"p\" {...{\n        \"href\": \"../mobile-core/api-reference.md#public-classes\"\n      }}>{`AdobeCallbackWithError`}</a>{` is provided to this API, the timeout value is 500ms. If the operation times out or an unexpected error occurs, the `}<inlineCode parentName=\"p\">{`fail`}</inlineCode>{` method is called with the appropriate `}<a parentName=\"p\" {...{\n        \"href\": \"../mobile-core/api-reference.md#public-classes\"\n      }}>{`AdobeError`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void getExperienceCloudId(final AdobeCallback<String> callback);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`callback`}</em>{` is invoked after the ECID is available. The callback may be invoked on a different thread.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Identity.getExperienceCloudId(new AdobeCallback<String>() {    \n    @Override    \n    public void call(String id) {        \n         //Handle the ID returned here    \n    }\n});\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"get-experience-cloud-id\" repeat=\"11\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func getExperienceCloudId(completion: @escaping (String?, Error?) -> Void)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`completion`}</em>{` is invoked after the ECID is available.  The default timeout is 1000ms.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`Identity.getExperienceCloudId { (ecid, error) in\n  if let error = error {\n    // handle error here\n  } else {\n    // handle the retrieved ID here\n  }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) getExperienceCloudId:^(NSString * _Nullable ecid, NSError * _Nullable error)completion\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`[AEPMobileEdgeIdentity getExperienceCloudId:^(NSString *ecid, NSError *error) {   \n    // handle the error and the retrieved ID here    \n}];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"get-identities\" repeat=\"7\" mdxType=\"Variant\" />\n    <p>{`When `}<a parentName=\"p\" {...{\n        \"href\": \"../mobile-core/api-reference.md#public-classes\"\n      }}>{`AdobeCallbackWithError`}</a>{` is provided, and you are fetching the identities from the Mobile SDK, the timeout value is 500ms. If the operation times out or an unexpected error occurs, the `}<inlineCode parentName=\"p\">{`fail`}</inlineCode>{` method is called with the appropriate `}<a parentName=\"p\" {...{\n        \"href\": \"../mobile-core/api-reference.md#public-classes\"\n      }}>{`AdobeError`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void getIdentities(final AdobeCallback<IdentityMap> callback);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`callback`}</em>{` is invoked after the identities are available. The return format is an instance of `}<a parentName=\"li\" {...{\n          \"href\": \"#identitymap\"\n        }}>{`IdentityMap`}</a>{`. The callback may be invoked on a different thread.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Identity.getIdentities(new AdobeCallback<IdentityMap>() {    \n    @Override    \n    public void call(IdentityMap identityMap) {        \n         //Handle the IdentityMap returned here    \n    }\n});\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"get-identities\" repeat=\"11\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func getIdentities(completion: @escaping (IdentityMap?, Error?) -> Void)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`completion`}</em>{` is invoked after the identities are available.  The default timeout is 1000ms. The return format is an instance of `}<a parentName=\"li\" {...{\n          \"href\": \"api-reference.md#identitymap\"\n        }}>{`IdentityMap`}</a>{`.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`Identity.getIdentities { (identityMap, error) in\n  if let error = error {\n    // handle error here\n  } else {\n    // handle the retrieved identitites here\n  }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) getIdentities:^(AEPIdentityMap * _Nullable map, NSError * _Nullable error)completion\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`[AEPMobileEdgeIdentity getIdentities:^(AEPIdentityMap *map, NSError *error) {   \n    // handle the error and the retrieved ID here\n}];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"get-url-variables\" repeat=\"7\" mdxType=\"Variant\" />\n    <p>{`When `}<inlineCode parentName=\"p\">{`AdobeCallbackWithError`}</inlineCode>{` is provided and you are fetching the URL variables from the Mobile SDK, the timeout value is 500ms. If the operation times out or an unexpected error occurs, the `}<inlineCode parentName=\"p\">{`fail`}</inlineCode>{` method is called with the appropriate `}<inlineCode parentName=\"p\">{`AdobeError`}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void getUrlVariables(final AdobeCallback<String> callback);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`callback`}</inlineCode>{` has a String value that contains the visitor identifiers as a query string after the service request is complete.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Identity.getUrlVariables(new AdobeCallback<String>() {    \n    @Override    \n    public void call(String urlVariablesString) {        \n        //handle the URL query parameter string here\n        //For example, open the URL in a webView  \n        WebView webView;\n        webView = (WebView)findViewById(R.id.your_webview); // initialize with your webView\n        webview.loadUrl(\"https://example.com?\" + urlVariablesString);\n    }\n});\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"get-url-variables\" repeat=\"11\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func getUrlVariables(completion: @escaping (String?, Error?) -> Void)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`completion`}</inlineCode>{` is invoked with `}<inlineCode parentName=\"li\">{`urlVariables`}</inlineCode>{` containing the visitor identifiers as a query string, or with `}<inlineCode parentName=\"li\">{`error`}</inlineCode>{` if an unexpected error occurs or the request times out. The returned `}<inlineCode parentName=\"li\">{`Error`}</inlineCode>{` contains the `}<a parentName=\"li\" {...{\n          \"href\": \"../mobile-core/mobile-core-api-reference#aeperror\"\n        }}>{`AEPError`}</a>{` code of the specific error. The default timeout is 1000ms.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`Identity.getUrlVariables { (urlVariables, error) in\n  if let error = error {\n    // handle error here\n  } else {\n    var urlStringWithVisitorData: String = \"https://example.com\"\n    if let urlVariables: String = urlVariables {\n      urlStringWithVisitorData.append(\"?\" + urlVariables)\n    }\n\n    guard let urlWithVisitorData: URL = URL(string: urlStringWithVisitorData) else {\n      // handle error, unable to construct URL\n      return\n    }\n\n    // handle the retrieved urlVariables encoded string here\n    // APIs which update the UI must be called from main thread\n    DispatchQueue.main.async {\n        self.webView.load(URLRequest(url: urlWithVisitorData))\n    }\n  }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) getUrlVariables:^(NSString * _Nullable urlVariables, NSError * _Nullable error)completion\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`[AEPMobileEdgeIdentity getUrlVariables:^(NSString *urlVariables, NSError *error){\n  if (error) {\n  // handle error here\n  } else {\n    // handle the URL query parameter string here\n    NSString* urlString = @\"https://example.com\";\n    NSString* urlStringWithVisitorData = [NSString stringWithFormat:@\"%@?%@\", urlString, urlVariables];\n    NSURL* urlWithVisitorData = [NSURL URLWithString:urlStringWithVisitorData];\n\n    // APIs which update the UI must be called from main thread\n    dispatch_async(dispatch_get_main_queue(), ^{\n      [[self webView] loadRequest:[NSURLRequest requestWithURL:urlWithVisitorData]];\n    }\n  }\n}];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"register-extension\" repeat=\"5\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void registerExtension()\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import com.adobe.marketing.mobile.edge.identity.Identity\n\n...\nIdentity.registerExtension();\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"register-extension\" repeat=\"11\" mdxType=\"Variant\" />\n    <p>{`In iOS, the registration occurs by passing Identity for Edge Network extension to the `}<a parentName=\"p\" {...{\n        \"href\": \"../mobile-core/api-reference.md#registerextension-s\"\n      }}>{`MobileCore.registerExtensions API`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func registerExtensions(_ extensions: [NSObject.Type], \n                               _ completion: (() -> Void)? = nil)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import AEPEdgeIdentity\n\n...\nMobileCore.registerExtensions([Identity.self])\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) registerExtensions: (NSArray<Class*>* _Nonnull) extensions \n                 completion: (void (^ _Nullable)(void)) completion;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`@import AEPEdgeIdentity;\n\n...\n[AEPMobileCore registerExtensions:@[AEPMobileEdgeIdentity.class] completion:nil];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"remove-identity\" repeat=\"5\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void removeIdentity(final IdentityItem item, final String namespace);\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`IdentityItem item = new IdentityItem(\"user@example.com\");\nIdentity.removeIdentity(item, \"Email\");\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"remove-identity\" repeat=\"10\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func removeIdentity(item: IdentityItem, withNamespace: String)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`Identity.removeIdentity(item: IdentityItem(id: \"user@example.com\"), withNamespace: \"Email\")\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) removeIdentityItem:(AEPIdentityItem * _Nonnull) item \n                             withNamespace: (NSString * _Nonnull) namespace\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`AEPIdentityItem *item = [[AEPIdentityItem alloc] initWithId:@\"user@example.com\" authenticatedState:AEPAuthenticatedStateAuthenticated primary:false];\n[AEPMobileEdgeIdentity removeIdentityItem:item withNamespace:@\"Email\"];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"set-advertising-identifier\" repeat=\"16\" mdxType=\"Variant\" />\n    <p>{`In order to enable collection of the user's current advertising tracking authorization selection for the provided advertising identifier, you need to install and register the `}<a parentName=\"p\" {...{\n        \"href\": \"../consent-for-edge-network/index.md\"\n      }}>{`AEPEdgeConsent`}</a>{` extension and update the `}<a parentName=\"p\" {...{\n        \"href\": \"../edge-network/index.md\"\n      }}>{`AEPEdge`}</a>{` dependency to minimum 1.3.2.`}</p>\n    <p>{`These examples require Google Play Services to be configured in your mobile application and use the Google Mobile Ads Lite SDK. For instructions on how to import the SDK and configure your `}<inlineCode parentName=\"p\">{`ApplicationManifest.xml`}</inlineCode>{` file see `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.google.com/admob/android/lite-sdk\"\n      }}>{`Google Mobile Ads Lite SDK setup`}</a>{`. For more information about advertising identifiers and how to handle them correctly in your mobile application see `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.google.com/android/reference/com/google/android/gms/ads/identifier/AdvertisingIdClient\"\n      }}>{`Google Play Services documentation about AdvertisingIdClient`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void setAdvertisingIdentifier(final String advertisingIdentifier);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`advertisingIdentifier`}</em>{` is an ID string that provides developers with a simple, standard system to continue to track ads throughout their apps.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`...\n@Override\npublic void onResume() {\n    super.onResume();\n    ...\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            String advertisingIdentifier = null;\n\n            try {\n                AdvertisingIdClient.Info adInfo = AdvertisingIdClient.getAdvertisingIdInfo(getApplicationContext());\n                if (adInfo != null) {\n                    if (!adInfo.isLimitAdTrackingEnabled()) {\n                        advertisingIdentifier = adInfo.getId();\n                    } else {\n                        Log.d(\"ExampleActivity\", \"Limit Ad Tracking is enabled by the user, cannot process the advertising identifier\");\n                    }\n                }\n            } catch (IOException e) {\n                // Unrecoverable error connecting to Google Play services (e.g.,\n                // the old version of the service doesn't support getting AdvertisingId).\n                Log.d(\"ExampleActivity\", \"IOException while retrieving the advertising identifier \" + e.getLocalizedMessage());\n            } catch (GooglePlayServicesNotAvailableException e) {\n                // Google Play services is not available entirely.\n                Log.d(\"ExampleActivity\", \"GooglePlayServicesNotAvailableException while retrieving the advertising identifier \" + e.getLocalizedMessage());\n            } catch (GooglePlayServicesRepairableException e) {\n                // Google Play services is not installed, up-to-date, or enabled.\n                Log.d(\"ExampleActivity\", \"GooglePlayServicesRepairableException while retrieving the advertising identifier \" + e.getLocalizedMessage());\n            }\n            MobileCore.setAdvertisingIdentifier(advertisingIdentifier);\n        }\n    }).start();\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Kotlin`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`public fun setAdvertisingIdentifier(advertisingIdentifier: String)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`advertisingIdentifier`}</em>{` is an ID string that provides developers with a simple, standard system to continue to track ads throughout their apps.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`import android.content.Context\nimport android.util.Log\nimport com.google.android.gms.ads.identifier.AdvertisingIdClient\nimport com.google.android.gms.common.GooglePlayServicesNotAvailableException\nimport com.google.android.gms.common.GooglePlayServicesRepairableException\nimport java.io.IOException\n...\n\nsuspend fun getGAID(applicationContext: Context): String {\n    var adID = \"\"\n    try {\n        val idInfo = AdvertisingIdClient.getAdvertisingIdInfo(applicationContext)\n        if (idInfo.isLimitAdTrackingEnabled) {\n            Log.d(\"ExampleActivity\", \"Limit Ad Tracking is enabled by the user, setting ad ID to \\\\\"\\\\\"\")\n            return adID\n        }\n        Log.d(\"ExampleActivity\", \"Limit Ad Tracking disabled; ad ID value: \\${idInfo.id}\")\n        adID = idInfo.id\n    } catch (e: GooglePlayServicesNotAvailableException) {\n        Log.d(\"ExampleActivity\", \"GooglePlayServicesNotAvailableException while retrieving the advertising identifier \\${e.localizedMessage}\")\n    } catch (e: GooglePlayServicesRepairableException) {\n        Log.d(\"ExampleActivity\", \"GooglePlayServicesRepairableException while retrieving the advertising identifier \\${e.localizedMessage}\")\n    } catch (e: IOException) {\n        Log.d(\"ExampleActivity\", \"IOException while retrieving the advertising identifier \\${e.localizedMessage}\")\n    }\n    Log.d(\"ExampleActivity\", \"Returning ad ID value: $adID\")\n    return adID\n}\n`}</code></pre>\n    <p>{`Call site:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`import kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.launch\n...\n\n // Create background coroutine scope to fetch ad ID value\nval scope = CoroutineScope(Dispatchers.IO).launch {\n    val adID = sharedViewModel.getGAID(context.applicationContext)\n    Log.d(\"ExampleActivity\", \"Sending ad ID value: $adID to MobileCore.setAdvertisingIdentifier\")\n    MobileCore.setAdvertisingIdentifier(adID)\n}\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"set-advertising-identifier\" repeat=\"14\" mdxType=\"Variant\" />\n    <p>{`In order to enable the collection of current advertising tracking user's selection based on the provided advertising identifier, you need to install and register the `}<a parentName=\"p\" {...{\n        \"href\": \"../consent-for-edge-network/index.md\"\n      }}>{`AEPEdgeConsent`}</a>{` extension and update the `}<a parentName=\"p\" {...{\n        \"href\": \"../edge-network/index.md\"\n      }}>{`AEPEdge`}</a>{` dependency to minimum 1.4.1. `}</p>\n    <p>{`Starting from iOS 14+, applications must use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/apptrackingtransparency\"\n      }}>{`App Tracking Transparency`}</a>{` framework to request user authorization before using the Identifier for Advertising (IDFA). To access IDFA and handle it correctly in your mobile application, see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/adsupport/asidentifiermanager\"\n      }}>{`Apple developer documentation about IDFA`}</a>{`. `}</p>\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`@objc(setAdvertisingIdentifier:)\npublic static func setAdvertisingIdentifier(_ identifier: String?)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`identifier`}</em>{` is an ID string that provides developers with a simple, standard system to continue to track ads throughout their apps.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import AdSupport\nimport AppTrackingTransparency\n...\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    ...\n    if #available(iOS 14, *) {\n       setAdvertisingIdentifierUsingTrackingManager()\n    } else {\n       // Fallback on earlier versions\n       setAdvertisingIdentifierUsingIdentifierManager()\n    }\n\n}\n\nfunc setAdvertisingIdentifierUsingIdentifierManager() {\n    var idfa:String = \"\";\n        if (ASIdentifierManager.shared().isAdvertisingTrackingEnabled) {\n            idfa = ASIdentifierManager.shared().advertisingIdentifier.uuidString;\n        } else {\n            Log.debug(label: \"AppDelegateExample\",\n                      \"Advertising Tracking is disabled by the user, cannot process the advertising identifier.\");\n        }\n        MobileCore.setAdvertisingIdentifier(idfa);\n}\n\n@available(iOS 14, *)\nfunc setAdvertisingIdentifierUsingTrackingManager() {\n    ATTrackingManager.requestTrackingAuthorization { (status) in\n        var idfa: String = \"\";\n\n        switch (status) {\n        case .authorized:\n            idfa = ASIdentifierManager.shared().advertisingIdentifier.uuidString\n        case .denied:\n            Log.debug(label: \"AppDelegateExample\",\n                      \"Advertising Tracking is denied by the user, cannot process the advertising identifier.\")\n        case .notDetermined:\n            Log.debug(label: \"AppDelegateExample\",\n                      \"Advertising Tracking is not determined, cannot process the advertising identifier.\")\n        case .restricted:\n            Log.debug(label: \"AppDelegateExample\",\n                      \"Advertising Tracking is restricted by the user, cannot process the advertising identifier.\")\n        }\n\n        MobileCore.setAdvertisingIdentifier(idfa)\n    }\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) setAdvertisingIdentifier: (NSString * _Nullable identifier);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`identifier`}</em>{` is an ID string that provides developers with a simple, standard system to continue to track ads throughout their apps.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`#import <AdSupport/ASIdentifierManager.h>\n#import <AppTrackingTransparency/ATTrackingManager.h>\n...\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n-   ...\n-   \n    if (@available(iOS 14, *)) {\n        [self setAdvertisingIdentifierUsingTrackingManager];\n    } else {\n        // fallback to earlier versions\n        [self setAdvertisingIdentifierUsingIdentifierManager];\n    }\n\n}\n\n- (void) setAdvertisingIdentifierUsingIdentifierManager {\n    // setup the advertising identifier\n    NSString *idfa = nil;\n    if ([[ASIdentifierManager sharedManager] isAdvertisingTrackingEnabled]) {\n        idfa = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];\n    } else {\n        [AEPLog debugWithLabel:@\"AppDelegateExample\"\n                       message:@\"Advertising Tracking is disabled by the user, cannot process the advertising identifier\"];\n    }\n    [AEPMobileCore setAdvertisingIdentifier:idfa];\n\n}\n\n- (void) setAdvertisingIdentifierUsingTrackingManager API_AVAILABLE(ios(14)) {\n    [ATTrackingManager requestTrackingAuthorizationWithCompletionHandler:\n    ^(ATTrackingManagerAuthorizationStatus status){\n        NSString *idfa = nil;\n        switch(status) {\n            case ATTrackingManagerAuthorizationStatusAuthorized:\n                idfa = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];\n                break;\n            case ATTrackingManagerAuthorizationStatusDenied:\n                [AEPLog debugWithLabel:@\"AppDelegateExample\"\n                               message:@\"Advertising Tracking is denied by the user, cannot process the advertising identifier\"];\n                break;\n            case ATTrackingManagerAuthorizationStatusNotDetermined:\n                [AEPLog debugWithLabel:@\"AppDelegateExample\"\n                               message:@\"Advertising Tracking is not determined, cannot process the advertising identifier\"];\n                break;\n            case ATTrackingManagerAuthorizationStatusRestricted:\n                [AEPLog debugWithLabel:@\"AppDelegateExample\"\n                               message:@\"Advertising Tracking is restricted by the user, cannot process the advertising identifier\"];\n                break;\n        }\n\n        [AEPMobileCore setAdvertisingIdentifier:idfa];\n    }];\n}\n`}</code></pre>\n    <Variant platform=\"android\" api=\"update-identities\" repeat=\"5\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void updateIdentities(final IdentityMap identityMap);\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`IdentityItem item = new IdentityItem(\"user@example.com\");\nIdentityMap identityMap = new IdentityMap();\nidentityMap.addItem(item, \"Email\")\nIdentity.updateIdentities(identityMap);\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"update-identities\" repeat=\"10\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func updateIdentities(with map: IdentityMap)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let identityMap = IdentityMap()\nidentityMap.addItem(item: IdentityItem(id: \"user@example.com\"), withNamespace: \"Email\")\nIdentity.updateIdentities(with: identityMap)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) updateIdentities:(AEPIdentityMap * _Nonnull)map\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`AEPIdentityItem *item = [[AEPIdentityItem alloc] initWithId:@\"user@example.com\" authenticatedState:AEPAuthenticatedStateAuthenticated primary:false];\nAEPIdentityMap *map = [[AEPIdentityMap alloc] init];\n[map addItem:item withNamespace:@\"Email\"];\n[AEPMobileEdgeIdentity updateIdentities:map];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"identity-map\" repeat=\"3\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// Construct\nIdentityMap identityMap = new IdentityMap();\n\n// Add an item\nIdentityItem item = new IdentityItem(\"user@example.com\");\nidentityMap.addItem(item, \"Email\");\n\n// Remove an item\nIdentityItem item = new IdentityItem(\"user@example.com\");\nidentityMap.removeItem(item, \"Email\");\n\n// Get a list of items for a given namespace\nList<IdentityItem> items = identityMap.getIdentityItemsForNamespace(\"Email\");\n\n// Get a list of all namespaces used in current IdentityMap\nList<String> namespaces = identityMap.getNamespaces();\n\n// Check if IdentityMap has no identities\nboolean hasNotIdentities = identityMap.isEmpty();\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"identity-map\" repeat=\"6\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`// Initialize\nlet identityMap: IdentityMap = IdentityMap()\n\n// Add an item\nidentityMap.add(item: IdentityItem(id: \"user@example.com\"), withNamespace: \"Email\")\n\n// Remove an item\nidentityMap.remove(item: IdentityItem(id: \"user@example.com\", withNamespace: \"Email\"))\n\n// Get a list of items for a given namespace\nlet items: [IdentityItem] = identityMap.getItems(withNamespace: \"Email\")\n\n// Get a list of all namespaces used in current IdentityMap\nlet namespaces: [String] = identityMap.namespaces\n\n// Check if IdentityMap has no identities\nlet hasNoIdentities: Bool = identityMap.isEmpty\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`// Initialize\nAEPIdentityMap* identityMap = [[AEPIdentityMap alloc] init];\n\n// Add an item\nAEPIdentityItem* item = [[AEPIdentityItem alloc] initWithId:@\"user@example.com\" authenticatedState:AEPAuthenticatedStateAuthenticated primary:false];\n[identityMap addItem:item withNamespace:@\"Email\"];\n\n// Remove an item\nAEPIdentityItem* item = [[AEPIdentityItem alloc] initWithId:@\"user@example.com\" authenticatedState:AEPAuthenticatedStateAuthenticated primary:false];\n[identityMap removeItem:item withNamespace:@\"Email\"];\n\n// Get a list of items for a given namespace\nNSArray<AEPIdentityItem*>* items = [identityMap getItemsWithNamespace:@\"Email\"];\n\n// Get a list of all namespaces used in current IdentityMap\nNSArray<NSString*>* namespaces = identityMap.namespaces;\n\n// Check if IdentityMap has no identities\nbool hasNoIdentities = identityMap.isEmpty;\n`}</code></pre>\n    <Variant platform=\"android\" api=\"identity-item\" repeat=\"3\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// Construct\nIdentityItem item = new IdentityItem(\"identifier\");\n\nIdentityItem item = new IdentityItem(\"identifier\", AuthenticatedState.AUTHENTICATED, false);\n\n\n// Getters\nString id = item.getId();\n\nAuthenticatedState state = item.getAuthenticatedState();\n\nboolean primary = item.isPrimary();\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"identity-item\" repeat=\"6\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`// Initialize\nlet item = IdentityItem(id: \"identifier\")\n\nlet item = IdentityItem(id: \"identifier\", authenticatedState: .authenticated, primary: false)\n\n// Getters\nlet id: String = item.id\n\nlet state: AuthenticatedState = item.authenticatedState\n\nlet primary: Bool = item.primary\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`// Initialize\nAEPIdentityItem* item = [[AEPIdentityItem alloc] initWithId:@\"identity\" authenticatedState:AEPAuthenticatedStateAuthenticated primary:false];\n\n// Getters\nNSString* id = primaryEmail.id;\n\nlong state = primaryEmail.authenticatedState;\n\nbool primary = primaryEmail.primary;\n`}</code></pre>\n    <Variant platform=\"android\" api=\"authenticated-state\" repeat=\"2\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public enum AuthenticatedState {\n    AMBIGUOUS(\"ambiguous\"),\n    AUTHENTICATED(\"authenticated\"),\n    LOGGED_OUT(\"loggedOut\");\n}\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"authenticated-state\" repeat=\"2\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`@objc(AEPAuthenticatedState)\npublic enum AuthenticatedState: Int, RawRepresentable, Codable {\n    case ambiguous = 0\n    case authenticated = 1\n    case loggedOut = 2\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Variant","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","platform","api","repeat","parentName","isMDXComponent"],"sourceRoot":""}