"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[3111],{81686:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return d},default:function(){return u}});var a,i=t(87462),o=t(63366),r=(t(15007),t(64983)),l=t(91515),p=["components"],d={},s=(a="Variant",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",e)}),m={_frontmatter:d},c=l.Z;function u(e){var n=e.components,t=(0,o.Z)(e,p);return(0,r.mdx)(c,(0,i.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)(s,{platform:"android",task:"add",repeat:"4",mdxType:"Variant"}),(0,r.mdx)("p",null,"Add the Mobile Services extension to your project using the app's Gradle file."),(0,r.mdx)("h4",{id:"java"},"Java"),(0,r.mdx)("p",null,"Import the Mobile Services extension in your application's main activity."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"import com.adobe.marketing.mobileservices.*;\n")),(0,r.mdx)(s,{platform:"ios-aep",task:"add",repeat:"6",mdxType:"Variant"}),(0,r.mdx)("p",null,"You can add the library to your project through your ",(0,r.mdx)("inlineCode",{parentName:"p"},"Podfile")," by adding the ",(0,r.mdx)("inlineCode",{parentName:"p"},"AEPMobileServices")," pod."),(0,r.mdx)("p",null,"Import the library into your project:"),(0,r.mdx)("h4",{id:"swift"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"import AEPCore\nimport AEPServices\nimport AEPIdentity\nimport AEPLifecycle\nimport AEPAnalytics\nimport AEPMobileServices\n")),(0,r.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"@import AEPCore\n@import AEPServices;\n@import AEPIdentity\n@import AEPLifecycle\n@import AEPAnalytics\n@import AEPMobileServices\n")),(0,r.mdx)(s,{platform:"ios-acp",task:"add",repeat:"6",mdxType:"Variant"}),(0,r.mdx)("p",null,"You can add the library to your project through your ",(0,r.mdx)("inlineCode",{parentName:"p"},"Podfile")," by adding the ",(0,r.mdx)("inlineCode",{parentName:"p"},"ACPMobileServices")," pod."),(0,r.mdx)("p",null,"Import the library into your project:"),(0,r.mdx)("h4",{id:"swift-1"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"import ACPCore\nimport ACPAnalytics\nimport ACPMobileServices\n")),(0,r.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'#import "ACPCore.h"\n#import "ACPIdentity.h"\n#import "ACPLifecycle.h"\n#import "ACPAnalytics.h"\n#import "ACPMobileServices.h"\n')),(0,r.mdx)(s,{platform:"android",task:"register",repeat:"3",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-1"},"Java"),(0,r.mdx)("p",null,"Call the ",(0,r.mdx)("inlineCode",{parentName:"p"},"setApplication()")," method once in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"onCreate()")," method of your main activity. For example, your code might look like the following:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public class MobileServicesApp extends Application {\n\n@Override\npublic void onCreate() {\n     super.onCreate();\n     MobileCore.setApplication(this);\n\n     try {\n             Analytics.registerExtension();\n             MobileServices.registerExtension(); //Register Mobile Services with Mobile Core\n             Lifecycle.registerExtension();\n             Identity.registerExtension();\n             MobileCore.start(null);\n     } catch (Exception e) {\n     //Log the exception\n     }\n  }\n}\n")),(0,r.mdx)(s,{platform:"ios-aep",task:"register",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("p",null,"In your app's ",(0,r.mdx)("inlineCode",{parentName:"p"},"application:didFinishLaunchingWithOptions")," function, register the Mobile Services extension with the Mobile Core:"),(0,r.mdx)("h4",{id:"swift-2"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    MobileCore.registerExtensions([Identity.self, Lifecycle.self, Analytics.self,  AEPMobileServices.self], {\n        MobileCore.configureWith(appId: "yourLaunchEnvironmentID")\n        MobileCore.lifecycleStart(additionalContextData: ["contextDataKey": "contextDataVal"])\n    })\n  ...\n}\n')),(0,r.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    NSArray *extensionsToRegister = @[AEPMobileIdentity.class, AEPMobileLifecycle.class, AEPMobileAnalytics.class, AEPMobileServices.class];\n    [AEPMobileCore registerExtensions:extensionsToRegister completion:^{\n        // Use the App id assigned to this application via Adobe Launch\n        [AEPMobileCore configureWithAppId: @"yourLaunchEnvironmentID"];\n        [AEPMobileCore lifecycleStart:@{@"contextDataKey": @"contextDataVal"}];\n    }];\n    ....\n}\n')),(0,r.mdx)(s,{platform:"ios-acp",task:"register",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("p",null,"In your app's ",(0,r.mdx)("inlineCode",{parentName:"p"},"application:didFinishLaunchingWithOptions")," function, register the Mobile Services extension with the Mobile Core:"),(0,r.mdx)("h4",{id:"swift-3"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"func application(_application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool{\n        ACPAnalytics.registerExtension()\n        ACPIdentity.registerExtension()\n        ACPLifecycle.registerExtension()\n        ACPMobileServices.registerExtension()\n        ACPCore.start {\n            ACPCore.lifecycleStart(nil)\n        }\n    ...\n    return true\n  }\n")),(0,r.mdx)("h4",{id:"objective-c-3"},"Objective-C"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n   [ACPAnalytics registerExtension];\n   [ACPLifecycle registerExtension];\n   [ACPIdentity registerExtension];\n   [ACPMobileServices registerExtension];\n   [ACPCore start:nil]\n   // Override point for customization after application launch.\n   return YES;\n}\n")),(0,r.mdx)(s,{platform:"android",task:"set-push-messaging",repeat:"6",mdxType:"Variant"}),(0,r.mdx)("p",null,"Obtain the registration ID/token by using the ",(0,r.mdx)("a",{parentName:"p",href:"https://firebase.google.com/docs/cloud-messaging/android/client"},"Firebase Cloud Messaging (FCM) APIs"),"."),(0,r.mdx)("h4",{id:"java-2"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"void setPushIdentifier(final String registrationID)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"MobileCore.setPushIdentifier(registrationID);\n")),(0,r.mdx)(s,{platform:"ios-aep",task:"set-push-messaging",repeat:"9",mdxType:"Variant"}),(0,r.mdx)("p",null,"iOS simulators do not support push messaging."),(0,r.mdx)("p",null,"After following Apple's ",(0,r.mdx)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/HandlingRemoteNotifications.html#//apple_ref/doc/uid/TP40008194-CH6-SW1"},"configure remote notification document"),", to get your app ready to handle push notifications, set the push token by using the ",(0,r.mdx)("a",{parentName:"p",href:"../mobile-core/identity/api-reference.md#setpushidentifier"},(0,r.mdx)("inlineCode",{parentName:"a"},"setPushIdentifier"))," API:"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(setPushIdentifier:)\npublic static func setPushIdentifier(_ deviceToken: Data?)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("h4",{id:"swift-4"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    let tokenParts = deviceToken.map { data in String(format: "%02.2hhx", data) }\n    let token = tokenParts.joined()\n    print("Device Token: (token)")\n\n    // Send push token to experience platform\n    MobileCore.setPushIdentifier(deviceToken)\n}\n')),(0,r.mdx)("h4",{id:"objective-c-4"},"Objective-C"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objective-c"},'- (void)application:(UIApplication *)app\n        didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)devToken {\n    // Forward the token to your provider, using a custom method.\n    NSUInteger len = devToken.length;\n    if (len == 0) {\n        return;\n    }\n    const unsigned char *buffer = devToken.bytes;\n    NSMutableString *hexString  = [NSMutableString stringWithCapacity:(len * 2)];\n    for (int i = 0; i < len; ++i) {\n        [hexString appendFormat:@"%02x", buffer[i]];\n    }\n    NSString *token = [hexString copy];\n    [AEPMobileCore setPushIdentifier:token];\n}\n')),(0,r.mdx)(s,{platform:"ios-acp",task:"set-push-messaging",repeat:"9",mdxType:"Variant"}),(0,r.mdx)("p",null,"iOS simulators do not support push messaging."),(0,r.mdx)("p",null,"After following Apple's ",(0,r.mdx)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/HandlingRemoteNotifications.html#//apple_ref/doc/uid/TP40008194-CH6-SW1"},"configure remote notification document"),", to get your app ready to handle push notifications, set the push token by using the ",(0,r.mdx)("a",{parentName:"p",href:"../mobile-core/identity/api-reference.md#setpushidentifier"},(0,r.mdx)("inlineCode",{parentName:"a"},"setPushIdentifier"))," API:"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) setPushIdentifier: (nullable NSData*) deviceToken;\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("h4",{id:"swift-5"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    let tokenParts = deviceToken.map { data in String(format: "%02.2hhx", data) }\n    let token = tokenParts.joined()\n    print("Device Token: (token)")\n\n    // Send push token to experience platform\n    ACPCore.setPushIdentifier(deviceToken)\n}\n')),(0,r.mdx)("h4",{id:"objective-c-5"},"Objective-C"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (void) application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n  // Set the deviceToken that the APNS has assigned to the device\n  [ACPCore setPushIdentifier:deviceToken];\n  //...\n}\n")),(0,r.mdx)(s,{platform:"android",task:"set-push-tracking",repeat:"1",mdxType:"Variant"}),(0,r.mdx)("p",null,"On Android, the SDK handles push tracking to analytics without any additional set up. If the application has implemented the ",(0,r.mdx)("inlineCode",{parentName:"p"},"FirebaseMessaginService")," class and will handle the push notifications when the application is in foreground, read the push data from the received Intent and add it to the intent extras of the Activity to be launched. An example can be found in ",(0,r.mdx)("a",{parentName:"p",href:"https://experienceleague.adobe.com/docs/mobile-services_en/android/messaging-android/push-messaging/t-mob-impl-push-deeplinking-android-4x.html?lang=en"},"the Mobile Services implement push messaging tutorial"),"."),(0,r.mdx)(s,{platform:"ios-aep",task:"set-push-tracking",repeat:"8",mdxType:"Variant"}),(0,r.mdx)("p",null,"Use the following API to track a push messaging click in Adobe Analytics."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(collectLaunchInfo:)\npublic static func collectLaunchInfo(_ userInfo: [String: Any])\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("h4",{id:"swift-6"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"AEPCore.collectLaunchInfo(userInfo)\n")),(0,r.mdx)("h4",{id:"objective-c-6"},"Objective-C"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[AEPMobileCore collectLaunchInfo:userInfo];\n")),(0,r.mdx)(s,{platform:"ios-acp",task:"set-push-tracking",repeat:"8",mdxType:"Variant"}),(0,r.mdx)("p",null,"Use the following API to track a push messaging click in Adobe Analytics."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) collectLaunchInfo:(NSDictionary *)userInfo;\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("h4",{id:"swift-7"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"ACPCore.collectLaunchInfo(userInfo)\n")),(0,r.mdx)("h4",{id:"objective-c-7"},"Objective-C"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[ACPCore collectLaunchInfo:userInfo];\n")),(0,r.mdx)(s,{platform:"android",task:"set-in-app-messaging",repeat:"8",mdxType:"Variant"}),(0,r.mdx)("p",null,"Update the ",(0,r.mdx)("inlineCode",{parentName:"p"},"AndroidManifest.xml")," file to declare the full screen activity and enable the Message Notification Handler."),(0,r.mdx)("h4",{id:"java-3"},"Java"),(0,r.mdx)("p",null,"If you are using either fullscreen message or local notification functionality, update the ",(0,r.mdx)("inlineCode",{parentName:"p"},"AndroidManifest.xml")," with the following:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<activity\n    android:name="com.adobe.marketing.mobile.MessageFullScreenActivity"\n    android:windowSoftInputMode="adjustUnspecified|stateHidden" >\n</activity>\n<receiver android:name="com.adobe.marketing.mobile.MessageNotificationHandler" />\n')),(0,r.mdx)("p",null,"If you selected a modal layout, select one of the following themes for the message:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"Theme.Translucent.NoTitleBar.Fullscreen")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"Theme.Translucent.NoTitleBar")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"Theme.Translucent"))),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-xml"},'<activity\nandroid:name="com.adobe.marketing.mobile.MessageFullScreenActivity"\nandroid:theme="@android:style/Theme.Translucent.NoTitleBar.Fullscreen"\nandroid:windowSoftInputMode="adjustUnspecified|stateHidden" >\n</activity>\n<receiver android:name="com.adobe.marketing.mobile.MessageNotificationHandler" />\n')),(0,r.mdx)(s,{platform:"ios",task:"set-in-app-messaging",repeat:"1",mdxType:"Variant"}),(0,r.mdx)("p",null,"No setup is required for iOS, since Mobile SDK automatically handles in-app message support."),(0,r.mdx)(s,{platform:"android",task:"set-icon",repeat:"12",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"setsmalliconresourceid"},"setSmallIconResourceId"),(0,r.mdx)("p",null,"This API sets the small icon that is used for notifications that are created by the SDK. This icon appears in the status bar and is the secondary image that is displayed shown when the user sees the complete notification in the notification center."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void setSmallIconResourceId(final int resourceId);\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"MobileCore.setSmallIconResourceID(R.drawable.appIcon);\n")),(0,r.mdx)("h4",{id:"setlargeiconresourceid"},"setLargeIconResourceId"),(0,r.mdx)("p",null,"This API sets the large icon that is used for notifications that are created by the SDK. This icon is the primary image that is displayed when the user sees the complete notification in the notification center."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void setLargeIconResourceId(final int resourceId);\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"MobileCore.setLargeIconResourceId(R.drawable.appIcon);\n")),(0,r.mdx)(s,{platform:"ios",task:"set-icon",repeat:"1",mdxType:"Variant"}),(0,r.mdx)("p",null,"No setup is required, since icons are automatically handled by the SDK for iOS."),(0,r.mdx)(s,{platform:"android",task:"track-deep-link",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-4"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void trackAdobeDeepLink(final Uri uri)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"MobileServices.trackAdobeDeepLink\n")),(0,r.mdx)(s,{platform:"ios-aep",task:"track-deep-link",repeat:"15",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-8"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"public static func trackAdobeDeepLink(url: String)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"func application(_ application: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {\n    AEPMobileServices.trackAdobeDeepLink(url)\n    /*\n     Handle deep link\n     */\n    return true\n}\n")),(0,r.mdx)("h4",{id:"objective-c-8"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objective-c"},"+ (void) trackAdobeDeepLink: (NSURL* _Nonnull) deeplink;\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objective-c"},"-(BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation{\n    [AEPMobileServices trackAdobeDeepLink:url];\n    ....\n}\n")),(0,r.mdx)("p",null,"In iOS 13 and later, for a scene-based application, use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"UISceneDelegate"),"'s ",(0,r.mdx)("inlineCode",{parentName:"p"},"scene(_:openURLContexts:)")," method as follows:"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Swift")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"func scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>) {\n    guard let urlContexts = URLContexts.first else { return }\n    AEPMobileServices.trackAdobeDeepLink(urlContexts.url)\n    /*\n     Handle deep link\n     */\n}\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Objective-C")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objective-c"},"- (void)scene:(UIScene *)scene openURLContexts:(nonnull NSSet<UIOpenURLContext *> *)URLContexts {\n    NSURL *url = [[URLContexts allObjects] firstObject].URL;\n    [AEPMobileServices trackAdobeDeepLink:url];\n}\n")),(0,r.mdx)(s,{platform:"ios-acp",task:"track-deep-link",repeat:"15",mdxType:"Variant"}),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) trackAdobeDeepLink: (NSURL* _Nonnull) deeplink;\n")),(0,r.mdx)("h4",{id:"swift-9"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"func application(_ application: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {\n    ACPMobileServices.trackAdobeDeepLink(url)\n    /*\n     Handle deep link\n     */\n    return true\n}\n")),(0,r.mdx)("h4",{id:"objective-c-9"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url options:(NSDictionary<NSString *, id> *)options {\n    [ACPMobileServices trackAdobeDeepLink:url];\n    /*\n     Handle deep link\n     */\n    return YES;\n}\n")),(0,r.mdx)("p",null,"In iOS 13 and later, for a scene-based application, use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"UISceneDelegate"),"'s ",(0,r.mdx)("inlineCode",{parentName:"p"},"scene(_:openURLContexts:)")," method as follows:"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Swift")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"func scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>) {\n    guard let urlContexts = URLContexts.first else { return }\n    ACPMobileServices.trackAdobeDeepLink(urlContexts.url)\n    /*\n     Handle deep link\n     */\n}\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Objective-C")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (void) scene:(UIScene *)scene openURLContexts:(NSSet<UIOpenURLContext *> *)URLContexts {\n    UIOpenURLContext * urlContext = URLContexts.anyObject;\n    if (urlContext != nil) {\n        [ACPMobileServices trackAdobeDeepLink:url];\n        /*\n         Handle deep link\n         */\n    }\n}\n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=423b4e49a7ceff25efa2c694f1dd21775207a3d8-6b699b7b3371216bed8c.js.map