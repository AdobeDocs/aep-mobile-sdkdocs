{"version":3,"file":"06be9c7c4d5578484afd29a814daac62ab927e0e-15fe0e299f9821f30993.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer-decisioning/tabs/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Alerts from '/src/pages/resources/alerts.md';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Variant platform=\"android-kotlin\" task=\"add\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`Add the required dependencies to your project by including them in the app's Gradle file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`implementation(platform(\"com.adobe.marketing.mobile:sdk-bom:3.+\"))\nimplementation(\"com.adobe.marketing.mobile:core\")\nimplementation(\"com.adobe.marketing.mobile:edgeidentity\")\nimplementation(\"com.adobe.marketing.mobile:edge\")\nimplementation(\"com.adobe.marketing.mobile:optimize\")\n`}</code></pre>\n    <Alerts query=\"platform=android-gradle&componentClass=InlineNestedAlert\" mdxType=\"Alerts\" />\n    <Variant platform=\"android-groovy\" task=\"add\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`Add the required dependencies to your project by including them in the app's Gradle file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`implementation platform('com.adobe.marketing.mobile:sdk-bom:3.+')\nimplementation 'com.adobe.marketing.mobile:core'\nimplementation 'com.adobe.marketing.mobile:edgeidentity'\nimplementation 'com.adobe.marketing.mobile:edge'\nimplementation 'com.adobe.marketing.mobile:optimize'\n`}</code></pre>\n    <Alerts query=\"platform=android-gradle&componentClass=InlineNestedAlert\" mdxType=\"Alerts\" />\n    <Variant platform=\"ios-pods\" task=\"add\" repeat=\"2\" mdxType=\"Variant\" />\n    <p>{`Add the required dependencies to your project using CocoaPods. Add following pods in your `}<inlineCode parentName=\"p\">{`Podfile`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`use_frameworks!\ntarget 'YourAppTarget' do\n    pod 'AEPCore', '~> 5.0'\n    pod 'AEPEdge', '~> 5.0'\n    pod 'AEPEdgeIdentity', '~> 5.0'\n    pod 'AEPOptimize', '~> 5.0'\nend\n`}</code></pre>\n    <Variant platform=\"android\" task=\"decisionscope\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`final DecisionScope decisionScope = DecisionScope(\"xcore:offer-activity:1111111111111111\", \"xcore:offer-placement:1111111111111111\", 3);\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"decisionscope\" repeat=\"4\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let decisionScope = DecisionScope(activityId: \"xcore:offer-activity:1111111111111111\", \n                                  placementId: \"xcore:offer-placement:1111111111111111\",\n                                  itemCount: 3)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`AEPDecisionScope* decisionScope = [[AEPDecisionScope alloc] initWithActivityId:@\"xcore:offer-activity:1111111111111111\"         \n                                                                   placementId:@\"xcore:offer-placement:1111111111111111\" \n                                                                     itemCount:3];\n`}</code></pre>\n    <Variant platform=\"android\" task=\"encodedscope\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`final DecisionScope decisionScope = DecisionScope(\"eyJ4ZG06YWN0aXZpdHlJZCI6Inhjb3JlOm9mZmVyLWFjdGl2aXR5OjEyYmEyZjM4MWJjYTY3NWUiLCJ4ZG06cGxhY2VtZW50SWQiOiJ4Y29yZTpvZmZlci1wbGFjZW1lbnQ6MTJiOWEwMDA1NTUwNzM1NyIsICJ4ZG06aXRlbUNvdW50IjozfQ==\");\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"encodedscope\" repeat=\"4\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let decisionScope = DecisionScope(name: \"eyJ4ZG06YWN0aXZpdHlJZCI6Inhjb3JlOm9mZmVyLWFjdGl2aXR5OjEyYmEyZjM4MWJjYTY3NWUiLCJ4ZG06cGxhY2VtZW50SWQiOiJ4Y29yZTpvZmZlci1wbGFjZW1lbnQ6MTJiOWEwMDA1NTUwNzM1NyIsICJ4ZG06aXRlbUNvdW50IjozfQ==\")\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-1\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`AEPDecisionScope* decisionScope = [[AEPDecisionScope alloc] initWithName:@\"eyJ4ZG06YWN0aXZpdHlJZCI6Inhjb3JlOm9mZmVyLWFjdGl2aXR5OjEyYmEyZjM4MWJjYTY3NWUiLCJ4ZG06cGxhY2VtZW50SWQiOiJ4Y29yZTpvZmZlci1wbGFjZW1lbnQ6MTJiOWEwMDA1NTUwNzM1NyIsICJ4ZG06aXRlbUNvdW50IjozfQ==\"];\n`}</code></pre>\n    <Variant platform=\"android\" task=\"target-location\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-2\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`final DecisionScope decisionScope = DecisionScope(\"myTargetLocation\");\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"target-location\" repeat=\"4\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-2\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let decisionScope = DecisionScope(name: \"myTargetLocation\")\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-2\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`AEPDecisionScope* decisionScope = [[AEPDecisionScope alloc] initWithName:@\"myTargetLocation\"];\n`}</code></pre>\n    <Variant platform=\"android\" task=\"target-parameters\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-3\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`final Map<String, Object> data = new HashMap<>();\nfinal Map<String, String> targetParameters = new HashMap<>();\n\n// Add mbox parameters\ntargetParameters.put(\"someKey\", \"someValue\");\n\n// Add profile parameters - prefix with profile.\ntargetParameters.put(\"profile.membershipLevel\", \"platinum\");\n\n// Add product parameters\ntargetParameters.put(\"productId\", \"111\");\ntargetParameters.put(\"categoryId\", \"Books\");\n\n// Add order parameters\ntargetParameters.put(\"orderId\", \"10\");\ntargetParameters.put(\"orderTotal\", \"110.56\");\ntargetParameters.put(\"purchasedProductIds\", \"111\");\n\ndata.put(\"__adobe\", new HashMap<String, Object>() {\n  {\n    put(\"target\", targetParameters);\n  }\n});\n\n\nfinal DecisionScope decisionScope = DecisionScope(\"myTargetLocation\") // Target location (or mbox)\n\nfinal List<DecisionScope> decisionScopes = new ArrayList<>();\ndecisionScopes.add(decisionScope);\n\nOptimize.updatePropositions(decisionScopes, null, data);\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"target-parameters\" repeat=\"4\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-3\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`var data: [String: Any] = [:]\nvar targetParameters: [String: String] = [:]\n\n// Add mbox parameters\ntargetParameters[\"someKey\"] = \"someValue\"\n\n// Add profile parameters - prefix with profile.\ntargetParameters[\"profile.membershipLevel\"] = \"platinum\"\n\n// Add product parameters\ntargetParameters[\"productId\"] = \"111\"\ntargetParameters[\"categoryId\"] = \"Books\"\n\n// Add order parameters\ntargetParameters[\"orderId\"] = \"10\"\ntargetParameters[\"orderTotal\"] = \"110.56\"\ntargetParameters[\"purchasedProductIds\"] = \"111\"\n\ndata[\"__adobe\"] = [\n  \"target\": targetParameters\n]\n\nlet decisionScope = DecisionScope(name: \"myTargetLocation\") // Target location (or mbox)\nOptimize.updatePropositions(for: [decisionScope] withXdm: nil andData: data)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-3\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`NSMutableDictionary* data = [NSMutableDictionary dictionary];\nNSMutableDictionary* targetParameters = [NSMutableDictionary dictionary];\n\n// Add mbox parameters\ntargetParameters[@\"someKey\"] = @\"someValue\";\n\n// Add profile parameters - prefix with profile.\ntargetParameters[@\"profile.membershipLevel\"] = @\"platinum\";\n\n// Add product parameters\ntargetParameters[@\"productId\"] = @\"111\";\ntargetParameters[@\"categoryId\"] = @\"Books\";\n\n// Add order parameters\ntargetParameters[@\"orderId\"] = @\"10\";\ntargetParameters[@\"orderTotal\"] = @\"110.56\";\ntargetParameters[@\"purchasedProductIds\"] = @\"111\";\n\n[data setObject:[NSDictionary dictionaryWithObject:targetParameters forKey:@\"target\"] forKey:@\"__adobe\"];\n\nAEPDecisionScope* decisionScope = [[AEPDecisionScope alloc] initWithName:@\"myTargetLocation\"]; // Target location (or mbox)\n[AEPMobileOptimize updatePropositions:@[decisionScope] withXdm:nil andData:data];\n`}</code></pre>\n    <Variant platform=\"android\" task=\"target-tpid\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-4\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`final IdentityItem item = new IdentityItem(\"1111\", AuthenticatedState.AUTHENTICATED, true);\nfinal IdentityMap identityMap = new IdentityMap();\nidentityMap.addItem(item, \"userCRMID\") // userCRMID being used as Third Party ID\nIdentity.updateIdentities(identityMap);\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"target-tpid\" repeat=\"4\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-4\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let identityMap = IdentityMap()\nidentityMap.add(item: IdentityItem(id: \"1111\", authenticatedState: AuthenticatedState.authenticated, primary: true),\n                withNamespace: \"userCRMID\") // userCRMID being used as Third Party ID\nIdentity.updateIdentities(with: identityMap)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-4\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`AEPIdentityItem *item = [[AEPIdentityItem alloc] initWithId:@\"1111\" authenticatedState:AEPAuthenticatedStateAuthenticated primary:true];\n\nAEPIdentityMap *identityMap = [[AEPIdentityMap alloc] init];\n[identityMap addItem:item withNamespace:@\"userCRMID\"]; // userCRMID being used as Third Party ID\n\n[AEPMobileEdgeIdentity updateIdentities:identityMap];\n`}</code></pre>\n    <Variant platform=\"android\" task=\"proposition-tracking-offer\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-5\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class Offer {\n  ...\n  /**\n    * Dispatches an event for the Edge network extension to send an Experience Event to the Edge network with the display interaction data for the\n    * given {@code Proposition} offer.\n    */\n  public void displayed() {...}\n\n  /**\n    * Dispatches an event for the Edge network extension to send an Experience Event to the Edge network with the tap interaction data for the\n    * given {@code Proposition} offer.\n    */\n  public void tapped() {...}\n}\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"proposition-tracking-offer\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-5\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`public extension Offer {\n    /// Dispatches an event for the Edge extension to send an Experience Event to the Edge network with the display interaction data for the given proposition item.\n    func displayed() {...}\n\n    /// Dispatches an event for the Edge extension to send an Experience Event to the Edge network with the tap interaction data for the given proposition item.\n    func tapped() {...}\n}\n`}</code></pre>\n    <Variant platform=\"android-java\" task=\"send-event-offer\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`offer.displayed(); // Sends an Offer display notification to Edge network\n`}</code></pre>\n    <Variant platform=\"android-kotlin\" task=\"send-event-offer\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`offer.displayed() // Sends an Offer display notification to Edge network\n`}</code></pre>\n    <Variant platform=\"ios-swift\" task=\"send-event-offer\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`offer.displayed() // Sends an Offer display notification to Edge network\n`}</code></pre>\n    <Variant platform=\"ios-objectivec\" task=\"send-event-offer\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`[offer displayed]; // Sends an Offer display notification to Edge network\n`}</code></pre>\n    <Variant platform=\"android\" task=\"proposition-tracking-edge\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-6\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class Offer {\n  ...\n  /**\n    * Generates a map containing XDM formatted data for {@code Experience Event - Proposition Interactions} field group from this {@code Proposition} item.\n    *\n    * The returned XDM data does contain the {@code eventType} for the Experience Event with value {@code decisioning.propositionDisplay}.\n    *\n    * Note: The Edge sendEvent API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, and override\n    * dataset identifier.\n    *\n    * @return {@code Map<String, Object>} containing the XDM data for the proposition interaction.\n    */\n  public Map<String, Object> generateDisplayInteractionXdm() {...}\n\n  /**\n    * Generates a map containing XDM formatted data for {@code Experience Event - Proposition Interactions} field group from this {@code Proposition} offer.\n    *\n    * The returned XDM data contains the {@code eventType} for the Experience Event with value {@code decisioning.propositionInteract}.\n    *\n    * Note: The Edge sendEvent API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, and override\n    * dataset identifier.\n    *\n    * @return {@code Map<String, Object>} containing the XDM data for the proposition interaction.\n    */\n  public Map<String, Object> generateTapInteractionXdm() {...}\n}\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"proposition-tracking-edge\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-6\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`public extension Offer {\n  /// Creates a dictionary containing XDM formatted data for \\`Experience Event - Proposition Interactions\\` field group from the given proposition option.\n  ///\n  /// The Edge \\`sendEvent(experienceEvent:_:)\\` API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, or override dataset identifier.\n  ///\n  /// - Note: The returned XDM data also contains the \\`eventType\\` for the Experience Event with value \\`decisioning.propositionDisplay\\`.\n  /// - Returns A dictionary containing XDM data for the proposition interactions.\n  func generateDisplayInteractionXdm() -> [String: Any] {...}\n\n  /// Creates a dictionary containing XDM formatted data for \\`Experience Event - Proposition Interactions\\` field group from the given proposition option.\n  ///\n  /// The Edge \\`sendEvent(experienceEvent:_:)\\` API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, or override dataset identifier.\n  ///\n  /// - Note: The returned XDM data also contains the \\`eventType\\` for the Experience Event with value \\`decisioning.propositionInteract\\`.\n  /// - Returns A dictionary containing XDM data for the proposition interactions.\n  func generateTapInteractionXdm() -> [String: Any] {...}\n}\n`}</code></pre>\n    <Variant platform=\"android-kotlin\" task=\"send-event-edge\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`// When a proposition is retrieved using getPropositions API or onUpdatePropositions API callback \n// and the corresponding offer is displayed, invoke method on Offer object to get the XDM data.\n\nval displayInteractionXdm = offer.generateDisplayInteractionXdm() // Offer display tracking XDM\nval additionalData = mapOf(\"someDataKey\" to \"someDataValue\")\n\nval experienceEvent = ExperienceEvent.Builder()\n    .setXdmSchema(displayInteractionXdm)\n    .setData(additionalData)\n    .build()\nEdge.sendEvent(experienceEvent, null)\n`}</code></pre>\n    <Variant platform=\"android-java\" task=\"send-event-edge\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// When a proposition is retrieved using getPropositions API or onUpdatePropositions API callback \n// and the corresponding offer is displayed, invoke method on Offer object to get the XDM data.\n\nfinal Map<String, Object> displayInteractionXdm = offer.generateDisplayInteractionXdm() // Offer display tracking XDM\nfinal Map<String, Object> additionalData = new HashMap<>();\nadditionalData.put(\"someDataKey\", \"someDataValue\");\n\nfinal ExperienceEvent experienceEvent = new ExperienceEvent.Builder().setXdmSchema(displayInteractionXdm).setData(additionalData).build();\nEdge.sendEvent(experienceEvent, null) \n`}</code></pre>\n    <Variant platform=\"ios-swift\" task=\"send-event-edge\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`// When a proposition is retrieved using getPropositions API or onUpdatePropositions API callback \n// and the corresponding offer is displayed, invoke method on Offer object to get the XDM data.\n\nlet displayInteractionXdm = offer.generateDisplayInteractionXdm() // Offer display tracking XDM\nlet additionalData: [String: Any] = [\"someDataKey\": \"someDataValue\"]\n\nlet experienceEvent = ExperienceEvent(xdm: displayInteractionXdm, data: additionalData)\nEdge.sendEvent(experienceEvent)\n`}</code></pre>\n    <Variant platform=\"ios-objectivec\" task=\"send-event-edge\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`// When a proposition is retrieved using getPropositions API or onUpdatePropositions API callback \n// and the corresponding offer is displayed, invoke method on Offer object to get the XDM data.\n\nNSDictionary* displayInteractionXdm = [offer generateDisplayInteractionXdm];\nNSDictionary* additionalData = @{@\"someDataKey\": @\"someDataValue\"};\n\nAEPExperienceEvent* experienceEvent = [[AEPExperienceEvent alloc] initWithXdm:displayInteractionXdm data:additionalData datasetIdentifier:nil];\n[AEPMobileEdge sendExperienceEvent:event completion:nil];\n`}</code></pre>\n    <Variant platform=\"android-java\" task=\"proposition-tracking-batch\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// Create a list of offers from different propositions\nfinal List<Offer> offersToDisplay = new ArrayList<>();\noffersToDisplay.add(proposition1.getOffers().get(0));\noffersToDisplay.add(proposition2.getOffers().get(0));\n// Send list of offers to multiple offers display track public API\nOfferUtils.displayed(offersToDisplay);\n`}</code></pre>\n    <Variant platform=\"android-kotlin\" task=\"proposition-tracking-batch\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`// Create a list of offers from different propositions\nval offersToDisplay = listOf(\n    proposition1.offers[0],\n    proposition2.offers[0]\n)\n// Send list of offers to multiple offers display track public API\noffersToDisplay.displayed()\n`}</code></pre>\n    <Variant platform=\"ios-swift\" task=\"proposition-tracking-batch\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`// Create an array of offers from different propositions\nlet offersToDisplay = [\n    proposition1.offers[0],\n    proposition2.offers[0]\n]\n// Send array of offers to multiple offers display track public API\nOptimize.displayed(offersToDisplay)\n`}</code></pre>\n    <Variant platform=\"ios-objectivec\" task=\"proposition-tracking-batch\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`// Create an array of offers from different propositions\nNSArray<AEPOffer *> *offersToDisplay = @[\n    proposition1.offers[0],\n    proposition2.offers[0]\n];\n// Send array of offers to multiple offers display track public API\n[AEPMobileOptimize displayed: offersToDisplay];\n`}</code></pre>\n    <Variant platform=\"android-java\" task=\"send-multiple-display-interaction-event-edge\" repeat=\"3\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// When propositions are retrieved using getPropositions API or onUpdatePropositions API callback \n// and the corresponding offers are displayed, invoke method on List<Offer> to get the XDM data.\n\nfinal Map<String, Object> displayInteractionXdm = offers.generateDisplayInteractionXdm() // Offers display tracking XDM\nfinal Map<String, Object> additionalData = new HashMap<>();\nadditionalData.put(\"someDataKey\", \"someDataValue\");\n\nfinal ExperienceEvent experienceEvent = new ExperienceEvent.Builder().setXdmSchema(displayInteractionXdm).setData(additionalData).build();\nEdge.sendEvent(experienceEvent, null)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h3>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`offers`}</em>{` - A `}<inlineCode parentName=\"li\">{`List<Offer>`}</inlineCode>{` that may or may not belong to the same proposition. The associated proposition(s) need to be tracked.`}</li>\n    </ul>\n    <Variant platform=\"android-kotlin\" task=\"send-multiple-display-interaction-event-edge\" repeat=\"3\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`// When propositions are retrieved using getPropositions API or onUpdatePropositions API callback \n// and the corresponding offers are displayed, invoke method on List<Offer> to get the XDM data.\n\nval displayInteractionXdm = offers.generateDisplayInteractionXdm() // Offers display tracking XDM\nval additionalData = mapOf(\"someDataKey\" to \"someDataValue\")\n\nval experienceEvent = ExperienceEvent.Builder()\n    .setXdmSchema(displayInteractionXdm)\n    .setData(additionalData)\n    .build()\nEdge.sendEvent(experienceEvent, null)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"parameters-1\"\n    }}>{`Parameters`}</h3>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`offers`}</em>{` - A `}<inlineCode parentName=\"li\">{`[Offer]`}</inlineCode>{` that may or may not belong to the same proposition. The associated proposition(s) need to be tracked.`}</li>\n    </ul>\n    <Variant platform=\"ios-swift\" task=\"send-multiple-display-interaction-event-edge\" repeat=\"3\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`// When propositions are retrieved using getPropositions API or onUpdatePropositions API callback \n// and the corresponding offers are displayed, invoke method on [Offer] to get the XDM data.\n\nlet displayInteractionXdm = offers.generateDisplayInteractionXdm() // Offers display tracking XDM\nlet additionalData: [String: Any] = [\"someDataKey\": \"someDataValue\"]\n\nlet experienceEvent = ExperienceEvent(xdm: displayInteractionXdm, data: additionalData)\nEdge.sendEvent(experienceEvent)\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"parameters-2\"\n    }}>{`Parameters`}</h3>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`offers`}</em>{` - A `}<inlineCode parentName=\"li\">{`[Offer]`}</inlineCode>{` that may or may not belong to the same proposition. The associated proposition(s) need to be tracked.`}</li>\n    </ul>\n    <Variant platform=\"ios-objectivec\" task=\"send-multiple-display-interaction-event-edge\" repeat=\"3\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`// When propositions are retrieved using getPropositions API or onUpdatePropositions API callback \n// and the corresponding offers are displayed, invoke method on NSArray<AEPOffer *> to get the XDM data.\n\nNSDictionary* displayInteractionXdm = [offers generateDisplayInteractionXdm];\nNSDictionary* additionalData = @{@\"someDataKey\": @\"someDataValue\"};\n\nAEPExperienceEvent* experienceEvent = [[AEPExperienceEvent alloc] initWithXdm:displayInteractionXdm data:additionalData datasetIdentifier:nil];\n[AEPMobileEdge sendExperienceEvent:event completion:nil];\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"parameters-3\"\n    }}>{`Parameters`}</h3>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`offers`}</em>{` - A `}<inlineCode parentName=\"li\">{`List<Offer>`}</inlineCode>{` that may or may not belong to the same proposition. The associated proposition(s) need to be tracked.`}</li>\n    </ul>\n    <Variant platform=\"android\" task=\"offerutils\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"kotlin\"\n    }}>{`Kotlin`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`object OfferUtils {\n    /**\n     * Dispatches an event for the Edge network extension to send an Experience Event to the Edge\n     * network with the display interaction data for the given list of [Offer]s.\n     *\n     * This function extracts unique [OptimizeProposition]s from the list of offers based on their\n     * proposition ID and dispatches an event with multiple propositions.\n     *\n     * @see XDMUtils.trackWithData\n     */\n    @JvmStatic\n    fun List<Offer>.displayed() {...}\n}\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"optimize\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-7\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`@objc\npublic extension Optimize {\n    /// This API dispatches an event for the Edge extension to send an Experience Event to the Edge network with the display interaction data for list of offers passed.\n    ///\n    /// - Parameter offers: An array of offer.\n    @objc(displayed:)\n    static func displayed(for offers: [Offer]) {...}\n}\n`}</code></pre>\n    <Variant platform=\"android\" task=\"multiple-display-propositions-tracking-edge\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"kotlin-1\"\n    }}>{`Kotlin`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`object OfferUtils {\n    /**\n     * Generates a map containing XDM formatted data for \\`Experience Event - OptimizeProposition\n     * Interactions\\` field group from the given list of [Offer]s.\n     *\n     * This function extracts unique [OptimizeProposition]s from the list of offers based on their\n     * proposition ID and generates XDM data for the interaction.\n     *\n     * @return [Map] containing the XDM data for the proposition interaction, or null if the list is empty\n     * or no valid propositions are found\n     */\n    @JvmStatic\n    fun List<Offer>.generateDisplayInteractionXdm(): Map<String, Any>? {...}\n}\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"multiple-display-propositions-tracking-edge\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-8\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`@objc\npublic extension Optimize {\n    /// This API returns a dictionary containing XDM formatted data for Experience Event - Proposition Interactions field group for the list of offers\n    ///\n    /// The Edge sendEvent(experienceEvent:_:) API can be used to dispatch this data in an Experience Event along with any additional XDM, free-form data, or override dataset identifier.\n    ///\n    /// - Parameter offers: An array of offer.\n    /// - Note: The returned XDM data also contains the eventType for the Experience Event with value decisioning.propositionInteract.\n    /// - Returns A dictionary containing XDM data for the propositon interactions.\n    /// - SeeAlso: interactionXdm(for:)\n    @objc(generateDisplayInteractionXdm:)\n    static func generateDisplayInteractionXdm(for offers: [Offer]) -> [String: Any]?{...}\n}\n`}</code></pre>\n    <Variant platform=\"android\" task=\"calculate-json-size\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`import com.google.gson.Gson\nimport java.nio.charset.StandardCharsets\n\nfun calculateJsonSizeInKB(jsonMap: Map<String, Any>) {\n    val gson = Gson()\n    val jsonString = gson.toJson(jsonMap)\n    val byteArray = jsonString.toByteArray(StandardCharsets.UTF_8)\n    val sizeInKB = byteArray.size / 1024.0 \n    println(\"JSON size: %.2f KB\".format(sizeInKB))\n}\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"calculate-json-size\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import Foundation\n\nfunc calculateJsonSizeInKB(jsonMap: [String: Any]) {\n    do {\n        let jsonData = try JSONSerialization.data(withJSONObject: jsonMap)\n        let sizeInKB = Double(jsonData.count) / 1024.0\n        print(String(format: \"JSON size: %.2f KB\", sizeInKB))\n    } catch {\n        print(\"Error calculating JSON size: \\\\(error)\")\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Variant","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","platform","task","repeat","parentName","query","isMDXComponent"],"sourceRoot":""}