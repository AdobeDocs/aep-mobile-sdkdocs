{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-content-card-ui-i-os-tutorial-displaying-content-cards-md-5781eda33e877c5e8fca.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EAClB,CAAC,EACKG,EAAYL,EAAc,aAC1BM,EAAcN,EAAc,eAC5BO,EAAc,CAClBR,aAAAA,GAEIS,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGT,GAAK,YAER,OAAO,SAACM,GAAS,UAAKD,EAAiBL,EAAK,CAAES,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,mCAAiC,oCAEzC,yGACA,eACE,GAAM,kBAAgB,mBAExB,mBAAG,cAAGC,WAAW,IACb,KAAQ,uDAAqD,qDACH,kBAC9D,eACE,GAAM,uBAAqB,wBAE7B,gFAAiE,cAAGA,WAAW,IAC3E,KAAQ,sFAAoF,2BAC5D,yBAAyB,cAAGA,WAAW,IACvE,KAAQ,gIAA8H,iCAChG,0NAC1C,SAACR,EAAS,CAACS,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,QAAQJ,QAAQ,eACtE,eACE,GAAM,SAAO,UAEf,qBAAK,iBAAMC,WAAW,MAClB,UAAa,kBAAgB,mHAIjC,eACE,GAAM,0BAAwB,2BAEhC,iFAAkE,uBAAYA,WAAW,KAAG,qBAAmC,mCAAmC,cAAGA,WAAW,IAC5K,KAAQ,sCAAoC,iBACtB,yEAC1B,mBAAG,uBAAYA,WAAW,KAAG,iBAA+B,mHAAmH,uBAAYA,WAAW,KAAG,iBAA+B,+DACxO,SAACR,EAAS,CAACS,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,QAAQJ,QAAQ,eACtE,eACE,GAAM,WAAS,UAEjB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,kBAAgB,gVAWjC,SAACP,EAAW,CAACW,QAAQ,OAAOH,MAAM,OAAOF,QAAQ,iBACjD,yNACA,eACE,GAAM,yBAAuB,0BAE/B,oEAAqD,uBAAYC,WAAW,KAAG,iBAA+B,6BAA6B,uBAAYA,WAAW,KAAG,qBAAmC,cAAc,uBAAYA,WAAW,KAAG,iBAA+B,4NAA4N,uBAAYA,WAAW,KAAG,iBAA+B,cACpiB,eACE,GAAM,uBAAqB,wBAE7B,oGACA,SAACR,EAAS,CAACS,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,QAAQJ,QAAQ,eACtE,eACE,GAAM,WAAS,UAEjB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,kBAAgB,k5BA+BjC,oCAAqB,cAAGA,WAAW,IAC/B,KAAQ,4FAA0F,WAClF,8HACpB,eACE,GAAM,qBAAmB,sBAE3B,sHACA,SAACR,EAAS,CAACS,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,QAAQJ,QAAQ,eACtE,eACE,GAAM,WAAS,UAEjB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,kBAAgB,s/EA8DjC,oCAAqB,cAAGA,WAAW,IAC/B,KAAQ,yFAAuF,WAC/E,4HAGxB,CAEAH,EAAWQ,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/content-card-ui/iOS/tutorial/displaying-content-cards.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"fetch-and-display-content-cards\"\n    }}>{`Fetch and Display Content Cards`}</h1>\n    <p>{`This tutorial explains how to fetch and display content cards in your application.`}</p>\n    <h2 {...{\n      \"id\": \"pre-requisites\"\n    }}>{`Pre-requisites`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"../../../index.md#implement-extension-in-mobile-app\"\n      }}>{`Integrate and register the AEPMessaging extension`}</a>{` in your app.`}</p>\n    <h2 {...{\n      \"id\": \"fetch-content-cards\"\n    }}>{`Fetch Content Cards`}</h2>\n    <p>{`To fetch the content cards for the surfaces configured in `}<a parentName=\"p\" {...{\n        \"href\": \"https://business.adobe.com/products/journey-optimizer/adobe-journey-optimizer.html\"\n      }}>{`Adobe Journey Optimizer`}</a>{` campaigns, call the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/client-sdks/edge/adobe-journey-optimizer/code-based/api-reference/#updatepropositionsforsurfaces\"\n      }}>{`updatePropositionsForSurfaces`}</a>{` API. You should batch requests for multiple surfaces in a single API call when possible. The returned content cards are cached in-memory by the Messaging extension and persist through the application's lifecycle.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Swift\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let homePageSurface = Surface(path: \"homepage\")\nMessaging.updatePropositionsForSurfaces([homePageSurface])\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"retrieve-content-cards\"\n    }}>{`Retrieve Content Cards`}</h2>\n    <p>{`To retrieve the content cards for a specific surface, call `}<inlineCode parentName=\"p\">{`getContentCardsUI`}</inlineCode>{`. This API returns an array of `}<a parentName=\"p\" {...{\n        \"href\": \"../public-classes/contentcardui.md\"\n      }}>{`ContentCardUI`}</a>{` objects representing content cards for which the user is qualified.`}</p>\n    <p><inlineCode parentName=\"p\">{`ContentCardUI`}</inlineCode>{` objects are created only for content cards with templates recognized by the Messaging extension. The array of `}<inlineCode parentName=\"p\">{`ContentCardUI`}</inlineCode>{` objects may contain multiple content card template types.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Swift\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let homePageSurface = Surface(path: \"homepage\")\nMessaging.getContentCardsUI(surface: homePageSurface) { result in\n    switch result {\n    case .success(let contentCards):\n        // use the contentCards array to display content cards in your application\n    case .failure(let error):\n        // handle error here\n    }\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Note - Only content cards for which the user has qualified are returned by the getContentCardUI API. User qualification is determined by the delivery rules configured in Adobe Journey Optimizer.`}</p>\n    <h2 {...{\n      \"id\": \"display-content-cards\"\n    }}>{`Display Content Cards`}</h2>\n    <p>{`To display content cards in your app, use the `}<inlineCode parentName=\"p\">{`ContentCardUI`}</inlineCode>{` objects returned by the `}<inlineCode parentName=\"p\">{`getContentCardsUI`}</inlineCode>{` API. The `}<inlineCode parentName=\"p\">{`ContentCardUI`}</inlineCode>{` objects provide the user interface for templated content cards in your application. Whether your application is built using SwiftUI or UIKit, you can seamlessly incorporate and display these content cards using the `}<inlineCode parentName=\"p\">{`ContentCardUI`}</inlineCode>{` objects.`}</p>\n    <h3 {...{\n      \"id\": \"swiftui-application\"\n    }}>{`SwiftUI Application`}</h3>\n    <p>{`Below is an example of how to display content cards in a SwiftUI application:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Swift\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"swift-2\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`struct HomePage: View {\n    \n    @State var savedCards : [ContentCardUI] = []\n    \n    var body: some View {\n        ScrollView (.vertical, showsIndicators: false) {\n            LazyVStack(spacing: 20) {\n                 ForEach(savedCards) { card in\n                     card.view\n                         .frame(height: 120)\n                }\n            }\n        }\n        .padding()\n        .onAppear() {\n            // Retrieve the content cards for the homepage surface\n            let homePageSurface = Surface(path: \"homepage\")\n            AEPSwiftUI.getContentCardsUI(for: homePageSurface) { result in\n                switch result {\n                case .success(let cards):\n                    savedCards = cards\n                    \n                case .failure(let error):\n                    // handle error here\n                }\n            }\n        }\n    }\n}\n`}</code></pre>\n    <p>{`Refer to this `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/aepsdk-messaging-ios/tree/main/TestApps/MessagingDemoAppSwiftUI\"\n      }}>{`TestApp`}</a>{` for a complete example of how to display, customize and listen to UI events from content cards in a SwiftUI application.`}</p>\n    <h3 {...{\n      \"id\": \"uikit-application\"\n    }}>{`UIKit Application`}</h3>\n    <p>{`Below is an example of how to display content cards in a UIKit application using a UITableView:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Swift\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"swift-3\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class HomeViewController: UIViewController, UITableViewDelegate, UITableViewDataSource {\n    \n    @IBOutlet var tableView : UITableView!\n    var savedCards : [ContentCardUI] = []\n        \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        tableView.delegate = self\n        tableView.dataSource = self\n        \n        // Retrieve the content cards for the homepage surface\n        let homePageSurface = Surface(path: \"homepage\")\n        AEPSwiftUI.getContentCardsUI(for: homePageSurface) { result in\n            switch result {\n            case .success(let cards):\n                self.savedCards = cards\n                DispatchQueue.main.async {\n                    self.tableView.reloadData()\n                }\n                \n            case .failure(let error):\n                // handle error here\n            }\n        }\n    }\n    \n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"cell\", for: indexPath)\n        cell.contentView.subviews.forEach { $0.removeFromSuperview() }\n\n        // Get the SwiftUI view for the content card\n        let contentCard = savedCards[indexPath.row]\n        let swiftUIView = contentCard.view\n\n        // Wrap the SwiftUI view in a UIHostingController\n        let hostingController = UIHostingController(rootView: swiftUIView)\n        hostingController.view.translatesAutoresizingMaskIntoConstraints = false\n\n        // Add the hosting controller's view to the cell's content view\n        cell.contentView.addSubview(hostingController.view)\n\n        // Set up constraints to make the SwiftUI view fill the cell\n        NSLayoutConstraint.activate([\n            hostingController.view.leadingAnchor.constraint(equalTo: cell.contentView.leadingAnchor, constant: 10),\n            hostingController.view.trailingAnchor.constraint(equalTo: cell.contentView.trailingAnchor, constant: -10),\n            hostingController.view.topAnchor.constraint(equalTo: cell.contentView.topAnchor, constant: 10),\n            hostingController.view.bottomAnchor.constraint(equalTo: cell.contentView.bottomAnchor, constant: -10)\n        ])\n\n        return cell\n    }\n    \n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return savedCards.count\n    }\n    \n    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {\n        return 120\n    }\n}\n`}</code></pre>\n    <p>{`Refer to this `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/aepsdk-messaging-ios/tree/main/TestApps/MessagingDemoAppObjC\"\n      }}>{`TestApp`}</a>{` for a complete example of how to display, customize, and listen to UI events from content cards in a UIKit application.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","CodeBlock","InlineAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","slots","repeat","languages","variant","isMDXComponent"],"sourceRoot":""}