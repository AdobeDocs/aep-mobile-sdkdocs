{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-content-card-ui-i-os-api-usage-md-dc7f45f07da8a683f95d.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EAClB,CAAC,EACKG,EAAcL,EAAc,eAC5BM,EAAYN,EAAc,aAC1BO,EAAc,CAClBR,aAAAA,GAEIS,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGT,GAAK,YAER,OAAO,SAACM,GAAS,UAAKD,EAAiBL,EAAK,CAAES,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,iBAAe,kBAEvB,sIACA,eACE,GAAM,qBAAmB,sBAE3B,0BAAW,uBAAYC,WAAW,KAAG,qBAAmC,kCAAkC,cAAGA,WAAW,IACpH,KAAQ,qCAAmC,iBACrB,+IAC1B,eACE,GAAM,cAAY,gBAEpB,oBACE,eAAIA,WAAW,OAAK,eAAIA,WAAW,MAAI,WAAiB,WAAW,cAAGA,WAAW,KAC7E,KAAQ,mCAAiC,WACzB,sDACpB,eAAIA,WAAW,OAAK,eAAIA,WAAW,MAAI,cAAoB,mBAAmB,cAAGA,WAAW,KACxF,KAAQ,8CAA4C,0BACrB,kLACnC,eAAIA,WAAW,OAAK,eAAIA,WAAW,MAAI,YAAkB,mBAAmB,cAAGA,WAAW,KACtF,KAAQ,mDAAiD,+BACrB,0JACxC,eAAIA,WAAW,OAAK,eAAIA,WAAW,MAAI,cAAoB,kDAAkD,uBAAYA,WAAW,MAAI,UAAwB,uBAC9J,eAAIA,WAAW,OACb,eAAIA,WAAW,OAAK,eAAIA,WAAW,MAAI,WAAiB,mBAAmB,cAAGA,WAAW,KACrF,KAAQ,qCAAmC,iBACrB,6DAC1B,eAAIA,WAAW,OAAK,eAAIA,WAAW,MAAI,WAAiB,UAAU,uBAAYA,WAAW,MAAI,SAAuB,8DAI1H,SAACR,EAAW,CAACS,QAAQ,OAAOC,MAAM,OAAOH,QAAQ,iBACjD,oNAAqM,mBAAQC,WAAW,KAAG,QAAkB,cAAc,cAAGA,WAAW,IACrQ,KAAQ,oEACP,uBAAYA,WAAW,KAAG,kCAAmD,8DAClF,eACE,GAAM,UAAQ,WAEhB,SAACP,EAAS,CAACS,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,QAAQL,QAAQ,eACtE,eACE,GAAM,SAAO,UAEf,qBAAK,iBAAMC,WAAW,MAClB,UAAa,kBAAgB,+UAMjC,eACE,GAAM,WAAS,YAEjB,SAACP,EAAS,CAACS,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,QAAQL,QAAQ,eACtE,eACE,GAAM,WAAS,UAEjB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,kBAAgB,4hBAiBrC,CAEAH,EAAWQ,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/content-card-ui/iOS/api-usage.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"api-reference\"\n    }}>{`API Reference`}</h1>\n    <p>{`This document lists the public APIs available in the Messaging extension for implementing content card with UI.`}</p>\n    <h2 {...{\n      \"id\": \"getcontentcardsui\"\n    }}>{`getContentCardsUI`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`getContentCardsUI`}</inlineCode>{` method retrieves an array of `}<a parentName=\"p\" {...{\n        \"href\": \"./public-classes/contentcardui.md\"\n      }}>{`ContentCardUI`}</a>{` objects for the provided surface. These ContentCardUI objects provide the user interface for templated content cards to your application.`}</p>\n    <h4 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters:`}</h4>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`surface`}</em>{` - The `}<a parentName=\"li\" {...{\n          \"href\": \"../../public-classes/surface.md\"\n        }}>{`Surface`}</a>{` for which the content cards should be retrieved.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`customizer`}</em>{` - An optional `}<a parentName=\"li\" {...{\n          \"href\": \"./public-classes/contentcardcustomizing.md\"\n        }}>{`ContentCardCustomizing`}</a>{` object to customize the appearance of the content card template. If you do not need to customize the appearance of the content card template, this parameter can be omitted.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`listener`}</em>{` - An optional `}<a parentName=\"li\" {...{\n          \"href\": \"./public-classes/contentcarduieventlistening.md\"\n        }}>{`ContentCardUIEventListening`}</a>{` object to listen to UI events from the content card. If you do not need to listen to UI events from the content card, this parameter can be omitted.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`completion`}</em>{` - A completion handler that is called with a `}<inlineCode parentName=\"li\">{`Result`}</inlineCode>{` containing either:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><em parentName=\"li\">{`success`}</em>{` - An array of `}<a parentName=\"li\" {...{\n              \"href\": \"./public-classes/contentcardui.md\"\n            }}>{`ContentCardUI`}</a>{` objects representing the content cards to be displayed.`}</li>\n          <li parentName=\"ul\"><em parentName=\"li\">{`failure`}</em>{` - An `}<inlineCode parentName=\"li\">{`Error`}</inlineCode>{` object indicating the reason for the failure, if any.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Calling this API will not download content cards from Adobe Journey Optimizer; it will only retrieve the content cards that are already downloaded and cached by the Messaging extension. You `}<strong parentName=\"p\">{`must`}</strong>{` call the `}<a parentName=\"p\" {...{\n        \"href\": \"../../code-based/api-reference.md#updatepropositionsforsurfaces\"\n      }}><inlineCode parentName=\"a\">{`updatePropositionsForSurfaces`}</inlineCode></a>{` API with the desired surfaces prior to calling this API.`}</p>\n    <h4 {...{\n      \"id\": \"syntax\"\n    }}>{`Syntax`}</h4>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Swift\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`public static func getContentCardsUI(for surface: Surface,\n                                     customizer: ContentCardCustomizing? = nil,\n                                     listener: ContentCardUIEventListening? = nil,\n                                     _ completion: @escaping (Result<[ContentCardUI], Error>) -> Void)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h4>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Swift\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`// Download the content cards for homepage surface using Messaging extension\nlet homePageSurface = Surface(path: \"homepage\")\nMessaging.updatePropositionsForSurfaces([homePageSurface])\n\n// Get the content card UI for the homepage surface\nMessaging.getContentCardsUI(for: homePageSurface) { result in\n    switch result {\n    case .success(let contentCards):\n        // Use the contentCards array to display UI for templated content cards in your application\n    case .failure(let error):\n        // Handle the error\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","InlineAlert","CodeBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}