"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[5259],{44008:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return s},default:function(){return c}});var r,i=a(87462),t=a(63366),l=(a(15007),a(64983)),d=a(91515),o=["components"],s={},m=(r="Variant",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.mdx)("div",e)}),p={_frontmatter:s},x=d.Z;function c(e){var n=e.components,a=(0,t.Z)(e,o);return(0,l.mdx)(x,(0,i.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)(m,{platform:"android",api:"extension-version",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java"},"Java"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"String audienceExtensionVersion = Audience.extensionVersion();\n")),(0,l.mdx)(m,{platform:"ios-aep",api:"extension-version",repeat:"10",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"swift"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"static var extensionVersion: String\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"let audienceExtensionVersion  = Audience.extensionVersion()\n")),(0,l.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (nonnull NSString*) extensionVersion;\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"NSString *audienceExtensionVersion = [AEPMobileAudience extensionVersion];\n")),(0,l.mdx)(m,{platform:"ios-acp",api:"extension-version",repeat:"10",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"swift-1"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"+ (nonnull NSString*) extensionVersion;\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"let audienceExtensionVersion  = ACPAudience.extensionVersion()\n")),(0,l.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"add\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"NSString *audienceExtensionVersion = [ACPAudience extensionVersion];\n")),(0,l.mdx)(m,{platform:"react-native",api:"extension-version",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"javascript"},"JavaScript"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPAudience.extensionVersion().then(audienceExtensionVersion => console.log("AdobeExperienceSDK: ACPAudience version: " + audienceExtensionVersion));\n')),(0,l.mdx)(m,{platform:"flutter",api:"extension-version",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"dart"},"Dart"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-dart"},"String audienceExtensionVersion = await FlutterACPAudience.extensionVersion;\n")),(0,l.mdx)(m,{platform:"cordova",api:"extension-version",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"cordova"},"Cordova"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPAudience.extensionVersion(function(version) {  \n   console.log("ACPAudience version: " + version);\n}, function(error) {  \n   console.log(error);  \n});\n')),(0,l.mdx)(m,{platform:"unity",api:"extension-version",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"c"},"C#"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},"string audienceExtensionVersion = ACPAudience.ExtensionVersion();\n")),(0,l.mdx)(m,{platform:"xamarin",api:"extension-version",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"c-1"},"C#"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},"string audienceExtensionVersion = ACPAudience.ExtensionVersion();\n")),(0,l.mdx)(m,{platform:"android",api:"get-visitor-profile",repeat:"7",mdxType:"Variant"}),(0,l.mdx)("p",null,"This API returns the most recently obtained visitor profile. For easy access across multiple launches of your app, the visitor profile is saved in ",(0,l.mdx)("inlineCode",{parentName:"p"},"SharedPreferences"),". If no signal has been submitted, null is returned."),(0,l.mdx)("p",null,"When an AdobeCallbackWithError is provided, an AdobeError can be returned in the eventuality of an unexpected error or if the default timeout (5000ms) is met before the callback is returned with the visitor profile."),(0,l.mdx)("h4",{id:"java-1"},"Java"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public static void getVisitorProfile(final AdobeCallback<Map<String, String>> adobeCallback)\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"AdobeCallback<Map<String, String>> visitorProfileCallback = new AdobeCallback<Map<String, String>>() {\n    @Override\n    public void call(final Map<String, String> visitorProfile) {\n        // your own customized code\n    }\n};\n\nAudience.getVisitorProfile(visitorProfileCallback);\n")),(0,l.mdx)(m,{platform:"ios-aep",api:"get-visitor-profile",repeat:"11",mdxType:"Variant"}),(0,l.mdx)("p",null,"This API returns the most recently obtained visitor profile."),(0,l.mdx)("h4",{id:"swift-2"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"static func getVisitorProfile(completion: @escaping ([String: String]?, Error?) -> Void)\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"Audience.getVisitorProfile { (visitorProfile, error) in\n   if error != nil {\n    // handle the error here\n   } else {\n    // handle the retrieved visitorProfile here\n   }\n  }\n")),(0,l.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+  (void) getVisitorProfile:^(NSDictionary<NSString *,NSString *> * _Nullable, NSError * _Nullable)completion\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objc"},"[AEPMobileAudience getVisitorProfile:^(NSDictionary<NSString *,NSString *> * _Nullable visitorProfile, NSError * _Nullable error) {\n   if (error) {\n    // handle the error here\n   } else {\n    // handle the returned visitorProfile dictionary here\n   }\n}];\n")),(0,l.mdx)(m,{platform:"ios-acp",api:"get-visitor-profile",repeat:"12",mdxType:"Variant"}),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"getVisitorProfile")," API returns the most recently obtained visitor profile. For easy access across multiple launches of your app, the visitor profile is saved in ",(0,l.mdx)("inlineCode",{parentName:"p"},"NSUserDefaults"),". If no signal has been submitted, nil is returned."),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"getVisitorProfileWithCompletionHandler")," method was added in ACPAudience version 2.1.0."),(0,l.mdx)("h4",{id:"swift-3"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"static func getVisitorProfile(_ callback: @escaping ([AnyHashable : Any]?) -> Void)\n\nstatic func getVisitorProfile(completionHandler: @escaping ([AnyHashable : Any]?, Error?) -> Void)\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"ACPAudience.getVisitorProfile { (visitorProfile) in\n  // handle the visitorProfile here\n}\n\nACPAudience.getVisitorProfile { (visitorProfile, error) in\n  if let error = error {\n    // handle error here\n  } else {\n    // handle the returned visitorProfile here\n  }\n}\n")),(0,l.mdx)("h4",{id:"objective-c-3"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) getVisitorProfile: (nonnull void (^) (NSDictionary* __nullable visitorProfile)) callback;\n\n+ (void) getVisitorProfileWithCompletionHandler: (nonnull void (^) (NSDictionary* __nullable visitorProfile, NSError* __nullable error)) completionHandler;\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[ACPAudience getVisitorProfile:^(NSDictionary* visitorProfile){\n  // handle the visitorProfile here\n}];\n\n[ACPAudience getVisitorProfileWithCompletionHandler:^(NSDictionary * _Nullable visitorProfile, NSError * _Nullable error) {\n  if (error) {\n    // handle error here\n  } else {\n    // handle the returned visitorProfile here\n  }\n}];\n")),(0,l.mdx)(m,{platform:"react-native",api:"get-visitor-profile",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"javascript-1"},"JavaScript"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPAudience.getVisitorProfile().then(profile => console.log("AdobeExperienceSDK: Visitor Profile: " + profile));\n')),(0,l.mdx)(m,{platform:"android",api:"register-extension",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java-2"},"Java"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public  static void registerExtension() throws InvalidInitException\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"Audience.registerExtension();\n")),(0,l.mdx)(m,{platform:"ios-aep",api:"register-extension",repeat:"10",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"swift-4"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"static func registerExtensions(_ extensions: [NSObject.Type], \n                               _ completion: (() -> Void)? = nil)\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"MobileCore.registerExtension([Audience.self])\n")),(0,l.mdx)("h4",{id:"objective-c-4"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) registerExtensions: (NSArray<Class*>* _Nonnull) extensions \n                 completion: (void (^ _Nullable)(void)) completion;\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[AEPMobileCore registerExtensions:@[AEPMobileAudience.class] completion:nil];\n")),(0,l.mdx)(m,{platform:"ios-acp",api:"register-extension",repeat:"10",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"swift-5"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"static func registerExtension()\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"ACPAudience.registerExtension()\n")),(0,l.mdx)("h4",{id:"objective-c-5"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (BOOL) registerExtension: (nonnull Class) extensionClass\n                     error: (NSError* _Nullable* _Nullable) error;\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[ACPAudience registerExtension];\n")),(0,l.mdx)(m,{platform:"react-native",api:"register-extension",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"javascript-2"},"JavaScript"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},"ACPAudience.registerExtension();\n")),(0,l.mdx)(m,{platform:"android",api:"reset",repeat:"6",mdxType:"Variant"}),(0,l.mdx)("p",null,"This API resets the Audience Manager UUID and purges the current visitor profile from ",(0,l.mdx)("inlineCode",{parentName:"p"},"android.content.SharedPreferences"),". The Audience reset also clears the current in-memory DPID and DPUUID variables."),(0,l.mdx)("h4",{id:"java-3"},"Java"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public static void reset()\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"Audience.reset();\n")),(0,l.mdx)(m,{platform:"ios-aep",api:"reset",repeat:"11",mdxType:"Variant"}),(0,l.mdx)("p",null,"This API resets the Audience Manager UUID and purges the current visitor profile from ",(0,l.mdx)("inlineCode",{parentName:"p"},"UserDefaults"),". The Audience reset also clears the current in-memory DPID and DPUUID variables."),(0,l.mdx)("h4",{id:"swift-6"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"static func reset()\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"Audience.reset()\n")),(0,l.mdx)("h4",{id:"objective-c-6"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) reset\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[AEPMobileAudience reset];\n")),(0,l.mdx)(m,{platform:"ios-acp",api:"reset",repeat:"11",mdxType:"Variant"}),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"reset")," API resets the Audience Manager UUID and purges the current visitor profile from ",(0,l.mdx)("inlineCode",{parentName:"p"},"UserDefaults"),". The Audience reset also clears the current in-memory DPID and DPUUID variables."),(0,l.mdx)("h4",{id:"swift-7"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"static func reset()\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"ACPAudience.reset()\n")),(0,l.mdx)("h4",{id:"objective-c-7"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) reset;\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[ACPAudience reset];\n")),(0,l.mdx)(m,{platform:"react-native",api:"reset",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"javascript-3"},"JavaScript"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},"ACPAudience.reset();\n")),(0,l.mdx)(m,{platform:"android",api:"signal-with-data",repeat:"9",mdxType:"Variant"}),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"signalWithData")," API sends Audience Manager a signal with traits and returns the matching segments for the visitor in a callback."),(0,l.mdx)("p",null,"Audience Manager sends the AAM UUID in response in initial signal call. The AAM UUID is persisted in ",(0,l.mdx)("inlineCode",{parentName:"p"},"SharedPreferences")," and is sent by the SDK in all subsequent signal requests. If available, the ECID is also sent in each signal request with the DPID and the DPUUID. The visitor profile that Audience Manager returns is saved in ",(0,l.mdx)("inlineCode",{parentName:"p"},"SharedPreferences")," and is updated with every signal call."),(0,l.mdx)("p",null,"When an ",(0,l.mdx)("inlineCode",{parentName:"p"},"AdobeCallbackWithError")," is provided, an ",(0,l.mdx)("inlineCode",{parentName:"p"},"AdobeError")," can be returned in the eventuality of an unexpected error or if the default timeout (5000ms) is met before the callback is returned with the visitor profile."),(0,l.mdx)("h4",{id:"java-4"},"Java"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public static void signalWithData(final Map<String, String> data, final AdobeCallback<Map<String, String>> callback)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"data")," is the traits data for the current visitor."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"callback")," is the void method that is invoked with the visitor's profile as a parameter.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'AdobeCallback<Map<String, String>> visitorProfileCallback = new AdobeCallback<Map<String, String>>() {\n    @Override\n    public void call(final Map<String, String> visitorProfile) {\n        // handle the returned visitorProfile here\n    }\n};\n​\nMap<String, String> traits = new HashMap<String, String>();\ntraits.put("trait", "xyz");\nAudience.signalWithData(traits, visitorProfileCallback);\n')),(0,l.mdx)(m,{platform:"ios-aep",api:"signal-with-data",repeat:"13",mdxType:"Variant"}),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"signalWithData")," API sends Audience Manager a signal with traits and returns the matching segments for the visitor in a closure."),(0,l.mdx)("p",null,"Audience Manager sends the AAM UUID in response in initial signal call. The AAM UUID is persisted in ",(0,l.mdx)("inlineCode",{parentName:"p"},"NSUserDefaults")," and is sent by the SDK in all subsequent signal requests. If available, the Experience Cloud ID (MID) is also sent in each signal request with the DPID and the DPUUID. The visitor profile that Audience Manager returns is saved in ",(0,l.mdx)("inlineCode",{parentName:"p"},"NSUserDefaults")," and is updated with every signal call."),(0,l.mdx)("h4",{id:"swift-8"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"static func signalWithData(data: [String: String], completion: @escaping ([String: String]?, Error?) -> Void)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"data")," is the traits data for the current visitor."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"callback")," is the void method that is invoked with the visitor's profile as a parameter.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},'Audience.signalWithData(data: ["trait": "trait value"]) { (traits, error) in\n  if error != nil {\n     // handle the error here\n     } else {\n     // handle the returned visitorProfile here\n     }\n}\n')),(0,l.mdx)("h4",{id:"objective-c-8"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) signalWithData:(NSDictionary<NSString *,NSString *> * _Nonnull) completion:^(NSDictionary<NSString *,NSString *> * _Nullable, NSError * _Nullable)completion\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSDictionary *traits = @{@"key1":@"value1",@"key2":@"value2"};\n[AEPMobileAudience signalWithData:traits completion:^(NSDictionary<NSString *,NSString *> * _Nullable visitorProfile, NSError* _Nullable error) {\n  if (error) {\n     // handle the error here\n     } else {\n     // handle the returned visitorProfile dictionary here\n     }\n}];\n')),(0,l.mdx)(m,{platform:"ios-acp",api:"signal-with-data",repeat:"14",mdxType:"Variant"}),(0,l.mdx)("p",null,"The ",(0,l.mdx)("inlineCode",{parentName:"p"},"signalWithData")," API sends Audience Manager a signal with traits and returns the matching segments for the visitor in a callback."),(0,l.mdx)("p",null,"Audience Manager sends the AAM UUID in response in initial signal call. The AAM UUID is persisted in ",(0,l.mdx)("inlineCode",{parentName:"p"},"NSUserDefaults")," and is sent by the SDK in all subsequent signal requests. If available, the Experience Cloud ID (MID) is also sent in each signal request with the DPID and the DPUUID. The visitor profile that Audience Manager returns is saved in ",(0,l.mdx)("inlineCode",{parentName:"p"},"NSUserDefaults")," and is updated with every signal call."),(0,l.mdx)("p",null,"Please note that the ",(0,l.mdx)("inlineCode",{parentName:"p"},"signalWithData:withCompletionHandler")," method was added in ACPAudience version 2.1.0."),(0,l.mdx)("h4",{id:"swift-9"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"static func signal(withData data: [String : String]?, callback: (([AnyHashable : Any]?) -> Void)? = nil)\n\nstatic func signal(withData data: [String : String], withCompletionHandler completionHandler: @escaping ([AnyHashable : Any]?, Error?) -> Void)\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},'ACPAudience.signal(withData: ["key1": "value1", "key2": "value2"], callback: { (visitorProfile) in\n  // handle the visitorProfile here  \n})\n\nACPAudience.signal(withData: ["key1": "value1", "key2": "value2"], withCompletionHandler: { (visitorProfile, error) in\n  if let error = error {\n    // handle error\n  } else {\n    // handle the returned visitorProfile here\n  }    \n})\n')),(0,l.mdx)("h4",{id:"objective-c-9"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) signalWithData: (NSDictionary<NSString*, NSString*>* __nullable) data\n                       callback: (nullable void (^) (NSDictionary* __nullable visitorProfile)) callback;\n\n+ (void) signalWithData: (NSDictionary<NSString*, NSString*>* __nullable) data\n                        withCompletionHandler:: (nullable void (^) (NSDictionary* __nullable visitorProfile, NSError* __nullable error)) completionHandler;\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"data")," is the traits data for the current visitor."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("inlineCode",{parentName:"li"},"callback")," is the void method that is invoked with the visitor's profile as a parameter.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSDictionary *traits = @{@"key1":@"value1",@"key2":@"value2"};\n[ACPAudience signalWithData:traits callback:^(NSDictionary* _Nullable visitorProfile){\n  // handle the returned visitorProfile dictionary here\n}];\n\n[ACPAudience signalWithData:traits withCompletionHandler:^(NSDictionary * _Nullable visitorProfile, NSError * _Nullable error) {\n  if (error) {\n    // handle the error here\n  } else {\n    // handle the returned visitorProfile dictionary here\n  }\n}];\n')),(0,l.mdx)(m,{platform:"react-native",api:"signal-with-data",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"javascript-4"},"JavaScript"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPAudience.signalWithData({"yourDataKey": "yourDataValue"}).then(profile => console.log("AdobeExperienceSDK: Visitor Profile: " + profile));\n')))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=ff30a8f207ce4ff56b7e5abf0c48d14984d612ea-1855bad7077424494514.js.map