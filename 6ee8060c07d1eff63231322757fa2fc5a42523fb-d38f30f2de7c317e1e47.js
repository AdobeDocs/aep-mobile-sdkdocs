"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[5895],{58463:function(e,n,i){i.r(n),i.d(n,{_frontmatter:function(){return s},default:function(){return u}});var t,a=i(87462),r=i(63366),l=(i(15007),i(64983)),d=i(91515),o=["components"],s={},p=(t="Variant",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.mdx)("div",e)}),m={_frontmatter:s},c=d.Z;function u(e){var n=e.components,i=(0,r.Z)(e,o);return(0,l.mdx)(c,(0,a.Z)({},m,i,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)(p,{platform:"android",api:"append-to-url",repeat:"7",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java"},"Java"),(0,l.mdx)("p",null,"This API can be called with ",(0,l.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeCallback")," or ",(0,l.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeCallbackWithError")," for retrieving the attributes from the Mobile SDK. When ",(0,l.mdx)("inlineCode",{parentName:"p"},"AdobeCallbackWithError")," is provided, this API uses a default timeout of 500ms. If the operation times out or an unexpected error occurs, the ",(0,l.mdx)("inlineCode",{parentName:"p"},"fail")," method is called with the appropriate ",(0,l.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeError"),"."),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public static void appendVisitorInfoForURL(\n            @NonNull final String baseURL, @NonNull final AdobeCallback<String> callback)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"baseUrl")," is the URL to which the visitor information needs to be appended. If the visitor information is nil or empty, the URL is returned as is."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"callback")," is invoked after the updated URL is available.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'Identity.appendVisitorInfoForURL("https://example.com", new AdobeCallback<String>() {\n    @Override\n    public void call(String urlWithAdobeVisitorInfo) {\n        //handle the new URL here\n        //For example, open the URL on the device browser\n        //\n        Intent i = new Intent(Intent.ACTION_VIEW);\n        i.setData(Uri.parse(urlWithAdobeVisitorInfo));\n        startActivity(i);\n    }\n});\n')),(0,l.mdx)(p,{platform:"ios",api:"append-to-url",repeat:"11",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"swift"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"static func appendTo(url: URL?, completion: @escaping (URL?, Error?) -> Void)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"url")," is the URL to which the visitor information needs to be appended. If the visitor information is nil or empty, the URL is returned as is."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"completion")," is invoked after the updated ",(0,l.mdx)("em",{parentName:"li"},"URL")," is available or ",(0,l.mdx)("em",{parentName:"li"},"Error")," if an unexpected exception occurs or the request times out. The returned ",(0,l.mdx)("inlineCode",{parentName:"li"},"Error")," contains the ",(0,l.mdx)("a",{parentName:"li",href:"../api-reference.md#public-classes"},"AEPError")," code of the specific error.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},'Identity.appendTo(url: URL(string: "https://example.com")) { appendedURL, error in\n  if let error = error {\n    // handle error\n  } else {\n    // handle the appended url here\n    if let appendedURL = appendedURL {\n      // APIs which update the UI must be called from main thread\n      DispatchQueue.main.async {\n        self.webView.load(URLRequest(url: appendedURL!))\n      }\n    } else {\n      // handle error, nil appendedURL\n    }\n  }\n})\n')),(0,l.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) appendToUrl: (NSURL * _Nullable baseUrl) completion: ^(NSURL * _Nullable urlWithVisitorData, NSError * _Nullable error) completion;\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSURL* url = [NSURL URLWithString:@"https://example.com"];\n[AEPMobileIdentity appendToUrl:url completion:^(NSURL * _Nullable urlWithVisitorData, NSError * _Nullable error) {\n  if (error) {\n    // handle error here\n  } else {\n    // handle the appended url here\n    if (urlWithVisitorData) {\n      // APIs which update the UI must be called from main thread\n      dispatch_async(dispatch_get_main_queue(), ^{\n        [[self webView] loadRequest:[NSURLRequest requestWithURL:urlWithVisitorData]];\n      }\n    } else {\n      // handle error, nil urlWithVisitorData\n    }\n  }\n}];\n')),(0,l.mdx)(p,{platform:"android",api:"extension-version",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java-1"},"Java"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"@NonNull\npublic static String extensionVersion();\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"String identityExtensionVersion = Identity.extensionVersion();\n")),(0,l.mdx)(p,{platform:"ios",api:"extension-version",repeat:"10",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"swift-1"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"static var extensionVersion: String\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"let identityExtensionVersion  = Identity.extensionVersion\n")),(0,l.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (nonnull NSString*) extensionVersion;\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"NSString *identityVersion = [AEPMobileIdentity extensionVersion];\n")),(0,l.mdx)(p,{platform:"android",api:"get-experience-cloud-id",repeat:"7",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java-2"},"Java"),(0,l.mdx)("p",null,"This API can be called with ",(0,l.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeCallback")," or ",(0,l.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeCallbackWithError")," for retrieving the ECID from the Mobile SDK. When ",(0,l.mdx)("inlineCode",{parentName:"p"},"AdobeCallbackWithError")," is provided, this API uses a default timeout of 500ms. If the operation times out or an unexpected error occurs, the ",(0,l.mdx)("inlineCode",{parentName:"p"},"fail")," method is called with the appropriate ",(0,l.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeError"),"."),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public static void getExperienceCloudId(@NonNull final AdobeCallback<String> callback)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"callback")," is invoked after the ECID is available.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"Identity.getExperienceCloudId(new AdobeCallback<String>() {\n    @Override\n    public void call(String id) {\n         //Handle the ID returned here\n    }\n});\n")),(0,l.mdx)(p,{platform:"ios",api:"get-experience-cloud-id",repeat:"11",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"swift-2"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(getExperienceCloudId:)\nstatic func getExperienceCloudId(completion: @escaping (String?, Error?) -> Void)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"completion")," is invoked with ",(0,l.mdx)("em",{parentName:"li"},"String")," after the ECID is available, or ",(0,l.mdx)("em",{parentName:"li"},"Error")," if an unexpected error occurs or the request times out. The returned ",(0,l.mdx)("inlineCode",{parentName:"li"},"Error")," contains the ",(0,l.mdx)("a",{parentName:"li",href:"../api-reference.md#public-classes"},"AEPError")," code of the specific error.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"Identity.getExperienceCloudId { ecid, error in\n  if let error = error {\n    // handle error here\n  } else {\n    // handle the retrieved ID here\n  }\n}\n")),(0,l.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) getExperienceCloudId: ^(NSString * _Nullable ecid, NSError * _Nullable error) completion;\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[AEPMobileIdentity getExperienceCloudId:^(NSString * _Nullable ecid, NSError *error) {\n  if (error) {\n    // handle error here\n  } else {\n    // handle the retrieved ID here\n  }\n}];\n")),(0,l.mdx)(p,{platform:"android",api:"get-identifiers",repeat:"7",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java-3"},"Java"),(0,l.mdx)("p",null,"This API can be called with ",(0,l.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeCallback")," or ",(0,l.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeCallbackWithError")," for retrieving the custom identifiers from the Mobile SDK. When ",(0,l.mdx)("inlineCode",{parentName:"p"},"AdobeCallbackWithError")," is provided, this API uses a default timeout of 500ms. If the operation times out or an unexpected error occurs, the ",(0,l.mdx)("inlineCode",{parentName:"p"},"fail")," method is called with the appropriate ",(0,l.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeError"),"."),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public static void getIdentifiers(@NonNull final AdobeCallback<List<VisitorID>> callback)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"callback")," is invoked after the customer identifiers are available.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"Identity.getIdentifiers(new AdobeCallback<List<VisitorID>>() {\n    @Override\n    public void call(List<VisitorID> idList) {\n         //Process the IDs here\n    }\n\n});\n")),(0,l.mdx)(p,{platform:"ios",api:"get-identifiers",repeat:"11",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"swift-3"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(getIdentifiers:)\nstatic func getIdentifiers(completion: @escaping ([Identifiable]?, Error?) -> Void)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"completion")," is invoked with a list of ",(0,l.mdx)("em",{parentName:"li"},"Identifiable")," objects after the customer identifiers are available, or ",(0,l.mdx)("em",{parentName:"li"},"Error")," if an unexpected error occurs or the request times out. The returned ",(0,l.mdx)("inlineCode",{parentName:"li"},"Error")," contains the ",(0,l.mdx)("a",{parentName:"li",href:"../api-reference.md#public-classes"},"AEPError")," code of the specific error.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"Identity.getIdentifiers { identifiers, error in\n  if let error = error {\n    // handle error here\n  } else {\n    // handle the retrieved identifiers here\n  }\n}\n")),(0,l.mdx)("h4",{id:"objective-c-3"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) getIdentifiers: ^(NSArray<id<AEPIdentifiables>> * _Nullable identifiers, NSError * _Nullable error) completion;\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[[AEPMobileIdentity getIdentifiers:^(NSArray<id<AEPIdentifiable>> * _Nullable identifiers, NSError *error) {\n  if (error) {\n    // handle error here\n  } else {\n    // handle the retrieved identifiers here\n  }\n}];\n")),(0,l.mdx)(p,{platform:"android",api:"get-url-variables",repeat:"8",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java-4"},"Java"),(0,l.mdx)("p",null,"This method was added in Core version 1.4.0 and Identity version 1.1.0."),(0,l.mdx)("p",null,"This API can be called with ",(0,l.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeCallback")," or ",(0,l.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeCallbackWithError")," for retrieving the attributes from the Mobile SDK. When ",(0,l.mdx)("inlineCode",{parentName:"p"},"AdobeCallbackWithError")," is provided, this API uses a default timeout of 500ms. If the operation times out or an unexpected error occurs, the ",(0,l.mdx)("inlineCode",{parentName:"p"},"fail")," method is called with the appropriate ",(0,l.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeError"),"."),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public static void getUrlVariables(final AdobeCallback<String> callback);\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"callback")," has an NSString value that contains the visitor identifiers as a query string after the service request is complete.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'Identity.getUrlVariables(new AdobeCallback<String>() {\n    @Override\n    public void call(String stringWithAdobeVisitorInfo) {\n        //handle the URL query parameter string here\n        //For example, open the URL on the device browser\n        //\n        Intent i = new Intent(Intent.ACTION_VIEW);\n        i.setData(Uri.parse("https://example.com?" + urlWithAdobeVisitorInfo));\n        startActivity(i);\n    }\n});\n')),(0,l.mdx)(p,{platform:"ios",api:"get-url-variables",repeat:"11",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"swift-4"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(getUrlVariables:)\nstatic func getUrlVariables(completion: @escaping (String?, Error?) -> Void)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"completion")," is invoked with ",(0,l.mdx)("em",{parentName:"li"},"String")," containing the visitor identifiers as a query string, or ",(0,l.mdx)("em",{parentName:"li"},"Error")," if an unexpected error occurs or the request times out. The returned ",(0,l.mdx)("inlineCode",{parentName:"li"},"Error")," contains the ",(0,l.mdx)("a",{parentName:"li",href:"../api-reference.md#public-classes"},"AEPError")," code of the specific error. The default timeout of 500ms.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},'Identity.getUrlVariables { (urlVariables, error) in\n  if let error = error {\n    // handle error\n  } else {\n    var urlStringWithVisitorData: String = "https://example.com"\n    if let urlVariables: String = urlVariables {\n      urlStringWithVisitorData.append("?" + urlVariables)\n    }\n\n    guard let urlWithVisitorData: URL = URL(string: urlStringWithVisitorData) else {\n      // handle error, unable to construct URL\n      return\n    }\n    // APIs which update the UI must be called from main thread\n    DispatchQueue.main.async {\n      self.webView.load(URLRequest(url: urlWithVisitorData))\n    }\n  }\n}\n')),(0,l.mdx)("h4",{id:"objective-c-4"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) getUrlVariables: ^(NSString * _Nullable urlVariables, NSError * _Nullable error) completion;\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[AEPMobileIdentity getUrlVariables:^(NSString * _Nullable urlVariables, NSError *error) {\n  if (error) {\n    // handle error here\n  } else {\n    // handle the URL query parameter string here\n    NSString* urlString = @"https://example.com";\n    NSString* urlStringWithVisitorData = [NSString stringWithFormat:@"%@?%@", urlString, urlVariables];\n    NSURL* urlWithVisitorData = [NSURL URLWithString:urlStringWithVisitorData];\n    // APIs which update the UI must be called from main thread\n    dispatch_async(dispatch_get_main_queue(), ^{\n      [[self webView] loadRequest:[NSURLRequest requestWithURL:urlWithVisitorData]];\n    }\n  }\n}];\n')),(0,l.mdx)(p,{platform:"android",api:"register-extension",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java-5"},"Java"),(0,l.mdx)("p",null,"After calling the ",(0,l.mdx)("inlineCode",{parentName:"p"},"setApplication()")," method in the ",(0,l.mdx)("inlineCode",{parentName:"p"},"onCreate()")," method, register the extension. If the registration was not successful, an ",(0,l.mdx)("inlineCode",{parentName:"p"},"InvalidInitException")," is thrown."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public class MobileApp extends Application {\n@Override\npublic void onCreate() {\nsuper.onCreate();\n     MobileCore.setApplication(this);\n     try {\n         Identity.registerExtension();\n     } catch (Exception e) {\n         //Log the exception\n     }\n  }\n}\n")),(0,l.mdx)(p,{platform:"ios",api:"register-extension",repeat:"7",mdxType:"Variant"}),(0,l.mdx)("p",null,"For iOS AEP libraries, registration is changed to a single API call. Calling the MobileCore.start API is no longer required. See ",(0,l.mdx)("a",{parentName:"p",href:"../api-reference.md#registerextension-s"},"MobileCore.registerExtensions()")," for more information."),(0,l.mdx)("h4",{id:"swift-5"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},'// AppDelegate.swift\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    MobileCore.registerExtensions([AEPIdentity.Identity.self, Lifecycle.self, Analytics.self], {\n        MobileCore.configureWith(appId: "mobilePropertyEnvironmentID")\n    })\n  ...\n}\n')),(0,l.mdx)("h4",{id:"objective-c-5"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},'// AppDelegate.m\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    [AEPMobileCore registerExtensions:@[AEPMobileIdentity.class, AEPMobileLifecycle.class, AEPMobileAnalytics.class] completion:^{\n    [AEPMobileCore configureWithAppId: @"mobilePropertyEnvironmentID"];\n  }];\n  ...\n}\n')),(0,l.mdx)(p,{platform:"android",api:"set-advertising-identifier",repeat:"8",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java-6"},"Java"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public static void setAdvertisingIdentifier(@Nullable final String advertisingIdentifier)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"advertisingIdentifier")," is a string that provides developers with a simple, standard system to track the Ads through their apps.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("p",null,"This is just an implementation example. For more information about advertising identifiers and how to handle them correctly in your mobile application, see ",(0,l.mdx)("a",{parentName:"p",href:"https://developers.google.com/android/reference/com/google/android/gms/ads/identifier/AdvertisingIdClient"},"Google Play Services documentation about AdvertisingIdClient"),"."),(0,l.mdx)("p",null,"This example requires Google Play Services to be configured in your mobile application. For instructions on how to import the Google Mobile Ads SDK and how to configure your ApplicationManifest.xml file, see ",(0,l.mdx)("a",{parentName:"p",href:"https://developers.google.com/admob/android/quick-start"},"Google Mobile Ads SDK setup"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'...\n@Override\npublic void onResume() {\n    super.onResume();\n    ...\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            String advertisingIdentifier = null;\n\n            try {\n                AdvertisingIdClient.Info adInfo = AdvertisingIdClient.getAdvertisingIdInfo(getApplicationContext());\n                if (adInfo != null) {\n                    if (!adInfo.isLimitAdTrackingEnabled()) {\n                        advertisingIdentifier = adInfo.getId();\n                    } else {\n                        MobileCore.log(LoggingMode.DEBUG, "ExampleActivity", "Limit Ad Tracking is enabled by the user, cannot process the advertising identifier");\n                    }\n                }\n\n            } catch (IOException e) {\n                // Unrecoverable error connecting to Google Play services (e.g.,\n                // the old version of the service doesn\'t support getting AdvertisingId).\n                MobileCore.log(LoggingMode.DEBUG, "ExampleActivity", "IOException while retrieving the advertising identifier " + e.getLocalizedMessage());\n            } catch (GooglePlayServicesNotAvailableException e) {\n                // Google Play services is not available entirely.\n                MobileCore.log(LoggingMode.DEBUG, "ExampleActivity", "GooglePlayServicesNotAvailableException while retrieving the advertising identifier " + e.getLocalizedMessage());\n            } catch (GooglePlayServicesRepairableException e) {\n                // Google Play services is not installed, up-to-date, or enabled.\n                MobileCore.log(LoggingMode.DEBUG, "ExampleActivity", "GooglePlayServicesRepairableException while retrieving the advertising identifier " + e.getLocalizedMessage());\n            }\n\n            MobileCore.setAdvertisingIdentifier(advertisingIdentifier);\n        }\n    }).start();\n}\n')),(0,l.mdx)(p,{platform:"ios",api:"set-advertising-identifier",repeat:"13",mdxType:"Variant"}),(0,l.mdx)("p",null,"To access IDFA and handle it correctly in your mobile application, see the ",(0,l.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/adsupport/asidentifiermanager"},"Apple developer documentation about IDFA")),(0,l.mdx)("p",null,"Starting iOS 14+, applications must use the ",(0,l.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/apptrackingtransparency"},"App Tracking Transparency")," framework to request user authorization before using the Identifier for Advertising (IDFA)."),(0,l.mdx)("h4",{id:"swift-6"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(setAdvertisingIdentifier:)\npublic static func setAdvertisingIdentifier(_ identifier: String?)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"identifier")," is a string that provides developers with a simple, standard system to continue to track the Ads through their apps.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},'import AdSupport\nimport AppTrackingTransparency\n...\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    ...\n    if #available(iOS 14, *) {\n       setAdvertisingIdentiferUsingTrackingManager()\n    } else {\n       // Fallback on earlier versions\n       setAdvertisingIdentifierUsingIdentifierManager()\n    }\n\n}\n\nfunc setAdvertisingIdentifierUsingIdentifierManager() {\n    var idfa:String = "";\n        if (ASIdentifierManager.shared().isAdvertisingTrackingEnabled) {\n            idfa = ASIdentifierManager.shared().advertisingIdentifier.uuidString;\n        } else {\n            Log.debug(label: "AppDelegateExample",\n                      "Advertising Tracking is disabled by the user, cannot process the advertising identifier.");\n        }\n        MobileCore.setAdvertisingIdentifier(idfa);\n}\n\n@available(iOS 14, *)\nfunc setAdvertisingIdentiferUsingTrackingManager() {\n    ATTrackingManager.requestTrackingAuthorization { (status) in\n        var idfa: String = "";\n\n        switch (status) {\n        case .authorized:\n            idfa = ASIdentifierManager.shared().advertisingIdentifier.uuidString\n        case .denied:\n            Log.debug(label: "AppDelegateExample",\n                      "Advertising Tracking is denied by the user, cannot process the advertising identifier.")\n        case .notDetermined:\n            Log.debug(label: "AppDelegateExample",\n                      "Advertising Tracking is not determined, cannot process the advertising identifier.")\n        case .restricted:\n            Log.debug(label: "AppDelegateExample",\n                      "Advertising Tracking is restricted by the user, cannot process the advertising identifier.")\n        }\n\n        MobileCore.setAdvertisingIdentifier(idfa)\n    }\n}\n')),(0,l.mdx)("h4",{id:"objective-c-6"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) setAdvertisingIdentifier: (NSString * _Nullable identifier);\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},'#import <AdSupport/ASIdentifierManager.h>\n#import <AppTrackingTransparency/ATTrackingManager.h>\n...\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n-   ...\n-\n    if (@available(iOS 14, *)) {\n        [self setAdvertisingIdentiferUsingTrackingManager];\n    } else {\n        // fallback to earlier versions\n        [self setAdvertisingIdentifierUsingIdentifierManager];\n    }\n\n}\n\n- (void) setAdvertisingIdentifierUsingIdentifierManager {\n    // setup the advertising identifier\n    NSString *idfa = nil;\n    if ([[ASIdentifierManager sharedManager] isAdvertisingTrackingEnabled]) {\n        idfa = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];\n    } else {\n        [AEPLog debugWithLabel:@"AppDelegateExample"\n                       message:@"Advertising Tracking is disabled by the user, cannot process the advertising identifier"];\n    }\n    [AEPMobileCore setAdvertisingIdentifier:idfa];\n\n}\n\n- (void) setAdvertisingIdentiferUsingTrackingManager API_AVAILABLE(ios(14)) {\n    [ATTrackingManager requestTrackingAuthorizationWithCompletionHandler:\n    ^(ATTrackingManagerAuthorizationStatus status){\n        NSString *idfa = nil;\n        switch(status) {\n            case ATTrackingManagerAuthorizationStatusAuthorized:\n                idfa = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];\n                break;\n            case ATTrackingManagerAuthorizationStatusDenied:\n                [AEPLog debugWithLabel:@"AppDelegateExample"\n                               message:@"Advertising Tracking is denied by the user, cannot process the advertising identifier"];\n                break;\n            case ATTrackingManagerAuthorizationStatusNotDetermined:\n                [AEPLog debugWithLabel:@"AppDelegateExample"\n                               message:@"Advertising Tracking is not determined, cannot process the advertising identifier"];\n                break;\n            case ATTrackingManagerAuthorizationStatusRestricted:\n                [AEPLog debugWithLabel:@"AppDelegateExample"\n                               message:@"Advertising Tracking is restricted by the user, cannot process the advertising identifier"];\n                break;\n        }\n\n        [AEPMobileCore setAdvertisingIdentifier:idfa];\n    }];\n}\n')),(0,l.mdx)(p,{platform:"android",api:"set-push-identifier",repeat:"6",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java-7"},"Java"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public static void setPushIdentifier(@Nullable final String pushIdentifier)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"pushIdentifier")," is a string that contains the device token for push notifications.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"//Retrieve the token from either GCM or FCM, and pass it to the SDK\nMobileCore.setPushIdentifier(token);\n")),(0,l.mdx)(p,{platform:"ios",api:"set-push-identifier",repeat:"11",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"swift-7"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(setPushIdentifier:)\npublic static func setPushIdentifier(_ deviceToken: Data?)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"deviceToken")," is a string that contains the device token for push notifications.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"// Set the deviceToken that the APNs has assigned to the device\nMobileCore.setPushIdentifier(deviceToken)\n")),(0,l.mdx)("h4",{id:"objective-c-7"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) setPushIdentifier: (NSString * _Nullable deviceToken);\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"// Set the deviceToken that the APNS has assigned to the device\n[AEPMobileCore setPushIdentifier:deviceToken];\n")),(0,l.mdx)(p,{platform:"android",api:"sync-identifier",repeat:"6",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java-8"},"Java"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public static void syncIdentifier(\n            @NonNull final String identifierType,\n            @Nullable final String identifier,\n            @NonNull final VisitorID.AuthenticationState authenticationState)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"identifierType (String)")," contains the ",(0,l.mdx)("inlineCode",{parentName:"li"},"identifier type"),", and this parameter should not be null or empty. The allowed characters are ","[A-Za-z0-9_.]"),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"identifier (String)")," contains the ",(0,l.mdx)("inlineCode",{parentName:"li"},"identifier value"),", and this parameter should not be null or empty."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"authenticationState (AuthenticationState)")," indicates the authentication state of the user and contains one of the ",(0,l.mdx)("a",{parentName:"li",href:"#public-classes"},"VisitorID.AuthenticationState")," values.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'Identity.syncIdentifier("idType",\n                        "idValue",\n                        VisitorID.AuthenticationState.AUTHENTICATED);\n')),(0,l.mdx)(p,{platform:"ios",api:"sync-identifier",repeat:"11",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"swift-8"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(syncIdentifierWithType:identifier:authenticationState:)\nstatic func syncIdentifier(identifierType: String, identifier: String, authenticationState: MobileVisitorAuthenticationState)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"The ",(0,l.mdx)("em",{parentName:"li"},"identifierType (String)")," contains the ",(0,l.mdx)("inlineCode",{parentName:"li"},"identifier type"),", and this parameter should not be null or empty. The allowed characters are ","[A-Za-z0-9_.]"),(0,l.mdx)("li",{parentName:"ul"},"The ",(0,l.mdx)("em",{parentName:"li"},"identifier (String)")," contains the ",(0,l.mdx)("inlineCode",{parentName:"li"},"identifier")," value, and this parameter should not be null or empty. If either the ",(0,l.mdx)("inlineCode",{parentName:"li"},"identifierType")," or ",(0,l.mdx)("inlineCode",{parentName:"li"},"identifier")," contains a null or an empty string, the identifier is ignored by the Identity extension."),(0,l.mdx)("li",{parentName:"ul"},"The ",(0,l.mdx)("em",{parentName:"li"},"authenticationState (MobileVisitorAuthenticationState)")," value indicates the authentication state for the user and contains one of the ",(0,l.mdx)("a",{parentName:"li",href:"#public-classes"},"MobileVisitorAuthenticationState")," values.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},'Identity.syncIdentifier(identifierType: "idType",\n                            identifier: "idValue",\n                        authentication: .unknown)\n')),(0,l.mdx)("h4",{id:"objective-c-8"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) syncIdentifierWithType: (NSString * _Nonnull identifierType)\n                                         identifier: (NSString * _Nonnull identifier)\n                                 authentication: (enum AEPAuthenticationState authenticationState);\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[AEPMobileIdentity syncIdentifierWithType:@"idType"\n                               identifier:@"idValue"\n                      authenticationState:AEPMobileVisitorAuthStateUnknown];\n')),(0,l.mdx)(p,{platform:"android",api:"sync-identifiers",repeat:"6",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java-9"},"Java"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public static void syncIdentifiers(@NonNull final Map<String, String> identifiers)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"identifiers")," is a map that contains the identifiers with the Identifier type as the key, and the string identifier as the value. In each identifier pair, if the ",(0,l.mdx)("inlineCode",{parentName:"li"},"identifier type")," contains a null or an empty string, the identifier is ignored by the Identity extension.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'Map<String, String> identifiers = new HashMap<String, String>();\nidentifiers.put("idType1", "idValue1");\nidentifiers.put("idType2", "idValue2");\nidentifiers.put("idType3", "idValue3");\nIdentity.syncIdentifiers(identifiers);\n')),(0,l.mdx)(p,{platform:"ios",api:"sync-identifiers",repeat:"11",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"swift-9"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(syncIdentifiers:)\nstatic func syncIdentifiers(identifiers: [String: String]?)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"The ",(0,l.mdx)("em",{parentName:"li"},"identifiers")," dictionary contains identifier type as the key and identifier as the value, both identifier type and identifier should be non empty and non nil values.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},'let ids : [String: String] = ["idType1":"idValue1",\n                              "idType2":"idValue2",\n                              "idType3":"idValue3"];\nIdentity.syncIdentifiers(identifiers: ids)\n')),(0,l.mdx)("h4",{id:"objective-c-9"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) syncIdentifiers: (NSDictionary<NSString *, NSString *> * _Nullable identifiers);\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSDictionary *ids = @{@"idType1":@"idValue1",\n                      @"idType2":@"idValue2",\n                      @"idType3":@"idValue3"};\n[AEPMobileIdentity syncIdentifiers:ids];\n')),(0,l.mdx)(p,{platform:"android",api:"sync-identifiers-overloaded",repeat:"6",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"java-10"},"Java"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public static void syncIdentifiers(\n            @NonNull final Map<String, String> identifiers,\n            @NonNull final VisitorID.AuthenticationState authenticationState)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"identifiers")," is a map that contains IDs with the identifier type as the key, and the string identifier as the value."),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("em",{parentName:"li"},"authState")," indicates the authentication state for the user, which contains one of the following ",(0,l.mdx)("a",{parentName:"li",href:"#public-classes"},"VisitorID.AuthenticationState")," values.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'Map<String, String> identifiers = new HashMap<String, String>();\nidentifiers.put("idType1", "idValue1");\nidentifiers.put("idType2", "idValue2");\nidentifiers.put("idType3", "idValue3");\nIdentity.syncIdentifiers(identifiers, VisitorID.AuthenticationState.AUTHENTICATED);\n')),(0,l.mdx)(p,{platform:"ios",api:"sync-identifiers-overloaded",repeat:"11",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"swift-10"},"Swift"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(syncIdentifiers:authenticationState:)\nstatic func syncIdentifiers(identifiers: [String: String]?, authenticationState: MobileVisitorAuthenticationState)\n")),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},"The ",(0,l.mdx)("em",{parentName:"li"},"identifiers")," dictionary contains identifier type as the key and identifier as the value, both identifier type and identifier should be non empty and non nil values."),(0,l.mdx)("li",{parentName:"ul"},"The ",(0,l.mdx)("em",{parentName:"li"},"authenticationState (MobileVisitorAuthenticationState)")," indicates the authentication state of the user and contains one of the ",(0,l.mdx)("a",{parentName:"li",href:"#public-classes"},"MobileVisitorAuthenticationState")," values.")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},'let ids : [String: String] = ["idType1":"idValue1",\n                              "idType2":"idValue2",\n                              "idType3":"idValue3"];\nIdentity.syncIdentifiers(identifiers: ids, authenticationState: .authenticated)\n')),(0,l.mdx)("h4",{id:"objective-c-10"},"Objective-C"),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Syntax")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) syncIdentifiers: (NSDictionary<NSString *, NSString *> * _Nullable identifiers)\n                  authentication: (enum AEPAuthenticationState authenticationState);\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Example")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSDictionary *ids = @{@"idType1":@"idValue1",\n                      @"idType2":@"idValue2",\n                      @"idType3":@"idValue3"};\n[AEPMobileIdentity syncIdentifiers:ids authenticationState:AEPMobileVisitorAuthStateAuthenticated];\n')),(0,l.mdx)(p,{platform:"android",api:"public-classes",repeat:"6",mdxType:"Variant"}),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"AuthenticationState")),(0,l.mdx)("p",null,"This class is used to indicate the authentication state for the current ",(0,l.mdx)("inlineCode",{parentName:"p"},"VisitorID"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public enum AuthenticationState {\n       UNKNOWN,\n       AUTHENTICATED,\n       LOGGED_OUT;\n}\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"VisitorID")),(0,l.mdx)("p",null,"This class is an identifier to be used with the Adobe Experience Cloud Identity Service."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public class VisitorID {\n     //Constructor\n     public VisitorID(String idOrigin, String idType, String id, VisitorID.AuthenticationState authenticationState);\n\n     public VisitorID.AuthenticationState getAuthenticationState();\n\n     public final String getId();\n\n     public final String getIdOrigin();\n\n     public final String getIdType();\n\n}\n")),(0,l.mdx)(p,{platform:"ios",api:"public-classes",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"MobileVisitorAuthenticationState")),(0,l.mdx)("p",null,"This is used to indicate the authentication state for the current ",(0,l.mdx)("inlineCode",{parentName:"p"},"Identifiable"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(AEPMobileVisitorAuthState) public enum MobileVisitorAuthenticationState: Int, Codable {\n    case unknown = 0\n    case authenticated = 1\n    case loggedOut = 2\n}\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Identifiable")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(AEPIdentifiable) public protocol Identifiable {\n    /// Origin of the identifier\n    var origin: String? { get }\n\n    /// Type of the identifier\n    var type: String? { get }\n\n    /// The identifier\n    var identifier: String? { get }\n\n    /// The authentication state for the identifier\n    var authenticationState: MobileVisitorAuthenticationState { get }\n}\n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=6ee8060c07d1eff63231322757fa2fc5a42523fb-d38f30f2de7c317e1e47.js.map