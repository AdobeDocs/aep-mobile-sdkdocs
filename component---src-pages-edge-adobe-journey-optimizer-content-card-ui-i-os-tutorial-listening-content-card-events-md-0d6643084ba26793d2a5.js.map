{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-content-card-ui-i-os-tutorial-listening-content-card-events-md-0d6643084ba26793d2a5.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EAClB,CAAC,EACKG,EAAYL,EAAc,aAC1BM,EAAcN,EAAc,eAC5BO,EAAc,CAClBR,aAAAA,GAEIS,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGT,GAAK,YAER,OAAO,SAACM,GAAS,UAAKD,EAAiBL,EAAK,CAAES,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,oCAAkC,qCAE1C,uGACA,eACE,GAAM,YAAU,aAElB,sMAAuL,cAAGC,WAAW,IACjM,KAAQ,oDAAkD,+BACtB,eACxC,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAI,eAC/C,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAI,eAC/C,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAI,iBAEjD,eACE,GAAM,uCAAqC,wCAE7C,qFACA,oBACE,eAAIA,WAAW,MAAI,mBAAoB,cAAGA,WAAW,KACjD,KAAQ,oDAAkD,+BACtB,yEACxC,eAAIA,WAAW,MAAI,6BAA8B,cAAGA,WAAW,KAC3D,KAAQ,qCAAmC,qBACjB,WAEhC,4DAA6C,uBAAYA,WAAW,KAAG,6BAA2C,MAClH,SAACR,EAAS,CAACS,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,QAAQJ,QAAQ,eACtE,eACE,GAAM,SAAO,UAEf,qBAAK,iBAAMC,WAAW,MAClB,UAAa,kBAAgB,ivCAwCjC,eACE,GAAM,4BAA0B,6BAElC,0BAAW,uBAAYA,WAAW,KAAG,cAA4B,iCAAiC,uBAAYA,WAAW,KAAG,aAA2B,yHACvJ,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAI,YAAa,uBAAYA,WAAW,KAAG,QAAsB,wHAEjF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAI,YAAa,uBAAYA,WAAW,KAAG,SAAuB,4CAGpF,SAACR,EAAS,CAACS,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,QAAQJ,QAAQ,eACtE,eACE,GAAM,WAAS,UAEjB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,kBAAgB,kTAUjC,eACE,GAAM,qCAAmC,sCAE3C,SAACP,EAAW,CAACW,QAAQ,OAAOH,MAAM,OAAOF,QAAQ,iBACjD,gHACA,qGAAsF,uBAAYC,WAAW,KAAG,aAA2B,aAC3I,SAACR,EAAS,CAACS,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,QAAQJ,QAAQ,eACtE,eACE,GAAM,WAAS,UAEjB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,kBAAgB,qHAKjC,8FAA+E,uBAAYA,WAAW,KAAG,cAA4B,wFAGzI,CAEAH,EAAWQ,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/content-card-ui/iOS/tutorial/listening-content-card-events.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"listening-to-content-card-events\"\n    }}>{`Listening to Content Card Events`}</h1>\n    <p>{`This tutorial explains how to listen to content card events in your application.`}</p>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`The Messaging extension provides a way to listen to events from content cards displayed in your application. The following functions can be implemented in conformance with the `}<a parentName=\"p\" {...{\n        \"href\": \"../public-classes/contentcarduieventlistening.md\"\n      }}>{`ContentCardUIEventListening`}</a>{` protocol:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onDisplay`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onDismiss`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onInteract`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"implement-contentcardeventlistening\"\n    }}>{`Implement ContentCardEventListening`}</h2>\n    <p>{`Complete the following steps to listen to content card events:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Conform to the `}<a parentName=\"li\" {...{\n          \"href\": \"../public-classes/contentcarduieventlistening.md\"\n        }}>{`ContentCardUIEventListening`}</a>{` protocol in your class or struct and implement the desired methods.`}</li>\n      <li parentName=\"ol\">{`Pass the listener to the `}<a parentName=\"li\" {...{\n          \"href\": \"../api-usage.md#getcontentcardsui\"\n        }}>{`getContentCardsUI`}</a>{` API.`}</li>\n    </ol>\n    <p>{`Below is an example implementation of `}<inlineCode parentName=\"p\">{`ContentCardEventListening`}</inlineCode>{`:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Swift\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`struct HomePage: View, ContentCardUIEventListening {\n    \n    @State var savedCards : [ContentCardUI] = []\n    \n    var body: some View {\n        ScrollView (.vertical) {\n          // Display the content cards here\n        }\n        .onAppear() {\n            let homePageSurface = Surface(path: \"homepage\")\n            // 2. Pass the listener to the getContentCardsUI API\n            AEPSwiftUI.getContentCardsUI(for: homePageSurface,\n                                         listener: self) { result in\n                switch result {\n                case .success(let cards):\n                    savedCards = cards\n                    \n                case .failure(let error):\n                    // handle error here                    \n                }\n            }\n        }\n    }\n    \n    // Implement the ContentCardUIEventListening protocol methods\n    func onDisplay(_ card: ContentCardUI) {\n        // Handle the card display event\n    }\n    \n    func onDismiss(_ card: ContentCardUI) {\n        // Handle the card dismiss event\n    }\n    \n    func onInteract(_ card: ContentCardUI, _ interactionId: String, actionURL: URL?) -> Bool {\n        // Handle the card interaction event\n        return false\n    }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"handling-actionable-urls\"\n    }}>{`Handling actionable URLs`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`onInteract`}</inlineCode>{` method provides an optional `}<inlineCode parentName=\"p\">{`actionURL`}</inlineCode>{` parameter associated with the interaction event. The return value of this method determines how the URL is handled.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Returns `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` if your application has successfully handled the URL. This indicates to the SDK that no further action is needed.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Returns `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` to allow the SDK to process the URL.`}</p>\n      </li>\n    </ul>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Swift\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func onInteract(_ card: ContentCardUI, _ interactionId: String, actionURL: URL?) -> Bool {\n    guard let url = actionURL else { return false }\n    \n    // Your application handles the actionable URL here\n\n    // Return true to indicate that the SDK need not process the URL\n    return true\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"removing-content-cards-on-dismiss\"\n    }}>{`Removing content cards on dismiss`}</h2>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Removing a dismissed content card from the UI is the responsibility of the app developer.`}</p>\n    <p>{`To remove a content card from the UI when the user dismisses it, implement the `}<inlineCode parentName=\"p\">{`onDismiss`}</inlineCode>{` method:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Swift\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"swift-2\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`    func onDismiss(_ card: ContentCardUI) {\n        savedCards.removeAll(where: { $0.id == card.id })\n    }\n`}</code></pre>\n    <p>{`This implementation ensures that the dismissed card is removed from the `}<inlineCode parentName=\"p\">{`savedCards`}</inlineCode>{` array, which should trigger a UI update if the array is used to populate your view.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","CodeBlock","InlineAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","slots","repeat","languages","variant","isMDXComponent"],"sourceRoot":""}