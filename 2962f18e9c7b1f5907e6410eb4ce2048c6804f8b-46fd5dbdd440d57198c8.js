"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[2122],{84210:function(e,a,n){n.r(a),n.d(a,{_frontmatter:function(){return p},default:function(){return x}});var t,r=n(87462),l=n(63366),i=(n(15007),n(64983)),o=n(91515),m=["components"],p={},d=(t="Variant",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",e)}),s={_frontmatter:p},c=o.Z;function x(e){var a=e.components,n=(0,l.Z)(e,m);return(0,i.mdx)(c,(0,r.Z)({},s,n,{components:a,mdxType:"MDXLayout"}),(0,i.mdx)(d,{platform:"android",api:"collect-launch-info",repeat:"2",mdxType:"Variant"}),(0,i.mdx)("p",null,"The Android SDK automatically registers an ",(0,i.mdx)("inlineCode",{parentName:"p"},"Application.ActivityLifecycleCallbacks"),"and listens for ",(0,i.mdx)("inlineCode",{parentName:"p"},"onActivityResumed"),". When an activity is resumed, SDK collects the data from the activity. Currently, it is being used in the following scenarios:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Tracking deep link clickthrough"),(0,i.mdx)("li",{parentName:"ul"},"Tracking push message clickthrough"),(0,i.mdx)("li",{parentName:"ul"},"Tracking Local Notification clickthrough")),(0,i.mdx)(d,{platform:"ios-aep",api:"collect-launch-info",repeat:"14",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"swift"},"Swift"),(0,i.mdx)("p",null,"This method should be called to support the following use cases:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Tracking deep link clickthroughs",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"From ",(0,i.mdx)("inlineCode",{parentName:"li"},"application(_:didFinishLaunchingWithOptions:)")),(0,i.mdx)("li",{parentName:"ul"},"Extract ",(0,i.mdx)("inlineCode",{parentName:"li"},"userInfo")," from ",(0,i.mdx)("inlineCode",{parentName:"li"},"url: UIApplication.LaunchOptionsKey")))),(0,i.mdx)("li",{parentName:"ul"},"Tracking push message clickthrough",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"From ",(0,i.mdx)("inlineCode",{parentName:"li"},"application(_:didReceiveRemoteNotification:fetchCompletionHandler:)"))))),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"}," public static func collectLaunchInfo(_ userInfo: [String: Any])\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"}," MobileCore.collectLaunchInfo(userInfo)\n")),(0,i.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,i.mdx)("p",null,"This method should be called to support the following use cases:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Tracking deep link clickthroughs",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"From ",(0,i.mdx)("inlineCode",{parentName:"li"},"application:didFinishLaunchingWithOptions")),(0,i.mdx)("li",{parentName:"ul"},"Extract ",(0,i.mdx)("inlineCode",{parentName:"li"},"userInfo")," from ",(0,i.mdx)("inlineCode",{parentName:"li"},"UIApplicationLaunchOptionsURLKey"),(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"Tracking push message clickthrough"))),(0,i.mdx)("li",{parentName:"ul"},"From ",(0,i.mdx)("inlineCode",{parentName:"li"},"application:didReceiveRemoteNotification:fetchCompletionHandler:"))))),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objc"},"@objc(collectLaunchInfo:)\npublic static func collectLaunchInfo(_ userInfo: [String: Any])\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objc"}," [AEPMobileCore collectLaunchInfo:launchOptions];\n")),(0,i.mdx)(d,{platform:"ios-acp",api:"collect-launch-info",repeat:"14",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"swift-1"},"Swift"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"collectLaunchInfo")," method should be used in the following use cases:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Tracking a deep link clickthrough",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"From ",(0,i.mdx)("inlineCode",{parentName:"li"},"application(_:didFinishLaunchingWithOptions:)")),(0,i.mdx)("li",{parentName:"ul"},"Extract ",(0,i.mdx)("inlineCode",{parentName:"li"},"userInfo")," from ",(0,i.mdx)("inlineCode",{parentName:"li"},"url: UIApplication.LaunchOptionsKey")))),(0,i.mdx)("li",{parentName:"ul"},"Tracking a push message clickthrough",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"From ",(0,i.mdx)("inlineCode",{parentName:"li"},"application(_:didReceiveRemoteNotification:fetchCompletionHandler:)"))))),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"(void) collectLaunchInfo: (nonnull NSDictionary*) userInfo;\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"ACPCore.collectLaunchInfo(userInfo)\n")),(0,i.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"collectLaunchInfo")," method should be used in the following use cases:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"Tracking a deep link clickthrough",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"From ",(0,i.mdx)("inlineCode",{parentName:"li"},"application:didFinishLaunchingWithOptions")),(0,i.mdx)("li",{parentName:"ul"},"Extract ",(0,i.mdx)("inlineCode",{parentName:"li"},"userInfo")," from ",(0,i.mdx)("inlineCode",{parentName:"li"},"UIApplicationLaunchOptionsURLKey")))),(0,i.mdx)("li",{parentName:"ul"},"Tracking a push message clickthrough",(0,i.mdx)("ul",{parentName:"li"},(0,i.mdx)("li",{parentName:"ul"},"From ",(0,i.mdx)("inlineCode",{parentName:"li"},"application:didReceiveRemoteNotification:fetchCompletionHandler:"))))),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},"(void) collectLaunchInfo: (nonnull NSDictionary*) userInfo;\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objc"}," [ACPCore collectLaunchInfo:launchOptions];\n")),(0,i.mdx)(d,{platform:"android",api:"collect-pii",repeat:"5",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"java"},"Java"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"public static void collectPII(final Map<String, String> piiData);\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'Map<String, String> data = new HashMap<String, String>();\ndata.put("firstname", "customer");\n//The rule to trigger a PII needs to be setup for this call\n//to result in a network send\nMobileCore.collectPII(data);\n')),(0,i.mdx)(d,{platform:"ios-aep",api:"collect-pii",repeat:"10",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"swift-2"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"public static func collectPii(_ data: [String: Any])\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},'MobileCore.collectPii(["key1" : "value1","key2" : "value2"]);\n')),(0,i.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"}," @objc(collectPii:)\n public static func collectPii(_ data: [String: Any])\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},' [AEPMobileCore collectPii:data:@{@"key1" : @"value1",\n                            @"key2" : @"value2"\n                            }];\n')),(0,i.mdx)(d,{platform:"ios-acp",api:"collect-pii",repeat:"10",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"swift-3"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"ACPCore.collectPii(data: [String : String])\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},'MobileCore.collectPii(["key1" : "value1","key2" : "value2"]);\n')),(0,i.mdx)("h4",{id:"objective-c-3"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"(void) collectPii: (nonnull NSDictionary<NSString*, NSString*>*) data;\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[ACPCore collectPii:data:@{@"key1" : "@value1",\n                           @"key2" : "@value2"\n                           }];\n')),(0,i.mdx)(d,{platform:"react-native",api:"collect-pii",repeat:"10",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"javascript"},"Javascript"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},"ACPCore.collectPii(data: [String : String])\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPCore.collectPii({"myPii": "data"});\n')),(0,i.mdx)("h4",{id:"swift-4"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"ACPCore.collectPii(data: [String : String])\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},'MobileCore.collectPii(["key1" : "value1","key2" : "value2"]);\n')),(0,i.mdx)(d,{platform:"android",api:"get-application",repeat:"6",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"java-1"},"Java"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"MobileCore.getApplication")," will return ",(0,i.mdx)("inlineCode",{parentName:"p"},"null")," if the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Application")," object was destroyed or if ",(0,i.mdx)("inlineCode",{parentName:"p"},"MobileCore.setApplication")," was not previously called."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"public static Application getApplication()\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"Application app = MobileCore.getApplication();\nif (app != null) {\n    ...\n}\n")),(0,i.mdx)(d,{platform:"xamarin",api:"get-application",repeat:"4",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"c"},"C#"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"ACPCore.Application")," may be ",(0,i.mdx)("inlineCode",{parentName:"p"},"null")," if the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Application")," object was destroyed or was not set in the Core."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"var app = ACPCore.Application;\nif (app != null) {\n    ...\n}\n")),(0,i.mdx)(d,{platform:"android",api:"get-log-level",repeat:"5",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"java-2"},"Java"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"public static LoggingMode getLogLevel()\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"LoggingMode mode = MobileCore.getLogLevel();\n")),(0,i.mdx)(d,{platform:"ios-aep",api:"get-log-level",repeat:"12",mdxType:"Variant"}),(0,i.mdx)("p",null,"The logLevel getter has been deprecated. To get the log level in the Swift AEP 3.x SDKs, please use ",(0,i.mdx)("inlineCode",{parentName:"p"},"Log.logFilter")," instead."),(0,i.mdx)("h4",{id:"swift-5"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"public static var logFilter: LogLevel\n")),(0,i.mdx)("p",null,"This variable is part of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"Log")," class within ",(0,i.mdx)("inlineCode",{parentName:"p"},"AEPServices"),"."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"var logLevel = Log.logFilter\n")),(0,i.mdx)("h4",{id:"objective-c-4"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},"@objc public static var logFilter: LogLevel\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},"AEPLogLevel logLevel = [AEPLog logFilter];\n")),(0,i.mdx)(d,{platform:"ios-acp",api:"get-log-level",repeat:"10",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"swift-6"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"(ACPMobileLogLevel) logLevel;\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"let logLevel:ACPMobileLogLevel = ACPCore.logLevel();\n")),(0,i.mdx)("h4",{id:"objective-c-5"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},"(ACPMobileLogLevel) logLevel;\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},"var logLevel:ACPMobileLogLevel = [ACPCore logLevel];\n")),(0,i.mdx)(d,{platform:"react-native",api:"get-log-level",repeat:"3",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"javascript-1"},"Javascript"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPCore.getLogLevel().then(level => console.log("AdobeExperienceSDK: Log Level = " + level));\n')),(0,i.mdx)(d,{platform:"unity",api:"get-log-level",repeat:"3",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"c-1"},"C#"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"ACPCore.ACPMobileLogLevel logLevel = ACPCore.GetLogLevel();\n")),(0,i.mdx)(d,{platform:"xamarin",api:"get-log-level",repeat:"3",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"c-2"},"C#"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"var logLevel = ACPCore.LogLevel;\n")),(0,i.mdx)(d,{platform:"android",api:"get-sdk-identities",repeat:"6",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"java-3"},"Java"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"void getSdkIdentities(AdobeCallback<String> callback);\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"callback")," is invoked with the SDK identities as a JSON string. If an instance of  ",(0,i.mdx)("inlineCode",{parentName:"li"},"AdobeCallbackWithError")," is provided, and you are fetching the attributes from the Mobile SDK, the timeout value is 5000ms. If the operation times out or an unexpected error occurs, the ",(0,i.mdx)("inlineCode",{parentName:"li"},"fail")," method is called with the appropriate ",(0,i.mdx)("inlineCode",{parentName:"li"},"AdobeError"),".")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"MobileCore.getSdkIdentities(new AdobeCallback<String>() {\n    @Override\n    public void call(String value) {\n        // handle the json string\n    }\n});\n")),(0,i.mdx)(d,{platform:"ios-aep",api:"get-sdk-identities",repeat:"12",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"swift-7"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"static func getSdkIdentities(completion: @escaping (String?, Error?) -> Void)\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"callback")," is invoked with the SDK identities as a JSON string."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"completionHandler")," is invoked with the SDK identities as a JSON string, or ",(0,i.mdx)("em",{parentName:"li"},"error")," if an unexpected error occurs or the request times out. The default timeout is 1000ms.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"}," MobileCore.getSdkIdentities { (content, error) in\n     // handle completion\n }\n")),(0,i.mdx)("h4",{id:"objective-c-6"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"}," @objc(getSdkIdentities:)\n static func getSdkIdentities(completion: @escaping (String?, Error?) -> Void)\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"callback")," is invoked with the SDK identities as a JSON string."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"completionHandler")," is invoked with the SDK identities as a JSON string, or ",(0,i.mdx)("em",{parentName:"li"},"error")," if an unexpected error occurs or the request times out. The default timeout is 1000ms.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"}," [AEPMobileCore getSdkIdentities:^(NSString * _Nullable content, NSError * _Nullable error) {\n     if (error) {\n       // handle error here\n     } else {\n       // handle the retrieved identities\n     }\n }];\n")),(0,i.mdx)(d,{platform:"ios-acp",api:"get-sdk-identities",repeat:"9",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"objective-c-7"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},"(void) getSdkIdentities: (nullable void (^) (NSString* __nullable content)) callback;\n(void) getSdkIdentitiesWithCompletionHandler: (nullable void (^) (NSString* __nullable content, NSError* _Nullable error)) completionHandler;\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"callback")," is invoked with the SDK identities as a JSON string."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"completionHandler")," is invoked with the SDK identities as a JSON string, or ",(0,i.mdx)("em",{parentName:"li"},"error")," if an unexpected error occurs or the request times out. The default timeout is 1000ms.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[ACPCore getSdkIdentities:^(NSString * _Nullable content){\n    NSLog(content);\n\n[ACPCore getSdkIdentitiesWithCompletionHandler:^(NSString * _Nullable content, NSError * _Nullable error) {\n        if (error) {\n            // handle error here\n        } else {\n            // handle the retrieved identities\n            NSLog(content);\n        }\n    }];\n")),(0,i.mdx)("h4",{id:"swift-8"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"MobileCore.getSdkIdentities { (content, error) in\n    // handle completion\n}\n")),(0,i.mdx)(d,{platform:"android",api:"log",repeat:"10",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"java-4"},"Java"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"MobileCore")," logging APIs use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"android.util.Log")," APIs to log messages to Android. Based on the ",(0,i.mdx)("inlineCode",{parentName:"p"},"LoggingMode")," that is passed to ",(0,i.mdx)("inlineCode",{parentName:"p"},"MobileCore.log()"),", the following Android method is called:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"LoggingMode.VERBOSE")," uses ",(0,i.mdx)("inlineCode",{parentName:"li"},"android.util.Log.v")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"LoggingMode.DEBUG")," uses ",(0,i.mdx)("inlineCode",{parentName:"li"},"android.util.Log.d")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"LoggingMode.WARNING")," uses ",(0,i.mdx)("inlineCode",{parentName:"li"},"android.util.Log.w")),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"LoggingMode.ERROR")," uses ",(0,i.mdx)("inlineCode",{parentName:"li"},"android.util.Log.e"))),(0,i.mdx)("p",null,"All log messages from the Adobe Experience SDK to Android use the same log tag of ",(0,i.mdx)("inlineCode",{parentName:"p"},"AdobeExperienceSDK"),". For example, if logging an error message is using ",(0,i.mdx)("inlineCode",{parentName:"p"},"MobileCore.log()"),", the call to ",(0,i.mdx)("inlineCode",{parentName:"p"},"android.util.Log.e")," looks like ",(0,i.mdx)("inlineCode",{parentName:"p"},'Log.e("AdobeExperienceSDK", tag + " - " + message)'),"."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"public static void log(final LoggingMode mode, final String tag, final String message)\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'MobileCore.log(LoggingMode.DEBUG, "MyClassName", "Provided data was null");\n')),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Output")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-text"},"D/AdobeExperienceSDK: MyClassName - Provided data was null\n")),(0,i.mdx)(d,{platform:"ios-aep",api:"log",repeat:"12",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"swift-9"},"Swift"),(0,i.mdx)("p",null,"The log messages from the Adobe Experience SDK are printed to the Apple System Log facility and use a common format that contains the tag ",(0,i.mdx)("inlineCode",{parentName:"p"},"AEP SDK"),". For example, if logging an error message using ",(0,i.mdx)("inlineCode",{parentName:"p"},"Log.error(label:_ message:_)"),", the printed output looks like ",(0,i.mdx)("inlineCode",{parentName:"p"},"[AEP SDK ERROR <label>]: message"),"."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"public static func trace(label: String, _ message: String) {\npublic static func debug(label: String, _ message: String)\npublic static func warning(label: String, _ message: String) {\npublic static func error(label: String, _ message: String) {\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},'Log.trace(label: "testLabel", "Test message")\nLog.debug(label: "testLabel", "Test message")\nLog.warning(label: "testLabel", "Test message")\nLog.error(label: "testLabel", "Test message")\n')),(0,i.mdx)("h4",{id:"objective-c-8"},"Objective-C"),(0,i.mdx)("p",null,"The log messages from the Adobe Experience SDK are printed to the Apple System Log facility and use a common format that contains the tag ",(0,i.mdx)("inlineCode",{parentName:"p"},"AEP SDK"),". For example, if logging an error message using ",(0,i.mdx)("inlineCode",{parentName:"p"},"[AEPLog errorWithLabel: _ message:_]"),", the printed output looks like ",(0,i.mdx)("inlineCode",{parentName:"p"},"[AEP SDK ERROR <label>]: message"),"."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(traceWithLabel:message:)\npublic static func trace(label: String, _ message: String) \n\n@objc(debugWithLabel:message:)\npublic static func debug(label: String, _ message: String) \n\n@objc(warningWithLabel:message:)\npublic static func warning(label: String, _ message: String) \n\n@objc(errorWithLabel:message:)\npublic static func error(label: String, _ message: String) \n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[AEPLog traceWithLabel:@"testLabel" message:@"testMessage"];\n[AEPLog debugWithLabel:@"testLabel" message:@"testMessage"];\n[AEPLog warningWithLabel:@"testLabel" message:@"testMessage"];\n[AEPLog errorWithLabel:@"testLabel" message:@"testMessage"];\n')),(0,i.mdx)(d,{platform:"ios-acp",api:"log",repeat:"15",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"objective-c-9"},"Objective-C"),(0,i.mdx)("p",null,"The log messages from the Adobe Experience SDK are printed to the Apple System Log facility and use a common format that contains the tag ",(0,i.mdx)("inlineCode",{parentName:"p"},"AdobeExperienceSDK"),". For example, if logging an error message using ",(0,i.mdx)("inlineCode",{parentName:"p"},"ACPCore.log()"),", the printed output looks like ",(0,i.mdx)("inlineCode",{parentName:"p"},"[AdobeExperienceSDK ERROR <tag>]: message[AEP SDK ERROR - <testLabel>] Test message"),"."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) log: (ACPMobileLogLevel) logLevel tag: (nonnull NSString*) tag message: (nonnull NSString*) message;\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[ACPCore log: ACPMobileLogLevelDebug, tag:@"MyClassName", message:@"Provided data was nil"];\n')),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Output")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-text"},"[AdobeExperienceSDK DEBUG <MyClassName>]: Provided data was nil\n")),(0,i.mdx)("h4",{id:"swift-10"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"+ (void) log: (ACPMobileLogLevel) logLevel tag: (nonnull NSString*) tag message: (nonnull NSString*) message;\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},'ACPCore.log(ACPMobileLogLevel.debug, tag: "MyClassName", message: "Provided data was nil");\n')),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Output")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-text"},"[AdobeExperienceSDK DEBUG <MyClassName>]: Provided data was nil\n")),(0,i.mdx)(d,{platform:"react-native",api:"log",repeat:"6",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"javascript-2"},"JavaScript"),(0,i.mdx)("p",null,"The log messages from the Adobe Experience SDK are printed to the Log facility and use a common format that contains the tag ",(0,i.mdx)("inlineCode",{parentName:"p"},"ACPMobileLogLevel"),"."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPCore.log(ACPMobileLogLevel.ERROR, "React Native Tag", "React Native Message");\n')),(0,i.mdx)("p",null,"Note: ",(0,i.mdx)("inlineCode",{parentName:"p"},"ACPMobileLogLevel")," contains the following getters:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},'const ERROR = "ACP_LOG_LEVEL_ERROR";\nconst WARNING = "ACP_LOG_LEVEL_WARNING";\nconst DEBUG = "ACP_LOG_LEVEL_DEBUG";\nconst VERBOSE = "ACP_LOG_LEVEL_VERBOSE";\n')),(0,i.mdx)(d,{platform:"xamarin",api:"log",repeat:"8",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"c-3"},"C#"),(0,i.mdx)("p",null,"The log messages from the Adobe Experience SDK are printed to the Log facility and use a common format that contains the tag ",(0,i.mdx)("inlineCode",{parentName:"p"},"AdobeExperienceSDK"),"."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"iOS syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPCore.Log(ACPMobileLogLevel.Error, "xamarin tag", "xamarin message");\n')),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-text"},"[AdobeExperienceSDK ERROR <xamarin tag>]: xamarin message\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Android syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPCore.Log(LoggingMode.Error, "xamarin tag", "xamarin message");\n')),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-text"},"[AdobeExperienceSDK] xamarin tag - xamarin message\n")),(0,i.mdx)(d,{platform:"android",api:"register-extension",repeat:"4",mdxType:"Variant"}),(0,i.mdx)("p",null,"After you register the extensions, call the ",(0,i.mdx)("inlineCode",{parentName:"p"},"start")," API in Mobile Core to initialize the SDK as shown below. This step is required to boot up the SDK for event processing. The following code snippet is provided as a sample reference."),(0,i.mdx)("h4",{id:"java-5"},"Java"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'import com.adobe.marketing.mobile.AdobeCallback;\nimport com.adobe.marketing.mobile.Identity;\nimport com.adobe.marketing.mobile.InvalidInitException;\nimport com.adobe.marketing.mobile.Lifecycle;\nimport com.adobe.marketing.mobile.LoggingMode;\nimport com.adobe.marketing.mobile.MobileCore;\nimport com.adobe.marketing.mobile.Signal;\nimport com.adobe.marketing.mobile.UserProfile;\n...\nimport android.app.Application;\n...\npublic class MainApp extends Application {\n  ...\n  @Override\n  public void on Create(){\n    super.onCreate();\n    MobileCore.setApplication(this);\n        MobileCore.setLogLevel(LoggingMode.DEBUG);\n    ...\n    try {\n      UserProfile.registerExtension();\n            Identity.registerExtension();\n            Lifecycle.registerExtension();\n            Signal.registerExtension();\n            MobileCore.start(new AdobeCallback () {\n            @Override\n            public void call(Object o) {\n            MobileCore.configureWithAppID("<your_environment_id_from_Launch>");\n    }\n});\n    } catch (InvalidInitException e) {\n      ...\n    }\n  }\n}\n')),(0,i.mdx)(d,{platform:"ios-aep",api:"register-extension",repeat:"7",mdxType:"Variant"}),(0,i.mdx)("p",null,"For iOS Swift libraries, registration is changed to a single API call (as shown in the snippets below). Calling the ",(0,i.mdx)("inlineCode",{parentName:"p"},"MobileCore.start")," API is no longer required."),(0,i.mdx)("h4",{id:"swift-11"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},'// AppDelegate.swift\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    MobileCore.registerExtensions([Signal.self, Lifecycle.self, UserProfile.self, Edge.self, AEPEdgeIdentity.Identity.self, Consent.self, AEPIdentity.Identity.self, Analytics.self], {\n        MobileCore.configureWith(appId: "yourLaunchEnvironmentID")\n    })\n  ...\n}\n')),(0,i.mdx)("h4",{id:"objective-c-10"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},'// AppDelegate.m\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    [AEPMobileCore registerExtensions:@[AEPMobileSignal.class, AEPMobileLifecycle.class, AEPMobileUserProfile.class, AEPMobileEdge.class, AEPMobileEdgeIdentity.class, AEPMobileEdgeConsent.class, AEPMobileIdentity.class, AEPMobileAnalytics.class] completion:^{\n    [AEPMobileCore configureWithAppId: @"yourLaunchEnvironmentID"];\n  }];\n  ...\n}\n')),(0,i.mdx)(d,{platform:"ios-acp",api:"register-extension",repeat:"7",mdxType:"Variant"}),(0,i.mdx)("p",null,"The following snippet shows an example of how to add the initialization code. Note that this may need to be adjusted, depending on how your application is structured."),(0,i.mdx)("h4",{id:"objective-c-11"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},'#import "AppDelegate.h"\n#import "ACPCore.h"\n#import "ACPUserProfile.h"\n#import "ACPIdentity.h"\n#import "ACPLifecycle.h"\n#import "ACPSignal.h"\n...\n@implementation AppDelegate\n-(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  [ACPCore setLogLevel:ACPMobileLogLevelDebug];\n  [ACPCore configureWithAppId:@"<your_environment_id_from_Launch>"];\n    ...\n  [ACPUserProfile registerExtension];\n    [ACPIdentity registerExtension];\n    [ACPLifecycle registerExtension];\n    [ACPSignal registerExtension];\n    const UIApplicationState appState = application.applicationState;\n    [ACPCore start:^{\n      // only start lifecycle if the application is not in the background\n      if (appState != UIApplicationStateBackground) {\n        [ACPCore lifecycleStart:nil];\n      }\n    }];\n    ...\n  return YES;\n}\n\n@end\n')),(0,i.mdx)("h4",{id:"swift-12"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},'import ACPCore\nimport ACPUserProfile\n...\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n  var window: UIWindow?\n  func application(_application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool{\n    ACPCore.setLogLevel(.debug)\n        ACPCore.configure(withAppId: "<your_environment_id_from_Launch>")\n    ...\n    ACPUserProfile.registerExtension()\n        ACPIdentity.registerExtension()\n        ACPLifecycle.registerExtension()\n        ACPSignal.registerExtension()\n        ACPCore.start {\n        ACPCore.lifecycleStart(nil)\n        }\n    ...\n    return true\n  }\n}\n')),(0,i.mdx)(d,{platform:"react-native",api:"register-extension",repeat:"5",mdxType:"Variant"}),(0,i.mdx)("p",null,"For React Native apps, initialize the SDK using native code in your ",(0,i.mdx)("inlineCode",{parentName:"p"},"AppDelegate")," (iOS) and ",(0,i.mdx)("inlineCode",{parentName:"p"},"MainApplication")," (Android)."),(0,i.mdx)("h4",{id:"ios"},"iOS"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},'#import "ACPCore.h"\n#import "ACPUserProfile.h"\n#import "ACPIdentity.h"\n#import "ACPLifecycle.h"\n#import "ACPSignal.h"\n...\n@implementation AppDelegate\n-(BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    [ACPCore setLogLevel:ACPMobileLogLevelDebug];\n    [ACPCore configureWithAppId:@"<your_environment_id_from_Launch>"];\n    [ACPUserProfile registerExtension];\n    [ACPIdentity registerExtension];\n    [ACPLifecycle registerExtension];\n    [ACPSignal registerExtension];\n\n    const UIApplicationState appState = application.applicationState;\n    [ACPCore start:^{\n      // only start lifecycle if the application is not in the background\n      if (appState != UIApplicationStateBackground) {\n        [ACPCore lifecycleStart:nil];\n      }\n    }];\n    ...\n  return YES;\n}\n\n@end\n')),(0,i.mdx)("h4",{id:"android"},"Android"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'import com.adobe.marketing.mobile.AdobeCallback;\nimport com.adobe.marketing.mobile.Identity;\nimport com.adobe.marketing.mobile.InvalidInitException;\nimport com.adobe.marketing.mobile.Lifecycle;\nimport com.adobe.marketing.mobile.LoggingMode;\nimport com.adobe.marketing.mobile.MobileCore;\nimport com.adobe.marketing.mobile.Signal;\nimport com.adobe.marketing.mobile.UserProfile;\n...\nimport android.app.Application;\n...\npublic class MainApplication extends Application implements ReactApplication {\n  ...\n  @Override\n  public void on Create(){\n    super.onCreate();\n    ...\n    MobileCore.setApplication(this);\n    MobileCore.setLogLevel(LoggingMode.DEBUG);\n    MobileCore.setWrapperType(WrapperType.REACT_NATIVE);\n\n    try {\n      UserProfile.registerExtension();\n      Identity.registerExtension();\n      Lifecycle.registerExtension();\n      Signal.registerExtension();\n      MobileCore.start(new AdobeCallback () {\n          @Override\n          public void call(Object o) {\n            MobileCore.configureWithAppID("<your_environment_id_from_Launch>");\n         }\n      });\n    } catch (InvalidInitException e) {\n      ...\n    }\n  }\n}\n')),(0,i.mdx)(d,{platform:"flutter",api:"register-extension",repeat:"3",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"dart"},"Dart"),(0,i.mdx)("p",null,"For Flutter apps, initialize the SDK using native code in your ",(0,i.mdx)("inlineCode",{parentName:"p"},"AppDelegate")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"MainApplication")," in iOS and Android, respectively."),(0,i.mdx)("p",null,"The initialization code is located in the ",(0,i.mdx)("a",{parentName:"p",href:"https://github.com/adobe/flutter_acpcore"},"Flutter ACPCore Github README"),"."),(0,i.mdx)(d,{platform:"cordova",api:"register-extension",repeat:"5",mdxType:"Variant"}),(0,i.mdx)("p",null,"For Cordova apps, initialize the SDK using native code in your ",(0,i.mdx)("inlineCode",{parentName:"p"},"AppDelegate")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"MainApplication")," in iOS and Android, respectively."),(0,i.mdx)("h4",{id:"ios-1"},"iOS"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-dart"},'// Import the SDK\n#import "ACPCore.h"\n#import "ACPLifecycle.h"\n#import "ACPIdentity.h"\n#import "ACPSignal.h"\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {  \n  // make sure to set the wrapper type at the beginning of initialization\n  [ACPCore setWrapperType:ACPMobileWrapperTypeCordova];\n\n  //...\n  [ACPCore configureWithAppId:@"yourAppId"];\n  [ACPIdentity registerExtension];\n  [ACPLifecycle registerExtension];\n  [ACPSignal registerExtension];\n  // Register any additional extensions\n\n  [ACPCore start:nil];\n}\n')),(0,i.mdx)("h4",{id:"android-1"},"Android"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'// Import the SDK\nimport com.adobe.marketing.mobile.MobileCore;\nimport com.adobe.marketing.mobile.Identity;\nimport com.adobe.marketing.mobile.Lifecycle;\nimport com.adobe.marketing.mobile.Signal;\nimport com.adobe.marketing.mobile.WrapperType;\n\n@Override\npublic void onCreate() {\n  //...\n  MobileCore.setApplication(this);\n  MobileCore.configureWithAppID("yourAppId");\n\n  // make sure to set the wrapper type at the beginning of initialization\n  MobileCore.setWrapperType(WrapperType.CORDOVA);\n\n  try {\n    Identity.registerExtension();\n    Lifecycle.registerExtension();\n    Signal.registerExtension();\n\n    // Register any additional extensions\n  } catch (Exception e) {\n    // handle exception\n  }\n\n  MobileCore.start(null);\n}\n')),(0,i.mdx)(d,{platform:"unity",api:"register-extension",repeat:"3",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"c-4"},"C#"),(0,i.mdx)("p",null,"For Unity apps, initialize the SDK using the following code in the start function of the ",(0,i.mdx)("inlineCode",{parentName:"p"},"MainScript"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},'using com.adobe.marketing.mobile;\nusing using AOT;\n\npublic class MainScript : MonoBehaviour\n{\n    [MonoPInvokeCallback(typeof(AdobeStartCallback))]\n    public static void HandleStartAdobeCallback()\n    {   \n        ACPCore.ConfigureWithAppID("1423ae38-8385-8963-8693-28375403491d");\n    }\n\n    // Start is called before the first frame update\n    void Start()\n    {   \n        if (Application.platform == RuntimePlatform.Android) {\n            ACPCore.SetApplication();\n        }\n\n        ACPCore.SetLogLevel(ACPCore.ACPMobileLogLevel.VERBOSE);\n        ACPCore.SetWrapperType();\n        ACPIdentity.registerExtension();\n        ACPLifecycle.registerExtension();\n        ACPSignal.registerExtension();\n        ACPCore.Start(HandleStartAdobeCallback);\n    }\n}\n')),(0,i.mdx)(d,{platform:"xamarin",api:"register-extension",repeat:"6",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"c-5"},"C#"),(0,i.mdx)("p",null,"For Xamarin Forms applications, the SDK initialization differs, depending on the platform being targeted."),(0,i.mdx)("h4",{id:"ios-2"},"iOS"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},'using Com.Adobe.Marketing.Mobile;\n\n[Register("AppDelegate")]\npublic partial class AppDelegate : global::Xamarin.Forms.Platform.iOS.FormsApplicationDelegate\n{\n  //\n  // This method is invoked when the application has loaded and is ready to run. In this\n  // method you should instantiate the window, load the UI into it and then make the window\n  // visible.\n  //\n  // You have 17 seconds to return from this method, or iOS will terminate your application.\n  //\n  public override bool FinishedLaunching(UIApplication app, NSDictionary options)\n  {\n    global::Xamarin.Forms.Forms.Init();\n    LoadApplication(new App());\n\n    // set the wrapper type\n    ACPCore.SetWrapperType(ACPMobileWrapperType.Xamarin);\n\n    // set launch config\n    ACPCore.ConfigureWithAppID("your-app-id");\n\n    // register SDK extensions\n    ACPIdentity.RegisterExtension();\n    ACPLifecycle.RegisterExtension();\n    ACPSignal.RegisterExtension();\n\n    // start core\n    ACPCore.Start(null);\n  }\n')),(0,i.mdx)("h4",{id:"android-2"},"Android"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},'using Com.Adobe.Marketing.Mobile;\n\n[Activity(Label = "TestApp", Icon = "@mipmap/icon", Theme = "@style/MainTheme", MainLauncher = true, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation)]\npublic class MainActivity : global::Xamarin.Forms.Platform.Android.FormsAppCompatActivity\n{\n  protected override void OnCreate(Bundle savedInstanceState)\n  {\n    base.OnCreate(savedInstanceState);\n\n    global::Xamarin.Forms.Forms.Init(this, savedInstanceState);\n    LoadApplication(new App());\n\n    // set the wrapper type\n    ACPCore.SetWrapperType(WrapperType.Xamarin);\n\n    // register SDK extensions\n    ACPCore.Application = this.Application;\n    ACPIdentity.RegisterExtension();\n    ACPLifecycle.RegisterExtension();\n    ACPSignal.RegisterExtension();\n\n    // start core\n    ACPCore.Start(null);\n}\n')),(0,i.mdx)(d,{platform:"ios-acp",api:"register-url-handler",repeat:"5",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"objective-c-12"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) registerURLHandler: (nonnull BOOL (^) (NSString* __nullable url)) callback;\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[ACPCore registerURLHandler:^BOOL(NSString * _Nullable url) {\n    ...\n}];\n")),(0,i.mdx)(d,{platform:"android",api:"reset-identities",repeat:"6",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"java-6"},"Java"),(0,i.mdx)("p",null,"This method is only available in Mobile Core v.1.8.0 and above."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"void resetIdentities();\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"MobileCore.resetIdentities();\n")),(0,i.mdx)(d,{platform:"ios-aep",api:"reset-identities",repeat:"10",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"swift-13"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"static func resetIdentities()\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"MobileCore.resetIdentities()\n")),(0,i.mdx)("h4",{id:"objective-c-13"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},"@objc(resetIdentities)\nstatic func resetIdentities()\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[AEPMobileCore resetIdentities];\n")),(0,i.mdx)(d,{platform:"ios-aep",api:"set-app-group",repeat:"10",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"swift-14"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"public static func setAppGroup(_ group: String?)\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},'MobileCore.setAppGroup("appGroupId")\n')),(0,i.mdx)("h4",{id:"objective-c-14"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(setAppGroup:)\npublic static func setAppGroup(_ group: String?)\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[AEPMobileCore setAppGroup:@"app-group-id"];\n')),(0,i.mdx)(d,{platform:"ios-acp",api:"set-app-group",repeat:"10",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"swift-15"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"public static func setAppGroup(_ group: String?)\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},'ACPCore.setAppGroup("app-group-id")\n')),(0,i.mdx)("h4",{id:"objective-c-15"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objc"},"public static func setAppGroup(_ group: String?)\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objc"},'[ACPCore setAppGroup:@"app-group-id"];\n')),(0,i.mdx)(d,{platform:"xamarin",api:"set-app-group",repeat:"5",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"c-6"},"C#"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void SetAppGroup (string appGroup);\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPCore.SetAppGroup("app_group");\n')),(0,i.mdx)(d,{platform:"android",api:"set-application",repeat:"5",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"java-7"},"Java"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"public static void setApplication(final Application app)\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"public class CoreApp extends Application {\n\n   @Override\n   public void onCreate() {\n      super.onCreate();\n      MobileCore.setApplication(this);\n      MobileCore.start(null);\n   }\n}\n")),(0,i.mdx)(d,{platform:"xamarin",api:"set-application",repeat:"3",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"c-7"},"C#"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"public class MainActivity : global::Xamarin.Forms.Platform.Android.FormsAppCompatActivity\n{\n  protected override void OnCreate(Bundle savedInstanceState)\n  {\n    base.OnCreate(savedInstanceState);\n    ACPCore.Application = this.Application;\n    ACPCore.Start(null);\n  }\n}\n")),(0,i.mdx)(d,{platform:"android",api:"set-log-level",repeat:"5",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"java-8"},"Java"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"public static void setLogLevel(LoggingMode mode)\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"import com.adobe.marketing.mobile.LoggingMode;\nimport com.adobe.marketing.mobile.MobileCore;\n\nMobileCore.setLogLevel(LoggingMode.VERBOSE);\n")),(0,i.mdx)(d,{platform:"ios-aep",api:"set-log-level",repeat:"10",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"swift-16"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"}," public static func setLogLevel(_ level: LogLevel)\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"import AEPCore\nimport AEPServices\n\n  MobileCore.setLogLevel(.trace)\n")),(0,i.mdx)("h4",{id:"objective-c-16"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"}," @objc(setLogLevel:)\n public static func setLogLevel(_ level: LogLevel)\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},"@import AEPCore;\n@import AEPServices;\n\n [AEPMobileCore setLogLevel: AEPLogLevelTrace];\n")),(0,i.mdx)(d,{platform:"ios-acp",api:"set-log-level",repeat:"10",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"swift-17"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"(void) setLogLevel: (ACPMobileLogLevel) logLevel;\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"import ACPCore\n\nACPCore.setLogLevel(ACPMobileLogLevel.verbose);\n")),(0,i.mdx)("h4",{id:"objective-c-17"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objc"},"(void) setLogLevel: (ACPMobileLogLevel) logLevel;\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objc"},'#import "ACPCore.h"\n\n[ACPCore setLogLevel: ACPMobileLogLevelVerbose];\n')),(0,i.mdx)(d,{platform:"react-native",api:"set-log-level",repeat:"5",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"javascript-3"},"Javascript"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},"(void) setLogLevel: (ACPMobileLogLevel) logLevel;\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},"import {ACPMobileLogLevel} from '@adobe/react-native-acpcore';\nACPCore.setLogLevel(ACPMobileLogLevel.VERBOSE);\n")),(0,i.mdx)(d,{platform:"flutter",api:"set-log-level",repeat:"5",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"dart-1"},"Dart"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-dart"},"(void) setLogLevel: (ACPMobileLogLevel) logLevel;\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter_acpcore/src/acpmobile_logging_level.dart';\nFlutterACPCore.setLogLevel(ACPLoggingLevel.VERBOSE);\n")),(0,i.mdx)(d,{platform:"cordova",api:"set-log-level",repeat:"7",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"cordova"},"Cordova"),(0,i.mdx)("p",null,"From least to most verbose, the order of Mobile SDK logging modes is as follows:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"ACPCore.ACPMobileLogLevelError"),(0,i.mdx)("li",{parentName:"ul"},"ACPCore.ACPMobileLogLevelWarning"),(0,i.mdx)("li",{parentName:"ul"},"ACPCore.ACPMobileLogLevelDebug"),(0,i.mdx)("li",{parentName:"ul"},"ACPCore.ACPMobileLogLevelVerbose")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},"ACPCore.setLogLevel = function(logLevel, success, fail);\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},"ACPCore.setLogLevel(ACPCore.ACPMobileLogLevelVerbose, successCallback, errorCallback);\n MobileCore.setSmallIconResourceID(R.mipmap.ic_launcher_round);\n")),(0,i.mdx)(d,{platform:"unity",api:"set-log-level",repeat:"7",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"c-8"},"C#"),(0,i.mdx)("p",null,"From least to most verbose, the order of Mobile SDK logging modes is as follows:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"ACPCore.ACPMobileLogLevel.ERROR"),(0,i.mdx)("li",{parentName:"ul"},"ACPCore.ACPMobileLogLevel.WARNING"),(0,i.mdx)("li",{parentName:"ul"},"ACPCore.ACPMobileLogLevel.DEBUG"),(0,i.mdx)("li",{parentName:"ul"},"ACPCore.ACPMobileLogLevel.VERBOSE")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void SetLogLevel(ACPMobileLogLevel logLevel)\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"ACPCore.SetLogLevel(ACPCore.ACPMobileLogLevel.ERROR);\n")),(0,i.mdx)(d,{platform:"xamarin",api:"set-log-level",repeat:"13",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"c-9"},"C#"),(0,i.mdx)("p",null,"From least to most verbose, the order of Mobile SDK logging modes is as follows for iOS:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"ACPMobileLogLevel.Error;"),(0,i.mdx)("li",{parentName:"ul"},"ACPMobileLogLevel.Warning;"),(0,i.mdx)("li",{parentName:"ul"},"ACPMobileLogLevel.Debug;"),(0,i.mdx)("li",{parentName:"ul"},"ACPMobileLogLevel.Verbose;")),(0,i.mdx)("p",null,"From least to most verbose, the order of Mobile SDK logging modes is as follows for Android:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},"LoggingMode.Error;"),(0,i.mdx)("li",{parentName:"ul"},"LoggingMode.Warning;"),(0,i.mdx)("li",{parentName:"ul"},"LoggingMode.Debug;"),(0,i.mdx)("li",{parentName:"ul"},"LoggingMode.Verbose;")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"iOS syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static ACPMobileLogLevel LogLevel { get, set }\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Android syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static LoggingMode LogLevel { get, set }\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"iOS example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"ACPCore.LogLevel = ACPMobileLogLevel.Verbose;\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Android example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"ACPCore.LogLevel = LoggingMode.Verbose;\n")),(0,i.mdx)(d,{platform:"android",api:"set-push-identifier",repeat:"6",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"java-9"},"Java"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"public static void setPushIdentifier(final String pushIdentifier);\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"pushIdentifier"),"  is a string that contains the device token for push notifications.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"//Retrieve the token from either GCM or FCM, and pass it to the SDK\nMobileCore.setPushIdentifier(token);\n")),(0,i.mdx)(d,{platform:"ios-aep",api:"set-push-identifier",repeat:"10",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"swift-18"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"public static func setPushIdentifier(_ deviceToken: Data?)\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"MobileCore.setPushIdentifier(deviceToken)\n")),(0,i.mdx)("h4",{id:"objective-c-18"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objc"}," @objc(setPushIdentifier:)\n public static func setPushIdentifier(_ deviceToken: Data?)\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"}," [AEPMobileCore setPushIdentifier:deviceToken];\n")),(0,i.mdx)(d,{platform:"ios-acp",api:"set-push-identifier",repeat:"12",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"swift-19"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(setPushIdentifier:)\npublic static func setPushIdentifier(_ deviceToken: Data?)\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"deviceToken"),"  is a string that contains the device token for push notifications.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"// Set the deviceToken that the APNs has assigned to the device\nMobileCore.setPushIdentifier(deviceToken)\n")),(0,i.mdx)("h4",{id:"objective-c-19"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objc"},"public static func setPushIdentifier(_ deviceToken: Data?)\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"deviceToken"),"  is a string that contains the device token for push notifications.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},"// Set the deviceToken that the APNS has assigned to the device\n[ACPCore setPushIdentifier:deviceToken];\n")),(0,i.mdx)(d,{platform:"android",api:"set-icon-resource-id",repeat:"11",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"java-10"},"Java"),(0,i.mdx)("h4",{id:"setsmalliconresourceid"},"setSmallIconResourceID"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"public static void setSmallIconResourceID(int resourceID)\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"}," MobileCore.setSmallIconResourceID(R.mipmap.ic_launcher_round);\n")),(0,i.mdx)("h4",{id:"setlargeiconresourceid"},"setLargeIconResourceID"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"public static void setLargeIconResourceID(int resourceID)\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"}," MobileCore.setLargeIconResourceID(R.mipmap.ic_launcher_round);\n")),(0,i.mdx)(d,{platform:"xamarin",api:"set-icon-resource-id",repeat:"11",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"c-10"},"C#"),(0,i.mdx)("h4",{id:"setsmalliconresourceid-1"},"setSmallIconResourceID"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void SetSmallIconResourceID (int resourceID);\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"ACPCore.SetSmallIconResourceID(Resource.Mipmap.icon_round);\n")),(0,i.mdx)("h4",{id:"setlargeiconresourceid-1"},"setLargeIconResourceID"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void SetLargeIconResourceID (int resourceID);\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"}," ACPCore.SetLargeIconResourceID(Resource.Mipmap.icon_round);\n")),(0,i.mdx)(d,{platform:"android",api:"track-action",repeat:"6",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"java-11"},"Java"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"public static void trackAction(final String action, final Map<String, String> contextData)\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"action")," contains the name of the action to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on the hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'Map<String, String> additionalContextData = new HashMap<String, String>();\nadditionalContextData.put("customKey", "value");\nMobileCore.trackAction("loginClicked", additionalContextData);\n')),(0,i.mdx)(d,{platform:"ios-aep",api:"track-action",repeat:"12",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"swift-20"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"}," static func track(action: String?, data: [String: Any]?)\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"action")," contains the name of the action to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on this hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},' MobileCore.track(action: "action name", data: ["key": "value"])\n')),(0,i.mdx)("h4",{id:"objective-c-20"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objc"}," @objc(trackAction:data:)\n static func track(action: String?, data: [String: Any]?)\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"action")," contains the name of the action to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on this hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},'  [AEPMobileCore trackAction:@"action name" data:@{@"key":@"value"}];\n')),(0,i.mdx)(d,{platform:"ios-acp",api:"track-action",repeat:"12",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"swift-21"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(trackAction:data:)\nstatic func track(action: String?, data: [String: Any]?)\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"action")," contains the name of the action to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on the hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},'ACPCore.track(action: "action name", data: ["key": "value"])\n')),(0,i.mdx)("h4",{id:"objective-c-21"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objc"},"+ (void) trackAction: (nullable NSString*) action data: (nullable NSDictionary*) contextData;\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"action")," contains the name of the action to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on the hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objc"},' [ACPCore trackAction:@"action name" data:@{@"key":@"value"}];\n')),(0,i.mdx)(d,{platform:"react-native",api:"track-action",repeat:"6",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"javascript-4"},"Javascript"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},"trackAction(action?: String, contextData?: { string: string });\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"action")," contains the name of the action to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on the hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPCore.trackAction("action name", {"key": "value"});\n')),(0,i.mdx)(d,{platform:"flutter",api:"track-action",repeat:"6",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"dart-2"},"Dart"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-dart"},"Future<void> trackAction (String action, {Map<String, String> contextData});\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"action")," contains the name of the action to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on the hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-dart"},'FlutterACPCore.trackAction("action name",  data: {"key": "value"});\n')),(0,i.mdx)(d,{platform:"cordova",api:"track-action",repeat:"6",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"cordova-1"},"Cordova"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},"ACPCore.trackAction = function(action, contextData, success, fail);\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"action")," contains the name of the action to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on this hit."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"success")," callback is invoked when trackAction executes successfully."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"fail")," callback is invoked when trackAction fails.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPCore.trackAction("cordovaAction", {"cordovaKey":"cordovaValue"}, successCallback, errorCallback);\n')),(0,i.mdx)(d,{platform:"unity",api:"track-action",repeat:"6",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"c-11"},"C#"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void TrackAction(string name, Dictionary<string, string> contextDataDict)\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"name")," contains the name of the action to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextDataDict")," contains the context data to attach on the hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},'var contextData = new Dictionary<string, string>();\ncontextData.Add("key", "value");\nACPCore.TrackAction("action", contextData);\n')),(0,i.mdx)(d,{platform:"xamarin",api:"track-action",repeat:"11",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"c-12"},"C#"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"iOS syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void TrackAction (string action, NSMutableDictionary<NSString, NSString> data);\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"action")," contains the name of the action to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"data")," contains the context data to attach on the hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Android syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void TrackAction (string action, IDictionary<string, string> contextData);\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"action")," contains the name of the action to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on the hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"iOS example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},'var data = new NSMutableDictionary<NSString, NSString>\n{\n  ["key"] = new NSString("value")\n};\nACPCore.TrackAction("action", data);\n')),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Android example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},'var data = new Dictionary<string, string>();\ndata.Add("key", "value");\nACPCore.TrackAction("action", data);\n')),(0,i.mdx)(d,{platform:"android",api:"track-state",repeat:"7",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"java-12"},"Java"),(0,i.mdx)("p",null,"In Android, ",(0,i.mdx)("inlineCode",{parentName:"p"},"trackState")," is typically called every time a new ",(0,i.mdx)("inlineCode",{parentName:"p"},"Activity")," is loaded."),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"public static void trackState(final String state, final Map<String, String> contextData)\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"state")," contains the name of the state to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on the hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'Map<String, String> additionalContextData = new HashMap<String, String>();        \nadditionalContextData.put("customKey", "value");\nMobileCore.trackState("homePage", additionalContextData);\n')),(0,i.mdx)(d,{platform:"ios-aep",api:"track-state",repeat:"12",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"swift-22"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"}," static func track(state: String?, data: [String: Any]?)\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"state")," contains the name of the state to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on this hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},' MobileCore.track(state: "state name", data: ["key": "value"])\n')),(0,i.mdx)("h4",{id:"objective-c-22"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objc"}," @objc(trackState:data:)\n static func track(state: String?, data: [String: Any]?)\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"state")," contains the name of the state to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on this hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},'  [AEPMobileCore trackState:@"state name" data:@{@"key":@"value"}];\n')),(0,i.mdx)(d,{platform:"ios-acp",api:"track-state",repeat:"12",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"swift-23"},"Swift"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"+ (void) trackState: (nullable NSString*) state data: (nullable NSDictionary*) contextData;\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"state")," contains the name of the state to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on the hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},'ACPCore.trackState("state name", data: ["key": "value"])\n')),(0,i.mdx)("h4",{id:"objective-c-23"},"Objective-C"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},"(void) trackState: (nullable NSString*) state data: (nullable NSDictionary*) contextData;\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"state")," contains the name of the state to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on the hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},' [ACPCore trackState:@"state name" data:@{@"key":@"value"}];\n')),(0,i.mdx)(d,{platform:"react-native",api:"track-state",repeat:"6",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"javascript-5"},"Javascript"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},"trackState(state?: String, contextData?: { string: string });\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"state")," contains the name of the state to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on the hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPCore.trackState("state name", {"key": "value"});\n')),(0,i.mdx)(d,{platform:"flutter",api:"track-state",repeat:"6",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"dart-3"},"Dart"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-dart"},"Future<void> trackState (String state, {Map<String, String> contextData});\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"state")," contains the name of the state to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on the hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-dart"},'FlutterACPCore.trackState("state name",  data: {"key1: "value"})\n')),(0,i.mdx)(d,{platform:"cordova",api:"track-state",repeat:"6",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"cordova-2"},"Cordova"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},"ACPCore.trackState = function(state, contextData, success, fail);\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"state")," contains the name of the state to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on the hit."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"success")," callback is invoked when trackState executes successfully."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"fail")," callback is invoked when trackState fails.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPCore.trackState("cordovaState", {"cordovaKey":"cordovaValue"}, successCallback, errorCallback);\n')),(0,i.mdx)(d,{platform:"unity",api:"track-state",repeat:"6",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"c-13"},"C#"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void TrackState(string name, Dictionary<string, string> contextDataDict)\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"state")," contains the name of the state to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextDataDict")," contains the context data to attach on the hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},'var dict = new Dictionary<string, string>();\ndict.Add("key", "value");\nACPCore.TrackState("state", dict);\n')),(0,i.mdx)(d,{platform:"xamarin",api:"track-state",repeat:"11",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"c-14"},"C#"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"iOS syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void TrackState (string state, NSMutableDictionary<NSString, NSString> data);\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"state")," contains the name of the state to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on the hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Android syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void TrackState (string state, IDictionary<string, string> contextData);\n")),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"state")," contains the name of the state to track."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("em",{parentName:"li"},"contextData")," contains the context data to attach on the hit.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"iOS example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},'var data = new NSMutableDictionary<NSString, NSString>\n{\n  ["key"] = new NSString("value")\n};\nACPCore.TrackState("state", data);\n')),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Android example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},'var data = new Dictionary<string, string>();\ndata.Add("key", "value");\nACPCore.TrackState("state", data);\n')),(0,i.mdx)(d,{platform:"android",api:"public-classes",repeat:"13",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"java-13"},"Java"),(0,i.mdx)("h4",{id:"adobecallback"},"AdobeCallback"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"AdobeCallback")," class provides the interface to receive results when the asynchronous APIs perform the requested action."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"public interface AdobeCallback<T> {    \n    void call(final T value);\n}\n")),(0,i.mdx)("h4",{id:"adobecallbackwitherror"},"AdobeCallbackWithError"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"AdobeCallbackWithError")," class provides the interface to receive results or an error when the asynchronous APIs perform the requested action."),(0,i.mdx)("p",null,"When using this class, if the request cannot be completed within the default timeout or an unexpected error occurs, the request is stopped and the fail method is called with the corresponding ",(0,i.mdx)("inlineCode",{parentName:"p"},"AdobeError"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"public interface AdobeCallbackWithError<T> extends AdobeCallback<T> {\n    void fail(final AdobeError error);\n}\n")),(0,i.mdx)("h4",{id:"adobeerror"},"AdobeError"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"AdobeError")," class shows the errors that can be passed to an ",(0,i.mdx)("inlineCode",{parentName:"p"},"AdobeCallbackWithError"),":"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"UNEXPECTED_ERROR")," - An unexpected error occurred."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"CALLBACK_TIMEOUT")," - The timeout was met."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"CALLBACK_NULL")," - The provided callback function is null."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"EXTENSION_NOT_INITIALIZED")," - The extension is not initialized.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"MobileCore.getPrivacyStatus(new AdobeCallbackWithError<MobilePrivacyStatus>() {\n  @Override\n  public void fail(final AdobeError error) {\n    if (error == AdobeError.UNEXPECTED_ERROR) {\n      // handle unexpected error\n    } else if (error == AdobeError.CALLBACK_TIMEOUT) {\n      // handle timeout error\n    } else if (error == AdobeError.CALLBACK_NULL) {\n      // handle null callback error\n    } else if (error == AdobeError.EXTENSION_NOT_INITIALIZED) {\n      // handle extension not initialized error\n    }\n  }\n\n  @Override\n  public void call(final MobilePrivacyStatus value) {\n    // use MobilePrivacyStatus value\n  }\n});\n")),(0,i.mdx)(d,{platform:"ios-aep",api:"public-classes",repeat:"8",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"aeperror"},"AEPError"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"AEPError")," enum shows the errors that can be passed to a completion handler callback from any API which uses one:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"case unexpected")," - An unexpected error occured."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"case callbackTimeout")," - The timeout was met."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"case callbackNil")," -  The provided callback function is nil."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"case none")," -  There was no error, used when an error return type is required but there was no error."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"case serverError")," - There was a server error."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"case networkError")," - There was a network error."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"case invalidRequest")," - There was an invalid request."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"case invalidResponse")," - There was an invalid response."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"case errorExtensionNotInitialized")," - The extension is not initialized.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Swift")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"MobileCore.getSdkIdentities { (content, error) in\n    if let error = error, let aepError = error as? AEPError {\n        switch aepError {\n        case .unexpected:\n          // Handle unexpected error\n        case .callbackTimeout:\n          // Handle callback timeout error\n        case .callbackNil:\n          // Handle callback being nil error\n        case .none:\n          // no error\n        case .serverError:\n          // handle server error\n        case .networkError:\n          // handle network error\n        case .invalidRequest:\n          // handle invalid request error\n        case .invalidResponse:\n          // handle invalid response error\n        case .errorExtensionNotInitialized:\n          // handle extension not initialized error\n        @unknown default:\n          // handle unknown error\n        }\n    }\n    ...\n}\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Objective-C")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[AEPMobileCore getSdkIdentities:^(NSString * _Nullable content, NSError * _Nullable error) {\n    if (error) {\n        if (error.code == AEPErrorUnexpected) {\n          // Handle unexpected error\n        } else if (error.code == AEPErrorCallbackTimeout) {\n          // Handle callback timeout error\n        } else if (error.code == AEPErrorCallbackNil) {\n          // Handle callback being nil error\n        } else if (error.code == AEPErrorNone) {\n          // no error     \n        } else if (error.code == AEPErrorServerError) {\n          // handle server error\n        } else if (error.code == AEPErrorNetworkError) {\n          // handle network error \n        } else if (error.code == AEPErrorInvalidRequest) {\n          // handle invalid request error\n        } else if (error.code == AEPErrorInvalidResponse) {\n          // handle invalid response error  \n        } else if (error.code == AEPErrorErrorExtensionNotInitialized) {\n          // handle extension not intialized error  \n        }\n    }\n\n    ...\n}];\n")),(0,i.mdx)(d,{platform:"ios-acp",api:"public-classes",repeat:"8",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"acperror"},"ACPError"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"ACPError")," class shows the errors that can be passed to a completion handler callback from any API which uses one:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"ACPErrorUnexpected")," - An unexpected error occurred."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"ACPErrorCallbackTimeout")," - The timeout was met."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"ACPErrorCallbackNil")," - The provided callback function is nil."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"ACPErrorExtensionNotInitialized")," - The extension is not initialized.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Objective-C")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-objc"},"[ACPCore getSdkIdentities:^(NSString * _Nullable content, NSError * _Nullable error) {\n  if (error) {\n    if (error.code == ACPErrorCallbackTimeout) {\n      // handle timeout error\n    } else if (error.code == ACPErrorCallbackNil) {\n      // handle nil callback error\n    } else if (error.code == ACPErrorExtensionNotInitialized) {\n      // handle extension not initialized error\n    } else if (error.code == ACPErrorUnexpected) {\n      // handle unexpected error\n\n    ....\n\n  } else {\n    // use privacy status\n  }\n}];\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Swift")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-swift"},"ACPCore.getPrivacyStatus { (privacyStatus, error) in\n  if let error = error {\n    let callbackError: NSError = (error as NSError)\n    if (callbackError.code == ACPError.callbackTimeout.rawValue) {\n      // handle timeout error\n    } else if (callbackError.code == ACPError.callbackNil.rawValue) {\n      // handle nil callback error\n    } else if (callbackError.code == ACPError.extensionNotInitialized.rawValue) {\n      // handle extension not initialized error\n    } else if (callbackError.code == ACPError.unexpected.rawValue) {\n      // handle unexpected error\n    }\n  } else {\n    // use privacyStatus\n  }\n}\n")),(0,i.mdx)(d,{platform:"xamarin",api:"public-classes",repeat:"18",mdxType:"Variant"}),(0,i.mdx)("h4",{id:"android-3"},"Android"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"IAdobeCallback")),(0,i.mdx)("p",null,"This class provides the interface to receive results when the async APIs perform the requested action."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"public interface IAdobeCallback : IJavaObject, IDisposable, IJavaPeerable\n{\n    void Call (Java.Lang.Object p0);\n}\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"IAdobeCallbackWithError")),(0,i.mdx)("p",null,"This class provides the interface to receive results or an error when the async APIs perform the requested action. When using this class, if the request cannot be completed within the default timeout or an unexpected error occurs, the request is aborted and the ",(0,i.mdx)("em",{parentName:"p"},"fail")," method is called with the corresponding ",(0,i.mdx)("em",{parentName:"p"},"AdobeError"),"."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},"public interface IAdobeCallbackWithError : IAdobeCallback, IJavaObject, IDisposable, IJavaPeerable\n{\n    void Fail (AdobeError p0);\n}\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"AdobeError")),(0,i.mdx)("p",null,"Errors which may be passed to an AdobeCallbackWithError:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"UnexpectedError")," - An unexpected error occurred."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"CallbackTimeout")," - The timeout was met."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"CallbackNull")," - The provided callback function is null."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"ExtensionNotInitialized")," - The extension is not initialized.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPCore.GetPrivacyStatus(new AdobeCallbackWithError());\nclass AdobeCallbackWithError : Java.Lang.Object, IAdobeCallbackWithError\n{\n  public void Call(Java.Lang.Object stringContent)\n  {\n    if (stringContent != null)\n    {\n      Console.WriteLine("String callback content: " + stringContent);\n    }\n    else\n    {\n      Console.WriteLine("null content in string callback");\n    }\n  }\n  public void Fail(AdobeError error)\n  {\n    if (error == AdobeError.UnexpectedError)\n    {\n      // handle unexpected error\n    }\n    else if (error == AdobeError.CallbackTimeout)\n    {\n      // handle timeout error\n    }\n    else if (error == AdobeError.CallbackNull)\n    {\n      // handle null callback error\n    }\n    else if (error == AdobeError.ExtensionNotInitialized)\n    {\n        // handle extension not initialized error\n    }\n')),(0,i.mdx)("h4",{id:"ios-3"},"iOS"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"ACPError")),(0,i.mdx)("p",null,"Errors which may be passed to a completion handler callback from any API which uses one:"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"ACPError.Unexpected")," - An unexpected error occurred."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"ACPError.CallbackTimeout")," - The timeout was met."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"ACPError.CallbackNil")," - The provided callback function is nil."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"ACPError.ExtensionNotInitialized")," - The extension is not initialized.")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPCore.GetPrivacyStatusWithCompletionHandler((privacyStatus, error) => {\n  if (error != null)\n  {\n    if ( error.Code == (int)ACPError.CallbackTimeout)\n    {\n      // handle timeout error\n    }\n    else if (error.Code == (int)ACPError.CallbackNil) \n    {\n      // handle nil callback error\n    }\n    else if (error.Code == (int)ACPError.ExtensionNotInitialized)\n    {\n      // handle extension not initialized error\n    }\n    else if (error.Code == (int)ACPError.Unexpected)\n    {\n      // handle unexpected error\n    }\n  }\n  else\n  {\n    Console.WriteLine("privacy status: " + privacyStatus);\n  }\n});\n')))}x.isMDXComponent=!0}}]);
//# sourceMappingURL=2962f18e9c7b1f5907e6410eb4ce2048c6804f8b-46fd5dbdd440d57198c8.js.map