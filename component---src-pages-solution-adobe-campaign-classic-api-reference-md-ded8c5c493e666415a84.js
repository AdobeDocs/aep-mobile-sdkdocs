"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[5632,5078],{72722:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return m},default:function(){return f}});var i=a(87462),t=a(63366),o=(a(15007),a(64983)),r=a(91515),s=a(47968),d=a(2887),l=["components"],m={},p=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",n)}},c=p("TabsBlock"),u=p("InlineAlert"),x={_frontmatter:m},g=r.Z;function f(e){var n=e.components,a=(0,t.Z)(e,l);return(0,o.mdx)(g,(0,i.Z)({},x,a,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"adobe-campaign-classic-api-reference"},"Adobe Campaign Classic API reference"),(0,o.mdx)("h2",{id:"extensionversion"},"extensionVersion"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"extensionVersion")," API returns the version of the Campaign Classic extension that is registered with the Mobile Core extension."),(0,o.mdx)(c,{orientation:"horizontal",slots:"heading, content",repeat:"2",mdxType:"TabsBlock"}),(0,o.mdx)("p",null,"Android"),(0,o.mdx)(d.default,{query:"platform=android&api=extension-version",mdxType:"Tabs"}),(0,o.mdx)("p",null,"iOS"),(0,o.mdx)(d.default,{query:"platform=ios&api=extension-version",mdxType:"Tabs"}),(0,o.mdx)("h2",{id:"registerdevice"},"registerDevice"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"registerDevice")," API lets you register a user device with Campaign Classic."),(0,o.mdx)(c,{orientation:"horizontal",slots:"heading, content",repeat:"2",mdxType:"TabsBlock"}),(0,o.mdx)("p",null,"Android"),(0,o.mdx)(d.default,{query:"platform=android&api=register-device",mdxType:"Tabs"}),(0,o.mdx)("p",null,"iOS"),(0,o.mdx)(d.default,{query:"platform=ios&api=register-device",mdxType:"Tabs"}),(0,o.mdx)("h2",{id:"registerextension"},"registerExtension"),(0,o.mdx)(s.default,{query:"platform=android-register-extension&componentClass=InlineNestedAlert",mdxType:"Alerts"}),(0,o.mdx)(c,{orientation:"horizontal",slots:"heading, content",repeat:"1",mdxType:"TabsBlock"}),(0,o.mdx)("p",null,"Android"),(0,o.mdx)(d.default,{query:"platform=android&api=register-extension",mdxType:"Tabs"}),(0,o.mdx)("h2",{id:"tracknotificationreceive"},"trackNotificationReceive"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"trackNotificationReceive")," API sends the received push notification's tracking information to the configured Adobe Campaign Classic server."),(0,o.mdx)(u,{variant:"success",slots:"text",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"If you are using the ",(0,o.mdx)("inlineCode",{parentName:"p"},"AEPMessagingService.handleRemoteMessage")," API, you should not call ",(0,o.mdx)("inlineCode",{parentName:"p"},"CampaignClassic.trackNotificationReceive")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"CampaignClassic.trackNotificationClick"),"."),(0,o.mdx)(c,{orientation:"horizontal",slots:"heading, content",repeat:"2",mdxType:"TabsBlock"}),(0,o.mdx)("p",null,"Android"),(0,o.mdx)(d.default,{query:"platform=android&api=track-notification-receive",mdxType:"Tabs"}),(0,o.mdx)("p",null,"iOS"),(0,o.mdx)(d.default,{query:"platform=ios&api=track-notification-receive",mdxType:"Tabs"}),(0,o.mdx)("h2",{id:"tracknotificationclick"},"trackNotificationClick"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"trackNotificationClick")," API sends the clicked push notification's tracking information to the configured Adobe Campaign Classic server. This API can be used to send tracking information when the notification is clicked, which may result in the application being opened."),(0,o.mdx)(u,{variant:"success",slots:"text",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"If you are using the ",(0,o.mdx)("inlineCode",{parentName:"p"},"AEPMessagingService.handleRemoteMessage")," API, you should not call ",(0,o.mdx)("inlineCode",{parentName:"p"},"CampaignClassic.trackNotificationReceive")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"CampaignClassic.trackNotificationClick"),"."),(0,o.mdx)(c,{orientation:"horizontal",slots:"heading, content",repeat:"2",mdxType:"TabsBlock"}),(0,o.mdx)("p",null,"Android"),(0,o.mdx)(d.default,{query:"platform=android&api=track-notification-click",mdxType:"Tabs"}),(0,o.mdx)("p",null,"iOS"),(0,o.mdx)(d.default,{query:"platform=ios&api=track-notification-click",mdxType:"Tabs"}),(0,o.mdx)("h2",{id:"other-public-classes"},"Other public classes"),(0,o.mdx)(u,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"Push template functionality and the following public classes are only available in Adobe Campaign Classic Android SDK version from 2.1.0 through the next major version release."),(0,o.mdx)("h3",{id:"aepmessagingservice"},"AEPMessagingService"),(0,o.mdx)("h4",{id:"handleremotemessage"},"handleRemoteMessage"),(0,o.mdx)("p",null,"Allows the Adobe Campaign Classic extension to automatically create and dispatch a ",(0,o.mdx)("inlineCode",{parentName:"p"},"Notification")," based on the template included in the provided ",(0,o.mdx)("inlineCode",{parentName:"p"},"RemoteMessage")," object."),(0,o.mdx)(u,{variant:"success",slots:"text",mdxType:"InlineAlert"}),(0,o.mdx)("p",null,"If you are using the ",(0,o.mdx)("inlineCode",{parentName:"p"},"AEPMessagingService.handleRemoteMessage")," API, you should not call ",(0,o.mdx)("inlineCode",{parentName:"p"},"CampaignClassic.trackNotificationReceive")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"CampaignClassic.trackNotificationClick"),"."),(0,o.mdx)(c,{orientation:"horizontal",slots:"heading, content",repeat:"1",mdxType:"TabsBlock"}),(0,o.mdx)("p",null,"Android"),(0,o.mdx)(d.default,{query:"platform=android&api=handle-remote-message",mdxType:"Tabs"}),(0,o.mdx)("h3",{id:"aeppushtemplatebroadcastreceiver"},"AEPPushTemplateBroadcastReceiver"),(0,o.mdx)("p",null,"This class is required to be public, but has no APIs that need to be called by the app developer."),(0,o.mdx)("h3",{id:"campaignpushtrackeractivity"},"CampaignPushTrackerActivity"),(0,o.mdx)("p",null,"This class is required to be public, but has no APIs that need to be called by the app developer."))}f.isMDXComponent=!0},2887:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return l},default:function(){return u}});var i,t=a(87462),o=a(63366),r=(a(15007),a(64983)),s=a(91515),d=["components"],l={},m=(i="Variant",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",e)}),p={_frontmatter:l},c=s.Z;function u(e){var n=e.components,a=(0,o.Z)(e,d);return(0,r.mdx)(c,(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)(m,{platform:"android",api:"extension-version",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"@NonNull \npublic static String extensionVersion();\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"String campaignClassicExtensionVersion = CampaignClassic.extensionVersion();\n")),(0,r.mdx)(m,{platform:"ios",api:"extension-version",repeat:"10",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static var extensionVersion: String\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"let campaignClassicVersion = CampaignClassic.extensionVersion\n")),(0,r.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objective-c"},"+ (nonnull NSString *)extensionVersion\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objective-c"},"NSString *campaignClassicVersion = [AEPMobileCampaignClassic extensionVersion];\n")),(0,r.mdx)(m,{platform:"android",api:"register-device",repeat:"7",mdxType:"Variant"}),(0,r.mdx)("p",null,"To prepare your app to handle push notifications, see the tutorial on ",(0,r.mdx)("a",{parentName:"p",href:"https://firebase.google.com/docs/cloud-messaging/android/client"},"setting up a Firebase Cloud Messaging client app on Android"),". After you receive the Firebase Cloud Messaging (FCM) SDK registration token, send this token and the device information to Campaign Classic by using the ",(0,r.mdx)("inlineCode",{parentName:"p"},"registerDevice")," API."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"registerDevice")," API registers a device with your Campaign Classic registration server. It takes the FCM registration token as a parameter with a user key that identifies a user, such as an email address or a login name. You can also provide a map of the custom key-value pairs that you want to associate with the registration."),(0,r.mdx)("h4",{id:"java-1"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void registerDevice(@NonNull final String token, final String userKey, final Map<String, Object> additionalParams)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'@Override\npublic void onNewToken(String token) {\n    Log.d("TestApp", "Refreshed token: " + token);\n\n    // If you want to send messages to this application instance or\n    // manage this app\'s subscriptions on the server side, send the\n    // Instance ID token to your app server.\n    if (token != null) {\n        Log.d("TestApp", "FCM SDK registration token received : " + token);\n        \n        // Create a map of additional parameters\n        Map<String, Object> additionalParams = new HashMap<String, Object>();\n        additionalParams.put("name", "John");\n        additionalParams.put("serial", 12345);\n        additionalParams.put("premium", true);\n    \n        // Send the registration info\n        CampaignClassic.registerDevice(token, "john@example.com", additionalParams);\n    }\n}\n')),(0,r.mdx)(m,{platform:"ios",api:"register-device",repeat:"12",mdxType:"Variant"}),(0,r.mdx)("p",null,"To get your app ready to handle push notifications, see the tutorial on ",(0,r.mdx)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/HandlingRemoteNotifications.html#//apple_ref/doc/uid/TP40008194-CH6-SW1"},"configuring remote notification support"),". After you receive the Apple Push Notification service (APNs) token, send this token and the device information to Campaign Classic using the ",(0,r.mdx)("inlineCode",{parentName:"p"},"registerDevice")," API."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"registerDevice")," API registers a device with your Campaign Classic registration server. It takes the APNS token as a parameter with a user key that identifies a user, such as an email address or a login name. You can also provide a map of the custom key-value pairs that you want to associate with the registration."),(0,r.mdx)("h4",{id:"swift-1"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static func registerDevice(token: Data, userKey: String?, additionalParameters: [String: Any]?)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    let params: [String: Any] = [\n        "name": "John",\n        "serial": 12345,\n        "premium": true\n    ]\n\n    CampaignClassic.registerDevice(token: deviceToken, userKey: "johnDoe@example.com", additionalParameters: params)\n}\n')),(0,r.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) registerDeviceWithToken:(nonnull NSData*)token userKey:(nullable NSString*)userKey additionalParams:(nullable NSDictionary<NSString *, id> *)additionalParams;\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'- (void) application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n    NSMutableDictionary *params = [[NSMutableDictionary alloc] initWithObjectsAndKeys:  @"John", @"name", nil];\n    [params setObject: [NSNumber numberWithInt:12345] forKey: @"serial"];\n    [params setObject: [NSNumber numberWithBool:YES]  forKey: @"premium"];\n\n    [AEPMobileCampaignClassic registerDeviceWithToken:deviceToken userKey:@"john@example.com" additionalParameters:params];\n}\n')),(0,r.mdx)(m,{platform:"android",api:"register-extension",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-2"},"Java"),(0,r.mdx)("h4",{id:"syntax"},"Syntax"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void registerExtension()\n")),(0,r.mdx)("h4",{id:"example"},"Example"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"CampaignClassic.registerExtension();\n")),(0,r.mdx)(m,{platform:"android",api:"track-notification-click",repeat:"6",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-3"},"Java"),(0,r.mdx)("p",null,"If ",(0,r.mdx)("inlineCode",{parentName:"p"},"trackInfo")," is null, or does not contain the necessary tracking identifiers, ",(0,r.mdx)("inlineCode",{parentName:"p"},"messageId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_mId"),") and ",(0,r.mdx)("inlineCode",{parentName:"p"},"deliveryId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_dId"),"), a track request is ",(0,r.mdx)("strong",{parentName:"p"},"not")," sent."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void trackNotificationClick(@NonNull final Map<String, String> trackInfo)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'@Override\npublic void onResume() {\n    super.onResume();\n    \n    // The messageId (_mId) and deliveryId (_dId) can be passed in the intent extras.\n    // This is assuming you extract the messageId and deliveryId from the\n    // received push message and are including it in the intent (intent.putExtra())\n    // of the displayed notification.\n\n    Bundle extras = getIntent().getExtras();\n    if (extras != null) {\n        String deliveryId = extras.getString("_dId");\n        String messageId = extras.getString("_mId");\n        if (deliveryId != null && messageId != null) {\n            Map<String,String> trackInfo = new HashMap<>();\n            trackInfo.put("_mId", messageId);\n            trackInfo.put("_dId", deliveryId);\n\n            // Send the tracking information for message opening\n            CampaignClassic.trackNotificationClick(trackInfo);\n        }\n    }\n}\n')),(0,r.mdx)(m,{platform:"ios",api:"track-notification-click",repeat:"11",mdxType:"Variant"}),(0,r.mdx)("p",null,"You can pass the ",(0,r.mdx)("inlineCode",{parentName:"p"},"launchOptions")," that were received upon opening the application or ",(0,r.mdx)("inlineCode",{parentName:"p"},"userInfo"),", which contains the received push payload in ",(0,r.mdx)("inlineCode",{parentName:"p"},"userInfo"),". If ",(0,r.mdx)("inlineCode",{parentName:"p"},"userInfo")," is null or does not contain the necessary tracking identifiers, ",(0,r.mdx)("inlineCode",{parentName:"p"},"broadlogId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_mId"),") and ",(0,r.mdx)("inlineCode",{parentName:"p"},"deliveryId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_dId"),"), a track request is ",(0,r.mdx)("strong",{parentName:"p"},"not")," sent."),(0,r.mdx)("h4",{id:"swift-2"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static func trackNotificationClick(withUserInfo userInfo: [AnyHashable: Any])\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n    CampaignClassic.trackNotificationClick(withUserInfo: response.notification.request.content.userInfo)\n}\n")),(0,r.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) trackNotificationClickWithUserInfo: (nonnull NSDictionary*) userInfo;\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (void) userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler{\n    NSDictionary *userInfo = response.notification.request.content.userInfo;\n    [AEPMobileCampaignClassic trackNotificationClickWithUserInfo:userInfo];\n    completionHandler();\n}\n")),(0,r.mdx)(m,{platform:"android",api:"track-notification-receive",repeat:"6",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-4"},"Java"),(0,r.mdx)("p",null,"If ",(0,r.mdx)("inlineCode",{parentName:"p"},"trackInfo")," is null or does not contain the necessary tracking identifiers, ",(0,r.mdx)("inlineCode",{parentName:"p"},"messageId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_mId"),") and ",(0,r.mdx)("inlineCode",{parentName:"p"},"deliveryId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_dId"),"), a track request is ",(0,r.mdx)("strong",{parentName:"p"},"not")," sent."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void trackNotificationReceive(@NonNull final Map<String, String> trackInfo)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'public class MyFirebaseMessagingService extends FirebaseMessagingService {\n    @Override\n    public void onMessageReceived(RemoteMessage remoteMessage) {\n        Log.d("TestApp", "Receive message from: " + remoteMessage.getFrom());\n        Map<String,String> payloadData = message.getData();\n\n        // Check if message contains data payload.\n        if (payloadData.size() > 0) {\n            Map<String,String> trackInfo = new HashMap<>();\n            trackInfo.put("_mId", payloadData.get("_mId"));\n            trackInfo.put("_dId", payloadData.get("_dId"));\n\n            // Send the tracking information for message received\n            CampaignClassic.trackNotificationReceive(trackInfo);\n        }\n    }\n}\n')),(0,r.mdx)(m,{platform:"ios",api:"track-notification-receive",repeat:"11",mdxType:"Variant"}),(0,r.mdx)("p",null,"You can pass the ",(0,r.mdx)("inlineCode",{parentName:"p"},"launchOptions")," that were received upon opening the application or ",(0,r.mdx)("inlineCode",{parentName:"p"},"userInfo"),", which contains the received push payload in ",(0,r.mdx)("inlineCode",{parentName:"p"},"userInfo"),". If ",(0,r.mdx)("inlineCode",{parentName:"p"},"userInfo")," is null or does not contain the necessary tracking identifiers, ",(0,r.mdx)("inlineCode",{parentName:"p"},"broadlogId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_mId"),") and ",(0,r.mdx)("inlineCode",{parentName:"p"},"deliveryId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_dId"),"), a track request is ",(0,r.mdx)("strong",{parentName:"p"},"not")," sent."),(0,r.mdx)("h4",{id:"swift-3"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static func trackNotificationReceive(withUserInfo userInfo: [AnyHashable: Any])\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n    guard let aps = userInfo["aps"] as? [String: Any] else {\n        completionHandler(.failed)\n        return\n    }\n    if aps["content-available"] as? Int == 1 {\n        // Track silent push notification receive\n        CampaignClassic.trackNotificationReceive(withUserInfo: userInfo)\n        completionHandler(.noData)\n    }\n}\n')),(0,r.mdx)("h4",{id:"objective-c-3"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) trackNotificationReceiveWithUserInfo:(nonnull NSDictionary*) userInfo;\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'- (void) application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)launchOptions fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler\n{\n    if ( launchOptions) NSLog(@"launchOptions: %@", [launchOptions description]);\n    // Tracking silent push notification receive\n    if ( [launchOptions[@"aps"][@"content-available"] intValue] == 1 ) {\n        NSLog(@"Silent Push Notification");\n        [AEPMobileCampaignClassic trackNotificationReceiveWithUserInfo:userInfo];\n        completionHandler(UIBackgroundFetchResultNoData);\n    }\n}\n')),(0,r.mdx)(m,{platform:"android",api:"handle-remote-message",repeat:"7",mdxType:"Variant"}),(0,r.mdx)("h2",{id:"requires-extension-version-v210-through-the-next-major-version-release-"},(0,r.mdx)("em",{parentName:"h2"},(0,r.mdx)("strong",{parentName:"em"},"Requires extension version v2.1.0 through the next major version release "))),(0,r.mdx)("p",null,"Builds an ",(0,r.mdx)("inlineCode",{parentName:"p"},"AEPPushPayload")," with data extracted from a ",(0,r.mdx)("inlineCode",{parentName:"p"},"RemoteMessage"),"'s payload. The built ",(0,r.mdx)("inlineCode",{parentName:"p"},"AEPPushPayload")," is then used to construct a ",(0,r.mdx)("inlineCode",{parentName:"p"},"Notification"),"."),(0,r.mdx)("h4",{id:"java-5"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"@NonNull \npublic static boolean handleRemoteMessage(@NonNull final Context context, @NonNull final RemoteMessage remoteMessage);\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'@Override\npublic void onMessageReceived(RemoteMessage remoteMessage) {\n    Log.d(LOG_TAG, "From: " + remoteMessage.getFrom());\n        if (AEPMessagingService.handleRemoteMessage(this, remoteMessage)) {\n            // Campaign extension has handled the notification\n        } else {\n            // Handle notification from other sources\n        }\n}\n')))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-solution-adobe-campaign-classic-api-reference-md-ded8c5c493e666415a84.js.map