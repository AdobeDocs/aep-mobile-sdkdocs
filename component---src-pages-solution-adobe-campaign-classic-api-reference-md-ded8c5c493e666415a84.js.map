{"version":3,"file":"component---src-pages-solution-adobe-campaign-classic-api-reference-md-ded8c5c493e666415a84.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/solution/adobe-campaign-classic/api-reference.md","webpack://dev-site-documentation-template/./src/pages/solution/adobe-campaign-classic/tabs/api-reference.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Alerts from '/src/pages/resources/alerts.md';\nimport Tabs from './tabs/api-reference.md';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst TabsBlock = makeShortcode(\"TabsBlock\");\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"adobe-campaign-classic-api-reference\"\n    }}>{`Adobe Campaign Classic API reference`}</h1>\n    <h2 {...{\n      \"id\": \"extensionversion\"\n    }}>{`extensionVersion`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`extensionVersion`}</inlineCode>{` API returns the version of the Campaign Classic extension that is registered with the Mobile Core extension.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=extension-version\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=extension-version\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"registerdevice\"\n    }}>{`registerDevice`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`registerDevice`}</inlineCode>{` API lets you register a user device with Campaign Classic.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=register-device\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=register-device\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"registerextension\"\n    }}>{`registerExtension`}</h2>\n    <Alerts query=\"platform=android-register-extension&componentClass=InlineNestedAlert\" mdxType=\"Alerts\" />\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"1\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=register-extension\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"tracknotificationreceive\"\n    }}>{`trackNotificationReceive`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`trackNotificationReceive`}</inlineCode>{` API sends the received push notification's tracking information to the configured Adobe Campaign Classic server.`}</p>\n    <InlineAlert variant=\"success\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`If you are using the `}<inlineCode parentName=\"p\">{`AEPMessagingService.handleRemoteMessage`}</inlineCode>{` API, you should not call `}<inlineCode parentName=\"p\">{`CampaignClassic.trackNotificationReceive`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`CampaignClassic.trackNotificationClick`}</inlineCode>{`.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=track-notification-receive\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=track-notification-receive\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"tracknotificationclick\"\n    }}>{`trackNotificationClick`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`trackNotificationClick`}</inlineCode>{` API sends the clicked push notification's tracking information to the configured Adobe Campaign Classic server. This API can be used to send tracking information when the notification is clicked, which may result in the application being opened.`}</p>\n    <InlineAlert variant=\"success\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`If you are using the `}<inlineCode parentName=\"p\">{`AEPMessagingService.handleRemoteMessage`}</inlineCode>{` API, you should not call `}<inlineCode parentName=\"p\">{`CampaignClassic.trackNotificationReceive`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`CampaignClassic.trackNotificationClick`}</inlineCode>{`.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=track-notification-click\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=track-notification-click\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"other-public-classes\"\n    }}>{`Other public classes`}</h2>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Push template functionality and the following public classes are only available in Adobe Campaign Classic Android SDK version from 2.1.0 through the next major version release.`}</p>\n    <h3 {...{\n      \"id\": \"aepmessagingservice\"\n    }}>{`AEPMessagingService`}</h3>\n    <h4 {...{\n      \"id\": \"handleremotemessage\"\n    }}>{`handleRemoteMessage`}</h4>\n    <p>{`Allows the Adobe Campaign Classic extension to automatically create and dispatch a `}<inlineCode parentName=\"p\">{`Notification`}</inlineCode>{` based on the template included in the provided `}<inlineCode parentName=\"p\">{`RemoteMessage`}</inlineCode>{` object.`}</p>\n    <InlineAlert variant=\"success\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`If you are using the `}<inlineCode parentName=\"p\">{`AEPMessagingService.handleRemoteMessage`}</inlineCode>{` API, you should not call `}<inlineCode parentName=\"p\">{`CampaignClassic.trackNotificationReceive`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`CampaignClassic.trackNotificationClick`}</inlineCode>{`.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"1\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=handle-remote-message\" mdxType=\"Tabs\" />\n    <h3 {...{\n      \"id\": \"aeppushtemplatebroadcastreceiver\"\n    }}>{`AEPPushTemplateBroadcastReceiver`}</h3>\n    <p>{`This class is required to be public, but has no APIs that need to be called by the app developer.`}</p>\n    <h3 {...{\n      \"id\": \"campaignpushtrackeractivity\"\n    }}>{`CampaignPushTrackerActivity`}</h3>\n    <p>{`This class is required to be public, but has no APIs that need to be called by the app developer.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" api=\"extension-version\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@NonNull \npublic static String extensionVersion();\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`String campaignClassicExtensionVersion = CampaignClassic.extensionVersion();\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"extension-version\" repeat=\"10\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static var extensionVersion: String\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let campaignClassicVersion = CampaignClassic.extensionVersion\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objective-c\"\n      }}>{`+ (nonnull NSString *)extensionVersion\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objective-c\"\n      }}>{`NSString *campaignClassicVersion = [AEPMobileCampaignClassic extensionVersion];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"register-device\" repeat=\"7\" mdxType=\"Variant\" />\n    <p>{`To prepare your app to handle push notifications, see the tutorial on `}<a parentName=\"p\" {...{\n        \"href\": \"https://firebase.google.com/docs/cloud-messaging/android/client\"\n      }}>{`setting up a Firebase Cloud Messaging client app on Android`}</a>{`. After you receive the Firebase Cloud Messaging (FCM) SDK registration token, send this token and the device information to Campaign Classic by using the `}<inlineCode parentName=\"p\">{`registerDevice`}</inlineCode>{` API.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`registerDevice`}</inlineCode>{` API registers a device with your Campaign Classic registration server. It takes the FCM registration token as a parameter with a user key that identifies a user, such as an email address or a login name. You can also provide a map of the custom key-value pairs that you want to associate with the registration.`}</p>\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void registerDevice(@NonNull final String token, final String userKey, final Map<String, Object> additionalParams)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic void onNewToken(String token) {\n    Log.d(\"TestApp\", \"Refreshed token: \" + token);\n\n    // If you want to send messages to this application instance or\n    // manage this app's subscriptions on the server side, send the\n    // Instance ID token to your app server.\n    if (token != null) {\n        Log.d(\"TestApp\", \"FCM SDK registration token received : \" + token);\n        \n        // Create a map of additional parameters\n        Map<String, Object> additionalParams = new HashMap<String, Object>();\n        additionalParams.put(\"name\", \"John\");\n        additionalParams.put(\"serial\", 12345);\n        additionalParams.put(\"premium\", true);\n    \n        // Send the registration info\n        CampaignClassic.registerDevice(token, \"john@example.com\", additionalParams);\n    }\n}\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"register-device\" repeat=\"12\" mdxType=\"Variant\" />\n    <p>{`To get your app ready to handle push notifications, see the tutorial on `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/HandlingRemoteNotifications.html#//apple_ref/doc/uid/TP40008194-CH6-SW1\"\n      }}>{`configuring remote notification support`}</a>{`. After you receive the Apple Push Notification service (APNs) token, send this token and the device information to Campaign Classic using the `}<inlineCode parentName=\"p\">{`registerDevice`}</inlineCode>{` API.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`registerDevice`}</inlineCode>{` API registers a device with your Campaign Classic registration server. It takes the APNS token as a parameter with a user key that identifies a user, such as an email address or a login name. You can also provide a map of the custom key-value pairs that you want to associate with the registration.`}</p>\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func registerDevice(token: Data, userKey: String?, additionalParameters: [String: Any]?)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    let params: [String: Any] = [\n        \"name\": \"John\",\n        \"serial\": 12345,\n        \"premium\": true\n    ]\n\n    CampaignClassic.registerDevice(token: deviceToken, userKey: \"johnDoe@example.com\", additionalParameters: params)\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-1\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) registerDeviceWithToken:(nonnull NSData*)token userKey:(nullable NSString*)userKey additionalParams:(nullable NSDictionary<NSString *, id> *)additionalParams;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n    NSMutableDictionary *params = [[NSMutableDictionary alloc] initWithObjectsAndKeys:  @\"John\", @\"name\", nil];\n    [params setObject: [NSNumber numberWithInt:12345] forKey: @\"serial\"];\n    [params setObject: [NSNumber numberWithBool:YES]  forKey: @\"premium\"];\n\n    [AEPMobileCampaignClassic registerDeviceWithToken:deviceToken userKey:@\"john@example.com\" additionalParameters:params];\n}\n`}</code></pre>\n    <Variant platform=\"android\" api=\"register-extension\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-2\"\n    }}>{`Java`}</h4>\n    <h4 {...{\n      \"id\": \"syntax\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void registerExtension()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`CampaignClassic.registerExtension();\n`}</code></pre>\n    <Variant platform=\"android\" api=\"track-notification-click\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-3\"\n    }}>{`Java`}</h4>\n    <p>{`If `}<inlineCode parentName=\"p\">{`trackInfo`}</inlineCode>{` is null, or does not contain the necessary tracking identifiers, `}<inlineCode parentName=\"p\">{`messageId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_mId`}</inlineCode>{`) and `}<inlineCode parentName=\"p\">{`deliveryId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_dId`}</inlineCode>{`), a track request is `}<strong parentName=\"p\">{`not`}</strong>{` sent.`}</p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void trackNotificationClick(@NonNull final Map<String, String> trackInfo)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic void onResume() {\n    super.onResume();\n    \n    // The messageId (_mId) and deliveryId (_dId) can be passed in the intent extras.\n    // This is assuming you extract the messageId and deliveryId from the\n    // received push message and are including it in the intent (intent.putExtra())\n    // of the displayed notification.\n\n    Bundle extras = getIntent().getExtras();\n    if (extras != null) {\n        String deliveryId = extras.getString(\"_dId\");\n        String messageId = extras.getString(\"_mId\");\n        if (deliveryId != null && messageId != null) {\n            Map<String,String> trackInfo = new HashMap<>();\n            trackInfo.put(\"_mId\", messageId);\n            trackInfo.put(\"_dId\", deliveryId);\n\n            // Send the tracking information for message opening\n            CampaignClassic.trackNotificationClick(trackInfo);\n        }\n    }\n}\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"track-notification-click\" repeat=\"11\" mdxType=\"Variant\" />\n    <p>{`You can pass the `}<inlineCode parentName=\"p\">{`launchOptions`}</inlineCode>{` that were received upon opening the application or `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{`, which contains the received push payload in `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{`. If `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{` is null or does not contain the necessary tracking identifiers, `}<inlineCode parentName=\"p\">{`broadlogId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_mId`}</inlineCode>{`) and `}<inlineCode parentName=\"p\">{`deliveryId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_dId`}</inlineCode>{`), a track request is `}<strong parentName=\"p\">{`not`}</strong>{` sent.`}</p>\n    <h4 {...{\n      \"id\": \"swift-2\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func trackNotificationClick(withUserInfo userInfo: [AnyHashable: Any])\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n    CampaignClassic.trackNotificationClick(withUserInfo: response.notification.request.content.userInfo)\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-2\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) trackNotificationClickWithUserInfo: (nonnull NSDictionary*) userInfo;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler{\n    NSDictionary *userInfo = response.notification.request.content.userInfo;\n    [AEPMobileCampaignClassic trackNotificationClickWithUserInfo:userInfo];\n    completionHandler();\n}\n`}</code></pre>\n    <Variant platform=\"android\" api=\"track-notification-receive\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-4\"\n    }}>{`Java`}</h4>\n    <p>{`If `}<inlineCode parentName=\"p\">{`trackInfo`}</inlineCode>{` is null or does not contain the necessary tracking identifiers, `}<inlineCode parentName=\"p\">{`messageId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_mId`}</inlineCode>{`) and `}<inlineCode parentName=\"p\">{`deliveryId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_dId`}</inlineCode>{`), a track request is `}<strong parentName=\"p\">{`not`}</strong>{` sent.`}</p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void trackNotificationReceive(@NonNull final Map<String, String> trackInfo)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class MyFirebaseMessagingService extends FirebaseMessagingService {\n    @Override\n    public void onMessageReceived(RemoteMessage remoteMessage) {\n        Log.d(\"TestApp\", \"Receive message from: \" + remoteMessage.getFrom());\n        Map<String,String> payloadData = message.getData();\n\n        // Check if message contains data payload.\n        if (payloadData.size() > 0) {\n            Map<String,String> trackInfo = new HashMap<>();\n            trackInfo.put(\"_mId\", payloadData.get(\"_mId\"));\n            trackInfo.put(\"_dId\", payloadData.get(\"_dId\"));\n\n            // Send the tracking information for message received\n            CampaignClassic.trackNotificationReceive(trackInfo);\n        }\n    }\n}\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"track-notification-receive\" repeat=\"11\" mdxType=\"Variant\" />\n    <p>{`You can pass the `}<inlineCode parentName=\"p\">{`launchOptions`}</inlineCode>{` that were received upon opening the application or `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{`, which contains the received push payload in `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{`. If `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{` is null or does not contain the necessary tracking identifiers, `}<inlineCode parentName=\"p\">{`broadlogId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_mId`}</inlineCode>{`) and `}<inlineCode parentName=\"p\">{`deliveryId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_dId`}</inlineCode>{`), a track request is `}<strong parentName=\"p\">{`not`}</strong>{` sent.`}</p>\n    <h4 {...{\n      \"id\": \"swift-3\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func trackNotificationReceive(withUserInfo userInfo: [AnyHashable: Any])\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n    guard let aps = userInfo[\"aps\"] as? [String: Any] else {\n        completionHandler(.failed)\n        return\n    }\n    if aps[\"content-available\"] as? Int == 1 {\n        // Track silent push notification receive\n        CampaignClassic.trackNotificationReceive(withUserInfo: userInfo)\n        completionHandler(.noData)\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-3\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) trackNotificationReceiveWithUserInfo:(nonnull NSDictionary*) userInfo;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)launchOptions fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler\n{\n    if ( launchOptions) NSLog(@\"launchOptions: %@\", [launchOptions description]);\n    // Tracking silent push notification receive\n    if ( [launchOptions[@\"aps\"][@\"content-available\"] intValue] == 1 ) {\n        NSLog(@\"Silent Push Notification\");\n        [AEPMobileCampaignClassic trackNotificationReceiveWithUserInfo:userInfo];\n        completionHandler(UIBackgroundFetchResultNoData);\n    }\n}\n`}</code></pre>\n    <Variant platform=\"android\" api=\"handle-remote-message\" repeat=\"7\" mdxType=\"Variant\" />\n    <h2 {...{\n      \"id\": \"requires-extension-version-v210-through-the-next-major-version-release-\"\n    }}><em parentName=\"h2\"><strong parentName=\"em\">{`Requires extension version v2.1.0 through the next major version release `}</strong></em></h2>\n    <p>{`Builds an `}<inlineCode parentName=\"p\">{`AEPPushPayload`}</inlineCode>{` with data extracted from a `}<inlineCode parentName=\"p\">{`RemoteMessage`}</inlineCode>{`'s payload. The built `}<inlineCode parentName=\"p\">{`AEPPushPayload`}</inlineCode>{` is then used to construct a `}<inlineCode parentName=\"p\">{`Notification`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"java-5\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@NonNull \npublic static boolean handleRemoteMessage(@NonNull final Context context, @NonNull final RemoteMessage remoteMessage);\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic void onMessageReceived(RemoteMessage remoteMessage) {\n    Log.d(LOG_TAG, \"From: \" + remoteMessage.getFrom());\n        if (AEPMessagingService.handleRemoteMessage(this, remoteMessage)) {\n            // Campaign extension has handled the notification\n        } else {\n            // Handle notification from other sources\n        }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","TabsBlock","InlineAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","orientation","slots","repeat","query","variant","isMDXComponent","Variant","platform","api"],"sourceRoot":""}