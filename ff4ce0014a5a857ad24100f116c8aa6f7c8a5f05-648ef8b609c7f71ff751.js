"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[6045],{29883:function(e,n,i){i.r(n),i.d(n,{_frontmatter:function(){return s},default:function(){return u}});var t,a=i(87462),r=i(63366),d=(i(15007),i(64983)),l=i(91515),o=["components"],s={},m=(t="Variant",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,d.mdx)("div",e)}),p={_frontmatter:s},c=l.Z;function u(e){var n=e.components,i=(0,r.Z)(e,o);return(0,d.mdx)(c,(0,a.Z)({},p,i,{components:n,mdxType:"MDXLayout"}),(0,d.mdx)(m,{platform:"android",api:"append-to-url",repeat:"7",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"java"},"Java"),(0,d.mdx)("p",null,"This API can be called with ",(0,d.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeCallback")," or ",(0,d.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeCallbackWithError")," for retrieving the attributes from the Mobile SDK. When ",(0,d.mdx)("inlineCode",{parentName:"p"},"AdobeCallbackWithError")," is provided, this API uses a default timeout of 500ms. If the operation times out or an unexpected error occurs, the ",(0,d.mdx)("inlineCode",{parentName:"p"},"fail")," method is called with the appropriate ",(0,d.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeError"),"."),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},"public static void appendVisitorInfoForURL(final String baseURL, final AdobeCallback<String> callback);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"baseUrl")," is the URL to which the visitor information needs to be appended. If the visitor information is nil or empty, the URL is returned as is."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," is invoked after the updated URL is available.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},'Identity.appendVisitorInfoForURL("https://example.com", new AdobeCallback<String>() {    \n    @Override    \n    public void call(String urlWithAdobeVisitorInfo) {        \n        //handle the new URL here        \n        //For example, open the URL on the device browser        \n        //        \n        Intent i = new Intent(Intent.ACTION_VIEW);        \n        i.setData(Uri.parse(urlWithAdobeVisitorInfo));        \n        startActivity(i);    \n    }\n});\n')),(0,d.mdx)(m,{platform:"ios-aep",api:"append-to-url",repeat:"11",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"swift"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"static func appendTo(url: URL?, completion: @escaping (URL?, Error?) -> Void)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"url")," is the URL to which the visitor information needs to be appended. If the visitor information is nil or empty, the URL is returned as is."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"completion")," is invoked after the updated ",(0,d.mdx)("em",{parentName:"li"},"URL")," is available or ",(0,d.mdx)("em",{parentName:"li"},"Error")," if an unexpected exception occurs or the request times out. The returned ",(0,d.mdx)("inlineCode",{parentName:"li"},"Error")," contains the ",(0,d.mdx)("a",{parentName:"li",href:"../api-reference.md#public-classes"},"AEPError")," code of the specific error.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},'Identity.appendTo(url: URL(string: "https://example.com")) { appendedURL, error in\n  if let error = error {\n    // handle error\n  } else {\n    // handle the appended url here\n    if let appendedURL = appendedURL {\n      // APIs which update the UI must be called from main thread\n      DispatchQueue.main.async {\n        self.webView.load(URLRequest(url: appendedURL!))\n      }\n    } else {\n      // handle error, nil appendedURL\n    }\n  }\n})\n')),(0,d.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) appendToUrl: (NSURL * _Nullable baseUrl) completion: ^(NSURL * _Nullable urlWithVisitorData, NSError * _Nullable error) completion;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSURL* url = [NSURL URLWithString:@"https://example.com"];\n[AEPMobileIdentity appendToUrl:url completion:^(NSURL * _Nullable urlWithVisitorData, NSError * _Nullable error) {\n  if (error) {\n    // handle error here\n  } else {\n    // handle the appended url here\n    if (urlWithVisitorData) {\n      // APIs which update the UI must be called from main thread\n      dispatch_async(dispatch_get_main_queue(), ^{\n        [[self webView] loadRequest:[NSURLRequest requestWithURL:urlWithVisitorData]];\n      }\n    } else {\n      // handle error, nil urlWithVisitorData\n    }\n  }\n}];\n')),(0,d.mdx)(m,{platform:"ios-acp",api:"append-to-url",repeat:"12",mdxType:"Variant"}),(0,d.mdx)("p",null,"Method ",(0,d.mdx)("inlineCode",{parentName:"p"},"appendToUrl:withCompletionHandler")," was added in ACPCore version 2.5.0 and ACPIdentity version 2.2.0."),(0,d.mdx)("h4",{id:"swift-1"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"static func append(to: URL?, withCallback: ((URL?) -> Void)?)\nstatic func append(to: URL?, withCompletionHandler: ((URL?, Error?)-> Void)?)\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},'ACPIdentity.append(to:URL(string: "https://example.com"), withCallback: {(appendedURL) in    \n  // handle the appended url here\n  if let appendedURL = appendedURL {\n    // APIs which update the UI must be called from main thread\n    DispatchQueue.main.async {\n      self.webView.load(URLRequest(url: appendedURL!))\n    }\n  } else {\n    // handle error, nil appendedURL\n  }\n});\n\nACPIdentity.append(to: URL(string: "https://example.com"), withCompletionHandler: { (appendedURL, error) in\n  if let error = error {\n    // handle error\n  } else {\n    // handle the appended url here\n    if let appendedURL = appendedURL {\n      // APIs which update the UI must be called from main thread\n      DispatchQueue.main.async {\n        self.webView.load(URLRequest(url: appendedURL!))\n      }\n    } else {\n      // handle error, nil appendedURL\n    }\n  }\n})\n')),(0,d.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) appendToUrl: (nullable NSURL*) baseUrl withCallback: (nullable void (^) (NSURL* __nullable urlWithVisitorData)) callback;\n+ (void) appendToUrl: (nullable NSURL*) baseUrl withCompletionHandler: (nullable void (^) (NSURL* __nullable urlWithVersionData, NSError* __nullable error)) completionHandler;\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"baseUrl")," is the URL to which the visitor information needs to be appended. If the visitor information is nil or empty, the URL is returned as is."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," is invoked after the updated URL is available."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"completionHandler")," is invoked with ",(0,d.mdx)("em",{parentName:"li"},"urlWithVersionData")," after the updated URL is available or ",(0,d.mdx)("em",{parentName:"li"},"error")," if an unexpected exception occurs or the request times out. The returned ",(0,d.mdx)("inlineCode",{parentName:"li"},"NSError")," contains the ",(0,d.mdx)("a",{parentName:"li",href:"../api-reference.md#public-classes"},"ACPError")," code of the specific error. The default timeout of 500ms.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSURL* url = [[NSURL alloc] initWithString:@"https://example.com"];\n[ACPIdentity appendToUrl:url withCallback:^(NSURL * _Nullable urlWithVisitorData) {    \n  // handle the appended url here\n  if (urlWithVisitorData) {\n    // APIs which update the UI must be called from main thread\n    dispatch_async(dispatch_get_main_queue(), ^{\n      [[self webView] loadRequest:[NSURLRequest requestWithURL:urlWithVisitorData]];\n    }\n  } else {\n    // handle error, nil urlWithVisitorData\n  }\n}];\n\n[ACPIdentity appendToUrl:url withCompletionHandler:^(NSURL * _Nullable urlWithVersionData, NSError * _Nullable error) {\n  if (error) {\n    // handle error here\n  } else {\n    // handle the appended url here\n    if (urlWithVisitorData) {\n      // APIs which update the UI must be called from main thread\n      dispatch_async(dispatch_get_main_queue(), ^{\n        [[self webView] loadRequest:[NSURLRequest requestWithURL:urlWithVisitorData]];\n      }\n    } else {\n      // handle error, nil urlWithVisitorData\n    }\n  }\n}];\n')),(0,d.mdx)(m,{platform:"react-native",api:"append-to-url",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"javascript"},"JavaScript"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"appendVisitorInfoForURL(baseURL?: String): Promise<?string>;\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"baseUrl")," is the URL to which the visitor information needs to be appended. If the visitor information is nil or empty, the URL is returned as is.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPIdentity.appendVisitorInfoForURL("https://example.com").then(urlWithVistorData => console.log("AdobeExperenceSDK: Url with Visitor Data = " + urlWithVisitorData));\n')),(0,d.mdx)(m,{platform:"flutter",api:"append-to-url",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"dart"},"Dart"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-dart"},"Future<String> appendToUrl (String url);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"url")," is the URL to which the visitor information needs to be appended. If the visitor information is nil or empty, the URL is returned as is.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-dart"},'String result = "";\n\ntry {\n  result = await FlutterACPIdentity.appendToUrl("https://example.com");\n} on PlatformException {\n  log("Failed to append URL");\n}\n')),(0,d.mdx)(m,{platform:"cordova",api:"append-to-url",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"cordova"},"Cordova"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"ACPIdentity.appendVisitorInfoForUrl = function(url, success, fail);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"url")," ",(0,d.mdx)("em",{parentName:"li"},"(String)")," is the URL to which the visitor information needs to be appended. If the visitor information is nil or empty, the URL is returned as is."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"success")," is a callback containing the provided URL with the visitor information appended if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"appendVisitorInfoForUrl")," API executed without any errors."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"fail")," is a callback containing error information if the  ",(0,d.mdx)("inlineCode",{parentName:"li"},"appendVisitorInfoForUrl")," API was executed with errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPIdentity.appendVisitorInfoForUrl("https://example.com", function(handleCallback) {\n  console.log("AdobeExperenceSDK: Url with Visitor Data = " + handleCallback);\n}, function(handleError) {\n  console.log("AdobeExperenceSDK: Failed to append URL : " + handleError);\n});\n')),(0,d.mdx)(m,{platform:"unity",api:"append-to-url",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void AppendToUrl(string url, AdobeIdentityAppendToUrlCallback callback)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"url")," ",(0,d.mdx)("em",{parentName:"li"},"(String)")," is the URL to which the visitor information needs to be appended. If the visitor information is nil or empty, the URL is returned as is."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," is a callback containing the provided URL with the visitor information appended if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"AppendToUrl")," API executed without any errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'[MonoPInvokeCallback(typeof(AdobeIdentityAppendToUrlCallback))]\npublic static void HandleAdobeIdentityAppendToUrlCallback(string url)\n{\n    print("Url is : " + url);\n}\nACPIdentity.AppendToUrl("https://www.adobe.com", HandleAdobeIdentityAppendToUrlCallback);\n')),(0,d.mdx)(m,{platform:"xamarin",api:"append-to-url",repeat:"11",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-1"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"iOS syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void AppendToUrl (NSUrl baseUrl, Action<NSUrl> callback);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"baseUrl ",(0,d.mdx)("em",{parentName:"li"},"(NSUrl)")," is the URL to which the visitor information needs to be appended. If the visitor information is nil or empty, the URL is returned as is."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," is a callback containing the provided URL with the visitor information appended if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"AppendToUrl")," API executed without any errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Android syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void AppendVisitorInfoForURL (string baseURL, IAdobeCallback callback);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"baseURL ",(0,d.mdx)("em",{parentName:"li"},"(string)")," is the URL to which the visitor information needs to be appended. If the visitor information is nil or empty, the URL is returned as is."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," is a callback containing the provided URL with the visitor information appended if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"AppendVisitorInfoForURL")," API executed without any errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"iOS example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPIdentity.AppendToUrl(url, callback => {\n  Console.WriteLine("Appended url: " + callback);\n});\n')),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Android example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPIdentity.AppendVisitorInfoForURL("https://example.com", new StringCallback());\n\nclass StringCallback : Java.Lang.Object, IAdobeCallback\n{\n  public void Call(Java.Lang.Object stringContent)\n  {\n    if (stringContent != null)\n    {\n      Console.WriteLine("Appended url: " + stringContent);\n    }\n    else\n    {\n      Console.WriteLine("null content in string callback");\n    }\n  }\n}\n')),(0,d.mdx)(m,{platform:"android",api:"extension-version",repeat:"2",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"java-1"},"Java"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},"String identityExtensionVersion = Identity.extensionVersion();\n")),(0,d.mdx)(m,{platform:"ios-aep",api:"extension-version",repeat:"10",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"swift-2"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"static var extensionVersion: String\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"let identityExtensionVersion  = Identity.extensionVersion\n")),(0,d.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (nonnull NSString*) extensionVersion;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"NSString *identityVersion = [AEPMobileIdentity extensionVersion];\n")),(0,d.mdx)(m,{platform:"ios-acp",api:"extension-version",repeat:"10",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"swift-3"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"static func extensionVersion() -> String\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"let identityVersion  = ACPIdentity.extensionVersion()\n")),(0,d.mdx)("h4",{id:"objective-c-3"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (nonnull NSString*) extensionVersion;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"NSString *identityVersion = [ACPIdentity extensionVersion];\n")),(0,d.mdx)(m,{platform:"react-native",api:"extension-version",repeat:"2",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"javascript-1"},"JavaScript"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPIdentity.extensionVersion().then(identityExtensionVersion => console.log("AdobeExperienceSDK: ACPIdentity version: " + identityExtensionVersion));\n')),(0,d.mdx)(m,{platform:"flutter",api:"extension-version",repeat:"2",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"dart-1"},"Dart"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-dart"},"String identityExtensionVersion = FlutterACPIdentity.extensionVersion;\n")),(0,d.mdx)(m,{platform:"cordova",api:"extension-version",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"cordova-1"},"Cordova"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"ACPIdentity.extensionVersion = function(success, fail);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"success")," is a callback containing the ACPIdentity extension version if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"extensionVersion")," API executed without any errors."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"fail")," is a callback containing error information if the  ",(0,d.mdx)("inlineCode",{parentName:"li"},"appendVisitorInfoForUrl")," API was executed with errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPIdentity.extensionVersion(function (handleCallback) {\n  console.log("AdobeExperienceSDK: ACPIdentity version: " + handleCallback)\n}, function (handleError) {\n  console.log("AdobeExperenceSDK: failed to get extension version : " + handleError)\n});\n')),(0,d.mdx)(m,{platform:"unity",api:"extension-version",repeat:"5",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-2"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static string ExtensionVersion()\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"string identityVersion = ACPIdentity.ExtensionVersion();\n")),(0,d.mdx)(m,{platform:"xamarin",api:"extension-version",repeat:"5",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-3"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static string ExtensionVersion ();\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"string identityVersion = ACPIdentity.ExtensionVersion();\n")),(0,d.mdx)(m,{platform:"android",api:"get-experience-cloud-id",repeat:"7",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"java-2"},"Java"),(0,d.mdx)("p",null,"This API can be called with ",(0,d.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeCallback")," or ",(0,d.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeCallbackWithError")," for retrieving the ECID from the Mobile SDK. When ",(0,d.mdx)("inlineCode",{parentName:"p"},"AdobeCallbackWithError")," is provided, this API uses a default timeout of 500ms. If the operation times out or an unexpected error occurs, the ",(0,d.mdx)("inlineCode",{parentName:"p"},"fail")," method is called with the appropriate ",(0,d.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeError"),"."),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},"public static void getExperienceCloudId(final AdobeCallback<String> callback);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," is invoked after the ECID is available.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},"Identity.getExperienceCloudId(new AdobeCallback<String>() {    \n    @Override    \n    public void call(String id) {        \n         //Handle the ID returned here    \n    }\n});\n")),(0,d.mdx)(m,{platform:"ios-aep",api:"get-experience-cloud-id",repeat:"11",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"swift-4"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(getExperienceCloudId:)\nstatic func getExperienceCloudId(completion: @escaping (String?, Error?) -> Void)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"completion")," is invoked with ",(0,d.mdx)("em",{parentName:"li"},"String")," after the ECID is available, or ",(0,d.mdx)("em",{parentName:"li"},"Error")," if an unexpected error occurs or the request times out. The returned ",(0,d.mdx)("inlineCode",{parentName:"li"},"Error")," contains the ",(0,d.mdx)("a",{parentName:"li",href:"../api-reference.md#public-classes"},"AEPError")," code of the specific error.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"Identity.getExperienceCloudId { ecid, error in\n  if let error = error {\n    // handle error here\n  } else {\n    // handle the retrieved ID here\n  }\n}\n")),(0,d.mdx)("h4",{id:"objective-c-4"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) getExperienceCloudId: ^(NSString * _Nullable ecid, NSError * _Nullable error) completion;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[AEPMobileIdentity getExperienceCloudId:^(NSString * _Nullable ecid, NSError *error) {\n  if (error) {\n    // handle error here\n  } else {\n    // handle the retrieved ID here\n  }\n}];\n")),(0,d.mdx)(m,{platform:"ios-acp",api:"get-experience-cloud-id",repeat:"12",mdxType:"Variant"}),(0,d.mdx)("p",null,"Method ",(0,d.mdx)("inlineCode",{parentName:"p"},"getExperienceCloudIdWithCompletionHandler")," was added in ACPCore version 2.5.0 and ACPIdentity version 2.2.0."),(0,d.mdx)("h4",{id:"swift-5"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"static func getExperienceCloudId(_ callback: @escaping (String?) -> Void)\nstatic func getExperienceCloudId(completionHandler: @escaping (String?, Error?) -> Void)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," is invoked after the ECID is available."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"completionHandler")," is invoked with ",(0,d.mdx)("em",{parentName:"li"},"experienceCloudId")," after the ECID is available, or ",(0,d.mdx)("em",{parentName:"li"},"error")," if an unexpected error occurs or the request times out. The returned ",(0,d.mdx)("inlineCode",{parentName:"li"},"NSError")," contains the ",(0,d.mdx)("a",{parentName:"li",href:"../../api-reference.md#public-classes"},"ACPError")," code of the specific error. The default timeout of 500ms.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"ACPIdentity.getExperienceCloudId { (retrievedCloudId) in    \n    // handle the retrieved ID here    \n}\n\nACPIdentity.getExperienceCloudId { (retrievedCloudId, error) in\n  if let error = error {\n    // handle error here\n  } else {\n    // handle the retrieved ID here\n  }\n}\n")),(0,d.mdx)("h4",{id:"objective-c-5"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) getExperienceCloudId: (nonnull void (^) (NSString* __nullable experienceCloudId)) callback;\n+ (void) getExperienceCloudIdWithCompletionHandler: (nonnull void (^) (NSString* __nullable experienceCloudId, NSError* __nullable error)) completionHandler;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[ACPIdentity getExperienceCloudId:^(NSString * _Nullable retrievedCloudId) {    \n    // handle the retrieved ID here    \n}];\n\n[ACPIdentity getExperienceCloudIdWithCompletionHandler:^(NSString * _Nullable experienceCloudId, NSError * _Nullable error) {\n  if (error) {\n    // handle error here\n  } else {\n    // handle the retrieved ID here\n  }\n}];\n")),(0,d.mdx)(m,{platform:"react-native",api:"get-experience-cloud-id",repeat:"5",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"javascript-2"},"JavaScript"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"getExperienceCloudId(): Promise<?string>;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPIdentity.getExperienceCloudId().then(cloudId => console.log("AdobeExperienceSDK: CloudID = " + cloudId));\n')),(0,d.mdx)(m,{platform:"flutter",api:"get-experience-cloud-id",repeat:"5",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"dart-2"},"Dart"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-dart"},"Future<String> experienceCloudId;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-dart"},'String result = "";\n\ntry {\n  result = await FlutterACPIdentity.experienceCloudId;\n} on PlatformException {\n  log("Failed to get experienceCloudId");\n}\n')),(0,d.mdx)(m,{platform:"cordova",api:"get-experience-cloud-id",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"cordova-2"},"Cordova"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"ACPIdentity.getExperienceCloudId(success, fail);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"success")," is a callback containing the ECID if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"getExperienceCloudId")," API executed without any errors."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"fail")," is a callback containing error information if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"getExperienceCloudId")," API was executed with errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPIdentity.getExperienceCloudId(function (handleCallback) {\n  console.log("AdobeExperienceSDK: experienceCloudId: " + handleCallback)\n}, function (handleError) {\n  console.log("AdobeExperenceSDK: Failed to retrieve experienceCloudId : " + handleError);\n});\n')),(0,d.mdx)(m,{platform:"unity",api:"get-experience-cloud-id",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-4"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void GetExperienceCloudId(AdobeGetExperienceCloudIdCallback callback)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," is a callback containing the ECID if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"GetExperienceCloudId")," API executed without any errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'[MonoPInvokeCallback(typeof(AdobeGetExperienceCloudIdCallback))]\npublic static void HandleAdobeGetExperienceCloudIdCallback(string cloudId)\n{\n    print("ECID is : " + cloudId);\n}\nACPIdentity.GetExperienceCloudId(HandleAdobeGetExperienceCloudIdCallback);\n')),(0,d.mdx)(m,{platform:"xamarin",api:"get-experience-cloud-id",repeat:"11",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-5"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"iOS syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void GetExperienceCloudId (Action<NSString> callback);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," is a callback containing the ECID if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"getExperienceCloudId")," API executed without any errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Android syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void GetExperienceCloudId (IAdobeCallback callback);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," is a callback containing the ECID if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"getExperienceCloudId")," API executed without any errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"iOS example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPIdentity.GetExperienceCloudId(callback => {\n  Console.WriteLine("Experience Cloud Id: " + callback);\n});\n')),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Android example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPIdentity.GetExperienceCloudId(new StringCallback());\n\nclass StringCallback : Java.Lang.Object, IAdobeCallback\n{\n  public void Call(Java.Lang.Object stringContent)\n  {\n    if (stringContent != null)\n    {\n      Console.WriteLine("Experience Cloud Id: " + stringContent);\n    }\n    else\n    {\n      Console.WriteLine("null content in string callback");\n    }\n  }\n}\n')),(0,d.mdx)(m,{platform:"android",api:"get-identifiers",repeat:"7",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"java-3"},"Java"),(0,d.mdx)("p",null,"This API can be called with ",(0,d.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeCallback")," or ",(0,d.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeCallbackWithError")," for retrieving the custom identifiers from the Mobile SDK. When ",(0,d.mdx)("inlineCode",{parentName:"p"},"AdobeCallbackWithError")," is provided, this API uses a default timeout of 500ms. If the operation times out or an unexpected error occurs, the ",(0,d.mdx)("inlineCode",{parentName:"p"},"fail")," method is called with the appropriate ",(0,d.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeError"),"."),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},"public static void getIdentifiers(final AdobeCallback<List<VisitorID>> callback);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," is invoked after the customer identifiers are available.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},"Identity.getIdentifiers(new AdobeCallback<List<VisitorID>>() {    \n    @Override    \n    public void call(List<VisitorID> idList) {        \n         //Process the IDs here    \n    }\n\n});\n")),(0,d.mdx)(m,{platform:"ios-aep",api:"get-identifiers",repeat:"11",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"swift-6"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(getIdentifiers:)\nstatic func getIdentifiers(completion: @escaping ([Identifiable]?, Error?) -> Void)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"completion")," is invoked with a list of  ",(0,d.mdx)("em",{parentName:"li"},"Identifiable")," objects after the customer identifiers are available, or ",(0,d.mdx)("em",{parentName:"li"},"Error")," if an unexpected error occurs or the request times out. The returned ",(0,d.mdx)("inlineCode",{parentName:"li"},"Error")," contains the ",(0,d.mdx)("a",{parentName:"li",href:"../api-reference.md#public-classes"},"AEPError")," code of the specific error.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"Identity.getIdentifiers { identifiers, error in\n  if let error = error {\n    // handle error here\n  } else {\n    // handle the retrieved identifiers here\n  }\n}\n")),(0,d.mdx)("h4",{id:"objective-c-6"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) getIdentifiers: ^(NSArray<id<AEPIdentifiables>> * _Nullable identifiers, NSError * _Nullable error) completion;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[[AEPMobileIdentity getIdentifiers:^(NSArray<id<AEPIdentifiable>> * _Nullable identifiers, NSError *error) {\n  if (error) {\n    // handle error here\n  } else {\n    // handle the retrieved identifiers here\n  }\n}];\n")),(0,d.mdx)(m,{platform:"ios-acp",api:"get-identifiers",repeat:"12",mdxType:"Variant"}),(0,d.mdx)("p",null,"Method ",(0,d.mdx)("inlineCode",{parentName:"p"},"getIdentifiersWithCompletionHandler")," was added in ACPCore version 2.5.0 and ACPIdentity version 2.2.0."),(0,d.mdx)("h4",{id:"swift-7"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"static func getIdentifiers(_ callback: @escaping ([ACPMobileVisitorId]?) -> Void)\nstatic func getIdentifiersWithCompletionHandler(_ completionHandler: @escaping ([ACPMobileVisitorId]?, Error?) -> Void)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," is invoked after the customer identifiers are available."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"completionHandler")," is invoked with ",(0,d.mdx)("em",{parentName:"li"},"visitorIDs")," after the customer identifiers are available, or ",(0,d.mdx)("em",{parentName:"li"},"error")," if an unexpected error occurs or the request times out. The returned ",(0,d.mdx)("inlineCode",{parentName:"li"},"NSError")," contains the ",(0,d.mdx)("a",{parentName:"li",href:"../api-reference.md#public-classes"},"ACPError")," code of the specific error. The default timeout of 500ms.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"ACPIdentity.getIdentifiers { (retrievedVisitorIds) in    \n   // handle the retrieved identifiers here        \n}\n\nACPIdentity.getIdentifiersWithCompletionHandler { (retrievedVisitorIds, error) in\n  if let error = error {\n    // handle error here\n  } else {\n    // handle the retrieved identifiers here\n  }\n}\n")),(0,d.mdx)("h4",{id:"objective-c-7"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) getIdentifiers: (nonnull void (^) (NSArray<ADBMobileVisitorId*>* __nullable visitorIDs)) callback;\n+ (void) getIdentifiersWithCompletionHandler: (nonnull void (^) (NSArray<ACPMobileVisitorId*>* __nullable visitorIDs, NSError* __nullable error)) completionHandler;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[ACPIdentity getIdentifiers:^(NSArray<ACPMobileVisitorId *> * _Nullable retrievedVisitorIds) {    \n    // handle the retrieved identifiers here     \n}];\n\n[ACPIdentity getIdentifiersWithCompletionHandler:^(NSArray<ACPMobileVisitorId *> * _Nullable visitorIDs, NSError * _Nullable error) {\n  if (error) {\n    // handle error here\n  } else {\n    // handle the retrieved identifiers here\n  }\n}];\n")),(0,d.mdx)(m,{platform:"react-native",api:"get-identifiers",repeat:"5",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"javascript-3"},"JavaScript"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"getIdentifiers(): Promise<Array<?ACPVisitorID>>;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPIdentity.getIdentifiers().then(identifiers => console.log("AdobeExperienceSDK: Identifiers = " + identifiers));\n')),(0,d.mdx)(m,{platform:"flutter",api:"get-identifiers",repeat:"5",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"dart-3"},"Dart"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-dart"}," Future<List<ACPMobileVisitorId>> identifiers;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-dart"},'List<ACPMobileVisitorId> result;\n\ntry {\n  result = await FlutterACPIdentity.identifiers;\n} on PlatformException {\n  log("Failed to get identifiers");\n}\n')),(0,d.mdx)(m,{platform:"cordova",api:"get-identifiers",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"cordova-3"},"Cordova"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"ACPIdentity.getIdentifiers(success, fail);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"success")," is a callback containing the previously synced identifiers if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"getIdentifiers")," API executed without any errors."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"fail")," is a callback containing error information if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"getIdentifiers")," API was executed with errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPIdentity.getIdentifiers(function (handleCallback) {\n  console.log("AdobeExperienceSDK: Visitor identifiers: " + handleCallback);\n}, function (handleError) {\n  console.log("AdobeExperenceSDK: Failed to retrieve visitor identifiers : " + handleError);\n});\n')),(0,d.mdx)(m,{platform:"unity",api:"get-identifiers",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-6"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void GetIdentifiers(AdobeGetIdentifiersCallback callback)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," is a callback containing the previously synced identifiers if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"GetIdentifiers")," API executed without any errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'[MonoPInvokeCallback(typeof(AdobeGetIdentifiersCallback))]\npublic static void HandleAdobeGetIdentifiersCallback(string visitorIds)\n{\n    print("Ids is : " + visitorIds);\n}\nACPIdentity.GetIdentifiers(HandleAdobeGetIdentifiersCallback);\n')),(0,d.mdx)(m,{platform:"xamarin",api:"get-identifiers",repeat:"11",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-7"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"iOS syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void GetIdentifiers (Action<ACPMobileVisitorId[]> callback);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," is a callback containing the previously synced identifiers if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"GetIdentifiers")," API executed without any errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Android syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void GetIdentifiers (IAdobeCallback callback);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," is a callback containing the previously synced identifiers if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"GetIdentifiers")," API executed without any errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"iOS example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'Action<ACPMobileVisitorId[]> callback = new Action<ACPMobileVisitorId[]>(handleCallback);\nACPIdentity.GetIdentifiers(callback);\n\nprivate void handleCallback(ACPMobileVisitorId[] ids)\n{\n  String visitorIdsString = "[]";\n  if (ids.Length != 0)\n  {\n    visitorIdsString = "";\n    foreach (ACPMobileVisitorId id in ids)\n    {\n      visitorIdsString = visitorIdsString + "[Id: " + id.Identifier + ", Type: " + id.IdType + ", Origin: " + id.IdOrigin + ", Authentication: " + id.AuthenticationState + "]";\n    }\n  }\n  Console.WriteLine("Retrieved visitor ids: " + visitorIdsString);\n}\n')),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Android example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPIdentity.GetIdentifiers(new GetIdentifiersCallback());\n\nclass GetIdentifiersCallback : Java.Lang.Object, IAdobeCallback\n{\n  public void Call(Java.Lang.Object retrievedIds)\n  {\n    System.String visitorIdsString = "[]";\n    if (retrievedIds != null)\n    {\n      var ids = GetObject<JavaList>(retrievedIds.Handle, JniHandleOwnership.DoNotTransfer);\n      if (ids != null && ids.Count > 0)\n      {\n        visitorIdsString = "";\n        foreach (VisitorID id in ids)\n        {\n          visitorIdsString = visitorIdsString + "[Id: " + id.Id + ", Type: " + id.IdType + ", Origin: " + id.IdOrigin + ", Authentication: " + id.GetAuthenticationState() + "]";\n        }\n      }\n    }\n    Console.WriteLine("Retrieved visitor ids: " + visitorIdsString);\n  }\n}\n')),(0,d.mdx)(m,{platform:"android",api:"get-url-variables",repeat:"8",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"java-4"},"Java"),(0,d.mdx)("p",null,"This method was added in Core version 1.4.0 and Identity version 1.1.0."),(0,d.mdx)("p",null,"This API can be called with ",(0,d.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeCallback")," or ",(0,d.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeCallbackWithError")," for retrieving the attributes from the Mobile SDK. When ",(0,d.mdx)("inlineCode",{parentName:"p"},"AdobeCallbackWithError")," is provided, this API uses a default timeout of 500ms. If the operation times out or an unexpected error occurs, the ",(0,d.mdx)("inlineCode",{parentName:"p"},"fail")," method is called with the appropriate ",(0,d.mdx)("a",{parentName:"p",href:"../api-reference.md#public-classes"},"AdobeError"),"."),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},"public static void getUrlVariables(final AdobeCallback<String> callback);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," has an NSString value that contains the visitor identifiers as a query string after the service request is complete.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},'Identity.getUrlVariables(new AdobeCallback<String>() {    \n    @Override    \n    public void call(String stringWithAdobeVisitorInfo) {        \n        //handle the URL query parameter string here\n        //For example, open the URL on the device browser        \n        //        \n        Intent i = new Intent(Intent.ACTION_VIEW);        \n        i.setData(Uri.parse("https://example.com?" + urlWithAdobeVisitorInfo));        \n        startActivity(i);    \n    }\n});\n')),(0,d.mdx)(m,{platform:"ios-aep",api:"get-url-variables",repeat:"11",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"swift-8"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(getUrlVariables:)\nstatic func getUrlVariables(completion: @escaping (String?, Error?) -> Void)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"completion")," is invoked with ",(0,d.mdx)("em",{parentName:"li"},"String")," containing the visitor identifiers as a query string, or ",(0,d.mdx)("em",{parentName:"li"},"Error")," if an unexpected error occurs or the request times out. The returned ",(0,d.mdx)("inlineCode",{parentName:"li"},"Error")," contains the ",(0,d.mdx)("a",{parentName:"li",href:"../api-reference.md#public-classes"},"AEPError")," code of the specific error. The default timeout of 500ms.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},'Identity.getUrlVariables { (urlVariables, error) in\n  if let error = error {\n    // handle error\n  } else {\n    var urlStringWithVisitorData: String = "https://example.com"\n    if let urlVariables: String = urlVariables {\n      urlStringWithVisitorData.append("?" + urlVariables)\n    }\n\n    guard let urlWithVisitorData: URL = URL(string: urlStringWithVisitorData) else {\n      // handle error, unable to construct URL\n      return\n    }\n    // APIs which update the UI must be called from main thread\n    DispatchQueue.main.async {\n      self.webView.load(URLRequest(url: urlWithVisitorData))\n    }\n  }\n}\n')),(0,d.mdx)("h4",{id:"objective-c-8"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) getUrlVariables: ^(NSString * _Nullable urlVariables, NSError * _Nullable error) completion;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[AEPMobileIdentity getUrlVariables:^(NSString * _Nullable urlVariables, NSError *error) {\n  if (error) {\n    // handle error here\n  } else {\n    // handle the URL query parameter string here\n    NSString* urlString = @"https://example.com";\n    NSString* urlStringWithVisitorData = [NSString stringWithFormat:@"%@?%@", urlString, urlVariables];\n    NSURL* urlWithVisitorData = [NSURL URLWithString:urlStringWithVisitorData];\n    // APIs which update the UI must be called from main thread\n    dispatch_async(dispatch_get_main_queue(), ^{\n      [[self webView] loadRequest:[NSURLRequest requestWithURL:urlWithVisitorData]];\n    }\n  }\n}];\n')),(0,d.mdx)(m,{platform:"ios-acp",api:"get-url-variables",repeat:"12",mdxType:"Variant"}),(0,d.mdx)("p",null,"Method ",(0,d.mdx)("inlineCode",{parentName:"p"},"getUrlVariables")," was added in ACPCore version 2.3.0 and ACPIdentity version 2.1.0. Method ",(0,d.mdx)("inlineCode",{parentName:"p"},"getUrlVariablesWithCompletionHandler")," was added in ACPCore version 2.5.0 and ACPIdentity version 2.2.0."),(0,d.mdx)("h4",{id:"swift-9"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"static func getUrlVariables(_ callback: @escaping (String?) -> Void)\nstatic func getUrlVariables(completionHandler: @escaping (String?, Error?) -> Void)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," has an NSString value that contains the visitor identifiers as a query string after the service request is complete."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"completionHandler")," is invoked with ",(0,d.mdx)("em",{parentName:"li"},"urlVariables")," containing the visitor identifiers as a query string, or ",(0,d.mdx)("em",{parentName:"li"},"error")," if an unexpected error occurs or the request times out. The returned ",(0,d.mdx)("inlineCode",{parentName:"li"},"NSError")," contains the ",(0,d.mdx)("a",{parentName:"li",href:"../api-reference.md#public-classes"},"ACPError")," code of the specific error. The default timeout of 500ms.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},'ACPIdentity.getUrlVariables {(urlVariables) in\n  var urlStringWithVisitorData: String = "https://example.com"\n  if let urlVariables: String = urlVariables {\n    urlStringWithVisitorData.append("?" + urlVariables)\n  }\n\n  guard let urlWithVisitorData: URL = URL(string: urlStringWithVisitorData)   else {\n    // handle error, unable to construct URL\n    return\n  }\n  // APIs which update the UI must be called from main thread\n  DispatchQueue.main.async {\n    self.webView.load(URLRequest(url: urlWithVisitorData))\n  }\n}\n\nACPIdentity.getUrlVariables { (urlVariables, error) in\n  if let error = error {\n    // handle error\n  } else {\n    var urlStringWithVisitorData: String = "https://example.com"\n    if let urlVariables: String = urlVariables {\n      urlStringWithVisitorData.append("?" + urlVariables)\n    }\n\n    guard let urlWithVisitorData: URL = URL(string: urlStringWithVisitorData) else {\n      // handle error, unable to construct URL\n      return\n    }\n    // APIs which update the UI must be called from main thread\n    DispatchQueue.main.async {\n      self.webView.load(URLRequest(url: urlWithVisitorData))\n    }\n  }\n}\n')),(0,d.mdx)("h4",{id:"objective-c-9"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) getUrlVariables: (nonnull void (^) (NSString* __nullable urlVariables)) callback;\n+ (void) getUrlVariablesWithCompletionHandler: (nonnull void (^) (NSString* __nullable urlVariables, NSError* __nullable error)) completionHandler;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[ACPIdentity getUrlVariables:^(NSString * _Nullable urlVariables) {    \n  // handle the URL query parameter string here\n  NSString* urlString = @"https://example.com";\n  NSString* urlStringWithVisitorData = [NSString stringWithFormat:@"%@?%@", urlString, urlVariables];\n  NSURL* urlWithVisitorData = [NSURL URLWithString:urlStringWithVisitorData];\n  // APIs which update the UI must be called from main thread\n  dispatch_async(dispatch_get_main_queue(), ^{\n    [[self webView] loadRequest:[NSURLRequest requestWithURL:urlWithVisitorData]];\n  }\n}];\n\n[ACPIdentity getUrlVariablesWithCompletionHandler:^(NSString * _Nullable urlVariables, NSError * _Nullable error) {\n  if (error) {\n    // handle error here\n  } else {\n    // handle the URL query parameter string here\n    NSString* urlString = @"https://example.com";\n    NSString* urlStringWithVisitorData = [NSString stringWithFormat:@"%@?%@", urlString, urlVariables];\n    NSURL* urlWithVisitorData = [NSURL URLWithString:urlStringWithVisitorData];\n    // APIs which update the UI must be called from main thread\n    dispatch_async(dispatch_get_main_queue(), ^{\n      [[self webView] loadRequest:[NSURLRequest requestWithURL:urlWithVisitorData]];\n    }\n  }\n}];\n')),(0,d.mdx)(m,{platform:"react-native",api:"get-url-variables",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("p",null,"This method was added in react-native-acpcore v1.0.5."),(0,d.mdx)("h4",{id:"javascript-4"},"JavaScript"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"getUrlVariables(): Promise<?string>;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPIdentity.getUrlVariables().then(urlVariables => console.log("AdobeExperenceSDK: query params = " + urlVariables));\n')),(0,d.mdx)(m,{platform:"flutter",api:"get-url-variables",repeat:"5",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"dart-4"},"Dart"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-dart"}," Future<String> urlVariables;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-dart"},'String result = "";\n\ntry {\n  result = await FlutterACPIdentity.urlVariables;\n} on PlatformException {\n  log("Failed to get url variables");\n}\n')),(0,d.mdx)(m,{platform:"cordova",api:"get-url-variables",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"cordova-4"},"Cordova"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"ACPIdentity.getUrlVariables(success, fail);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"success")," is a callback containing the url variables in query parameter form if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"getUrlVariables")," API executed without any errors."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"fail")," is a callback containing error information if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"getUrlVariables")," API was executed with errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPIdentity.getUrlVariables(function (handleCallback) {\n  console.log("AdobeExperienceSDK: Url variables: " + handleCallback);\n}, function (handleError) {\n  console.log("AdobeExperenceSDK: Failed to retrieve url variables : " + handleError);\n});\n')),(0,d.mdx)(m,{platform:"unity",api:"get-url-variables",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-8"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void GetUrlVariables(AdobeGetUrlVariables callback)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," is a callback containing the url variables in query parameter form if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"GetUrlVariables")," API executed without any errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'[MonoPInvokeCallback(typeof(AdobeGetUrlVariables))]\npublic static void HandleAdobeGetUrlVariables(string urlVariables)\n{\n  print("Url variables are : " + urlVariables);\n}\nACPIdentity.GetUrlVariables(HandleAdobeGetUrlVariables);\n')),(0,d.mdx)(m,{platform:"xamarin",api:"get-url-variables",repeat:"11",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-9"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"iOS syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void GetUrlVariables (Action<NSString> callback);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," is a callback containing the url variables in query parameter form if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"GetUrlVariables")," API executed without any errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Android syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void GetUrlVariables (IAdobeCallback callback);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"callback")," is a callback containing the url variables in query parameter form if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"GetUrlVariables")," API executed without any errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"iOS example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},' ACPIdentity.GetUrlVariables(callback => {\n   Console.WriteLine("Url variables: " + callback);\n });\n')),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Android example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPIdentity.GetUrlVariables(new StringCallback());\n\nclass StringCallback : Java.Lang.Object, IAdobeCallback\n{\n  public void Call(Java.Lang.Object stringContent)\n  {\n    if (stringContent != null)\n    {\n      Console.WriteLine("Url variables: " + stringContent);\n    }\n    else\n    {\n      Console.WriteLine("null content in string callback");\n    }\n  }\n}\n')),(0,d.mdx)(m,{platform:"android",api:"register-extension",repeat:"3",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"java-5"},"Java"),(0,d.mdx)("p",null,"After calling the ",(0,d.mdx)("inlineCode",{parentName:"p"},"setApplication()")," method in the ",(0,d.mdx)("inlineCode",{parentName:"p"},"onCreate()")," method, register the extension. If the registration was not successful, an ",(0,d.mdx)("inlineCode",{parentName:"p"},"InvalidInitException")," is thrown."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},"public class MobileApp extends Application {\n@Override\npublic void onCreate() {\nsuper.onCreate();\n     MobileCore.setApplication(this);\n     try {\n         Identity.registerExtension();\n     } catch (Exception e) {\n         //Log the exception\n     }\n  }\n}\n")),(0,d.mdx)(m,{platform:"ios-aep",api:"register-extension",repeat:"7",mdxType:"Variant"}),(0,d.mdx)("p",null,"For iOS AEP libraries, registration is changed to a single API call. Calling the MobileCore.start API is no longer required. See ",(0,d.mdx)("a",{parentName:"p",href:"../api-reference.md#registerextension-s"},"MobileCore.registerExtensions()")," for more information."),(0,d.mdx)("h4",{id:"swift-10"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},'// AppDelegate.swift\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    MobileCore.registerExtensions([AEPIdentity.Identity.self, Lifecycle.self, Analytics.self], {\n        MobileCore.configureWith(appId: "mobilePropertyEnvironmentID")\n    })\n  ...\n}\n')),(0,d.mdx)("h4",{id:"objective-c-10"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},'// AppDelegate.m\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    [AEPMobileCore registerExtensions:@[AEPMobileIdentity.class, AEPMobileLifecycle.class, AEPMobileAnalytics.class] completion:^{\n    [AEPMobileCore configureWithAppId: @"mobilePropertyEnvironmentID"];\n  }];\n  ...\n}\n')),(0,d.mdx)(m,{platform:"ios-acp",api:"register-extension",repeat:"7",mdxType:"Variant"}),(0,d.mdx)("p",null,"Register the Identity extension in your app's ",(0,d.mdx)("inlineCode",{parentName:"p"},"didFinishLaunchingWithOptions")," function:"),(0,d.mdx)("h4",{id:"swift-11"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n  ACPIdentity.registerExtension()\n  // Override point for customization after application launch.\n  return true;\n}\n")),(0,d.mdx)("h4",{id:"objective-c-11"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  [ACPIdentity registerExtension];\n  // Override point for customization after application launch.\n  return YES;\n}\n")),(0,d.mdx)(m,{platform:"react-native",api:"register-extension",repeat:"2",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"javascript-5"},"JavaScript"),(0,d.mdx)("p",null,"When using React Native, registering Identity with Mobile Core should be done in native code which is shown under the Android and iOS tabs."),(0,d.mdx)(m,{platform:"flutter",api:"register-extension",repeat:"2",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"dart-5"},"Dart"),(0,d.mdx)("p",null,"When using Flutter, registering Identity with Mobile Core should be done in native code which is shown under the Android and iOS tabs."),(0,d.mdx)(m,{platform:"cordova",api:"register-extension",repeat:"2",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"cordova-5"},"Cordova"),(0,d.mdx)("p",null,"When using Cordova, registering Identity with Mobile Core should be done in native code which is shown under the Android and iOS tabs."),(0,d.mdx)(m,{platform:"unity",api:"register-extension",repeat:"3",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-10"},"C#"),(0,d.mdx)("p",null,"Register the Identity extension in your app's ",(0,d.mdx)("inlineCode",{parentName:"p"},"Start()")," function:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"void Start() {\n  ACPIdentity.RegisterExtension();\n}\n")),(0,d.mdx)(m,{platform:"xamarin",api:"register-extension",repeat:"7",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-11"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"iOS")),(0,d.mdx)("p",null,"Register the Identity extension in your app's ",(0,d.mdx)("inlineCode",{parentName:"p"},"FinishedLaunching()")," function:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public override bool FinishedLaunching(UIApplication app, NSDictionary options)\n{\n  global::Xamarin.Forms.Forms.Init();\n  LoadApplication(new App());\n    ACPIdentity.RegisterExtension();\n\n  // start core\n  ACPCore.Start(startCallback);\n\n  return base.FinishedLaunching(app, options);\n}\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Android")),(0,d.mdx)("p",null,"Register the Identity extension in your app's ",(0,d.mdx)("inlineCode",{parentName:"p"},"OnCreate()")," function:"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"protected override void OnCreate(Bundle savedInstanceState)\n{\n  base.OnCreate(savedInstanceState);\n  global::Xamarin.Forms.Forms.Init(this, savedInstanceState);\n  LoadApplication(new App());\n\n  ACPIdentity.RegisterExtension();\n\n  // start core\n  ACPCore.Start(new CoreStartCompletionCallback());\n}\n")),(0,d.mdx)(m,{platform:"android",api:"set-advertising-identifier",repeat:"8",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"java-6"},"Java"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},"public static void setAdvertisingIdentifier(final String advertisingIdentifier);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"advertisingIdentifier")," is a string that provides developers with a simple, standard system to track the Ads through their apps.     ")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("p",null,"This is just an implementation example. For more information about advertising identifiers and how to handle them correctly in your mobile application, see ",(0,d.mdx)("a",{parentName:"p",href:"https://developers.google.com/android/reference/com/google/android/gms/ads/identifier/AdvertisingIdClient"},"Google Play Services documentation about AdvertisingIdClient"),"."),(0,d.mdx)("p",null,"This example requires Google Play Services to be configured in your mobile application. For instructions on how to import the Google Mobile Ads SDK and how to configure your ApplicationManifest.xml file, see ",(0,d.mdx)("a",{parentName:"p",href:"https://developers.google.com/admob/android/quick-start"},"Google Mobile Ads SDK setup"),"."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},'...\n@Override\npublic void onResume() {\n    super.onResume();\n    ...\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            String advertisingIdentifier = null;\n\n            try {\n                AdvertisingIdClient.Info adInfo = AdvertisingIdClient.getAdvertisingIdInfo(getApplicationContext());\n                if (adInfo != null) {\n                    if (!adInfo.isLimitAdTrackingEnabled()) {\n                        advertisingIdentifier = adInfo.getId();\n                    } else {\n                        MobileCore.log(LoggingMode.DEBUG, "ExampleActivity", "Limit Ad Tracking is enabled by the user, cannot process the advertising identifier");\n                    }\n                }\n\n            } catch (IOException e) {\n                // Unrecoverable error connecting to Google Play services (e.g.,\n                // the old version of the service doesn\'t support getting AdvertisingId).\n                MobileCore.log(LoggingMode.DEBUG, "ExampleActivity", "IOException while retrieving the advertising identifier " + e.getLocalizedMessage());\n            } catch (GooglePlayServicesNotAvailableException e) {\n                // Google Play services is not available entirely.\n                MobileCore.log(LoggingMode.DEBUG, "ExampleActivity", "GooglePlayServicesNotAvailableException while retrieving the advertising identifier " + e.getLocalizedMessage());\n            } catch (GooglePlayServicesRepairableException e) {\n                // Google Play services is not installed, up-to-date, or enabled.\n                MobileCore.log(LoggingMode.DEBUG, "ExampleActivity", "GooglePlayServicesRepairableException while retrieving the advertising identifier " + e.getLocalizedMessage());\n            }\n\n            MobileCore.setAdvertisingIdentifier(advertisingIdentifier);\n        }\n    }).start();\n}\n')),(0,d.mdx)(m,{platform:"ios-aep",api:"set-advertising-identifier",repeat:"13",mdxType:"Variant"}),(0,d.mdx)("p",null,"To access IDFA and handle it correctly in your mobile application, see the ",(0,d.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/adsupport/asidentifiermanager"},"Apple developer documentation about IDFA")),(0,d.mdx)("p",null,"Starting iOS 14+, applications must use the ",(0,d.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/apptrackingtransparency"},"App Tracking Transparency")," framework to request user authorization before using the Identifier for Advertising (IDFA)."),(0,d.mdx)("h4",{id:"swift-12"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(setAdvertisingIdentifier:)\npublic static func setAdvertisingIdentifier(_ identifier: String?)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"identifier")," is a string that provides developers with a simple, standard system to continue to track the Ads through their apps.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},'import AdSupport\nimport AppTrackingTransparency\n...\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    ...\n    if #available(iOS 14, *) {\n       setAdvertisingIdentiferUsingTrackingManager()\n    } else {\n       // Fallback on earlier versions\n       setAdvertisingIdentifierUsingIdentifierManager()\n    }\n\n}\n\nfunc setAdvertisingIdentifierUsingIdentifierManager() {\n    var idfa:String = "";\n        if (ASIdentifierManager.shared().isAdvertisingTrackingEnabled) {\n            idfa = ASIdentifierManager.shared().advertisingIdentifier.uuidString;\n        } else {\n            Log.debug(label: "AppDelegateExample",\n                      "Advertising Tracking is disabled by the user, cannot process the advertising identifier.");\n        }\n        MobileCore.setAdvertisingIdentifier(idfa);\n}\n\n@available(iOS 14, *)\nfunc setAdvertisingIdentiferUsingTrackingManager() {\n    ATTrackingManager.requestTrackingAuthorization { (status) in\n        var idfa: String = "";\n\n        switch (status) {\n        case .authorized:\n            idfa = ASIdentifierManager.shared().advertisingIdentifier.uuidString\n        case .denied:\n            Log.debug(label: "AppDelegateExample",\n                      "Advertising Tracking is denied by the user, cannot process the advertising identifier.")\n        case .notDetermined:\n            Log.debug(label: "AppDelegateExample",\n                      "Advertising Tracking is not determined, cannot process the advertising identifier.")\n        case .restricted:\n            Log.debug(label: "AppDelegateExample",\n                      "Advertising Tracking is restricted by the user, cannot process the advertising identifier.")\n        }\n\n        MobileCore.setAdvertisingIdentifier(idfa)\n    }\n}\n')),(0,d.mdx)("h4",{id:"objective-c-12"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) setAdvertisingIdentifier: (NSString * _Nullable identifier);\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},'#import <AdSupport/ASIdentifierManager.h>\n#import <AppTrackingTransparency/ATTrackingManager.h>\n...\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n-   ...\n-   \n    if (@available(iOS 14, *)) {\n        [self setAdvertisingIdentiferUsingTrackingManager];\n    } else {\n        // fallback to earlier versions\n        [self setAdvertisingIdentifierUsingIdentifierManager];\n    }\n\n}\n\n- (void) setAdvertisingIdentifierUsingIdentifierManager {\n    // setup the advertising identifier\n    NSString *idfa = nil;\n    if ([[ASIdentifierManager sharedManager] isAdvertisingTrackingEnabled]) {\n        idfa = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];\n    } else {\n        [AEPLog debugWithLabel:@"AppDelegateExample"\n                       message:@"Advertising Tracking is disabled by the user, cannot process the advertising identifier"];\n    }\n    [AEPMobileCore setAdvertisingIdentifier:idfa];\n\n}\n\n- (void) setAdvertisingIdentiferUsingTrackingManager API_AVAILABLE(ios(14)) {\n    [ATTrackingManager requestTrackingAuthorizationWithCompletionHandler:\n    ^(ATTrackingManagerAuthorizationStatus status){\n        NSString *idfa = nil;\n        switch(status) {\n            case ATTrackingManagerAuthorizationStatusAuthorized:\n                idfa = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];\n                break;\n            case ATTrackingManagerAuthorizationStatusDenied:\n                [AEPLog debugWithLabel:@"AppDelegateExample"\n                               message:@"Advertising Tracking is denied by the user, cannot process the advertising identifier"];\n                break;\n            case ATTrackingManagerAuthorizationStatusNotDetermined:\n                [AEPLog debugWithLabel:@"AppDelegateExample"\n                               message:@"Advertising Tracking is not determined, cannot process the advertising identifier"];\n                break;\n            case ATTrackingManagerAuthorizationStatusRestricted:\n                [AEPLog debugWithLabel:@"AppDelegateExample"\n                               message:@"Advertising Tracking is restricted by the user, cannot process the advertising identifier"];\n                break;\n        }\n\n        [AEPMobileCore setAdvertisingIdentifier:idfa];\n    }];\n}\n')),(0,d.mdx)(m,{platform:"ios-acp",api:"set-advertising-identifier",repeat:"13",mdxType:"Variant"}),(0,d.mdx)("p",null,"To access IDFA and handle it correctly in your mobile application, see ",(0,d.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/adsupport/asidentifiermanager"},"Apple developer documentation about IDFA")),(0,d.mdx)("p",null,"Starting iOS 14+, applications must use the ",(0,d.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/apptrackingtransparency"},"App Tracking Transparency")," framework to request user authorization before using the Identifier for Advertising (IDFA)."),(0,d.mdx)("h4",{id:"swift-13"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"static func setAdvertisingIdentifier(adId: String?)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"adId")," is a string that provides developers with a simple, standard system to continue to track the Ads through their apps.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},'import AdSupport\nimport AppTrackingTransparency\n...\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    ...\n    if #available(iOS 14, *) {\n       setAdvertisingIdentiferUsingTrackingManager()\n    } else {\n       // Fallback on earlier versions\n       setAdvertisingIdentifierUsingIdentifierManager()\n    }\n\n}\n\nfunc setAdvertisingIdentifierUsingIdentifierManager() {\n    var idfa:String = "";\n        if (ASIdentifierManager.shared().isAdvertisingTrackingEnabled) {\n            idfa = ASIdentifierManager.shared().advertisingIdentifier.uuidString;\n        } else {\n            ACPCore.log(ACPMobileLogLevel.debug,\n                        tag: "AppDelegateExample",\n                        message: "Advertising Tracking is disabled by the user, cannot process the advertising identifier.");\n        }\n        ACPCore.setAdvertisingIdentifier(idfa);\n}\n\n@available(iOS 14, *)\nfunc setAdvertisingIdentiferUsingTrackingManager() {\n    ATTrackingManager.requestTrackingAuthorization { (status) in\n        var idfa: String = "";\n\n        switch (status) {\n        case .authorized:\n            idfa = ASIdentifierManager.shared().advertisingIdentifier.uuidString\n        case .denied:\n            ACPCore.log(.debug,\n                        tag: "AppDelegateExample",\n                        message: "Advertising Tracking is denied by the user, cannot process the advertising identifier.")\n        case .notDetermined:\n            ACPCore.log(.debug,\n                        tag: "AppDelegateExample",\n                        message: "Advertising Tracking is not determined, cannot process the advertising identifier.")\n        case .restricted:\n            ACPCore.log(.debug,\n                        tag: "AppDelegateExample",\n                        message: "Advertising Tracking is restricted by the user, cannot process the advertising identifier.")\n        }\n\n        ACPCore.setAdvertisingIdentifier(idfa)\n    }\n}\n')),(0,d.mdx)("h4",{id:"objective-c-13"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) setAdvertisingIdentifier: (nullable NSString*) adId;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},'#import <AdSupport/ASIdentifierManager.h>\n#import <AppTrackingTransparency/ATTrackingManager.h>\n...\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n-   ...\n-   \n    if (@available(iOS 14, *)) {\n        [self setAdvertisingIdentiferUsingTrackingManager];\n    } else {\n        // fallback to earlier versions\n        [self setAdvertisingIdentifierUsingIdentifierManager];\n    }\n\n}\n\n- (void) setAdvertisingIdentifierUsingIdentifierManager {\n    // setup the advertising identifier\n    NSString *idfa = nil;\n    if ([[ASIdentifierManager sharedManager] isAdvertisingTrackingEnabled]) {\n        idfa = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];\n    } else {\n        [ACPCore log:ACPMobileLogLevelDebug\n                 tag:@"AppDelegateExample"\n             message:@"Advertising Tracking is disabled by the user, cannot process the advertising identifier"];\n    }\n    [ACPCore setAdvertisingIdentifier:idfa];\n\n}\n\n- (void) setAdvertisingIdentiferUsingTrackingManager API_AVAILABLE(ios(14)) {\n    [ATTrackingManager requestTrackingAuthorizationWithCompletionHandler:\n    ^(ATTrackingManagerAuthorizationStatus status){\n        NSString *idfa = nil;\n        switch(status) {\n            case ATTrackingManagerAuthorizationStatusAuthorized:\n                idfa = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];\n                break;\n            case ATTrackingManagerAuthorizationStatusDenied:\n                [ACPCore log:ACPMobileLogLevelDebug\n                         tag:@"AppDelegateExample"\n                     message:@"Advertising Tracking is denied by the user, cannot process the advertising identifier"];\n                break;\n            case ATTrackingManagerAuthorizationStatusNotDetermined:\n                [ACPCore log:ACPMobileLogLevelDebug\n                         tag:@"AppDelegateExample"\n                     message:@"Advertising Tracking is not determined, cannot process the advertising identifier"];\n                break;\n            case ATTrackingManagerAuthorizationStatusRestricted:\n                [ACPCore log:ACPMobileLogLevelDebug\n                         tag:@"AppDelegateExample"\n                     message:@"Advertising Tracking is restricted by the user, cannot process the advertising identifier"];\n                break;\n        }\n\n        [ACPCore setAdvertisingIdentifier:idfa];\n    }];\n}\n')),(0,d.mdx)(m,{platform:"react-native",api:"set-advertising-identifier",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"javascript-6"},"JavaScript"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"setAdvertisingIdentifier(advertisingIdentifier?: String);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"adID")," is a string that provides developers with a simple, standard system to continue to track the Ads through their apps.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPCore.setAdvertisingIdentifier("ADVTID");\n')),(0,d.mdx)(m,{platform:"flutter",api:"set-advertising-identifier",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"dart-6"},"Dart"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-dart"},"Future<void> setAdvertisingIdentifier (String aid);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"aid")," is a string that provides developers with a simple, standard system to continue to track the Ads through their apps.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-dart"},'FlutterACPCore.setAdvertisingIdentifier("ADVTID");\n')),(0,d.mdx)(m,{platform:"cordova",api:"set-advertising-identifier",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"cordova-6"},"Cordova"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"ACPCore.setAdvertisingIdentifier(identifier, success, fail);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"identifier")," ",(0,d.mdx)("em",{parentName:"li"},"(String)")," provides developers with a simple, standard system to continue to track the Ads through their apps."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"success")," is a callback containing a general success message if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"setAdvertisingIdentifier")," API executed without any errors."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"fail")," is a callback containing error information if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"setAdvertisingIdentifier")," API was executed with errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPCore.setAdvertisingIdentifier("ADVTID", function (handleCallback) {\n  console.log("AdobeExperienceSDK: Advertising identifier successfully set.");\n}, function (handleError) {\n  console.log("AdobeExperenceSDK: Failed to set advertising identifier : " + handleError);\n});\n')),(0,d.mdx)(m,{platform:"unity",api:"set-advertising-identifier",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-12"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void SetAdvertisingIdentifier(string adId)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"adId")," ",(0,d.mdx)("em",{parentName:"li"},"(String)")," provides developers with a simple, standard system to continue to track the Ads through their apps.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPCore.SetAdvertisingIdentifier("ADVTID");\n')),(0,d.mdx)(m,{platform:"xamarin",api:"set-advertising-identifier",repeat:"9",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-13"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"iOS syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void SetAdvertisingIdentifier (string adId);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"adId")," ",(0,d.mdx)("em",{parentName:"li"},"(String)")," provides developers with a simple, standard system to continue to track the Ads through their apps.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Android syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void SetAdvertisingIdentifier (string advertisingIdentifier);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"advertisingIdentifier")," ",(0,d.mdx)("em",{parentName:"li"},"(String)")," provides developers with a simple, standard system to continue to track the Ads through their apps.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPCore.SetAdvertisingIdentifier("ADVTID");\n')),(0,d.mdx)(m,{platform:"android",api:"set-push-identifier",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"java-7"},"Java"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},"public static void setPushIdentifier(final String pushIdentifier);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"pushIdentifier"),"  is a string that contains the device token for push notifications.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},"//Retrieve the token from either GCM or FCM, and pass it to the SDK\nMobileCore.setPushIdentifier(token);\n")),(0,d.mdx)(m,{platform:"ios-aep",api:"set-push-identifier",repeat:"11",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"swift-14"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(setPushIdentifier:)\npublic static func setPushIdentifier(_ deviceToken: Data?)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"deviceToken"),"  is a string that contains the device token for push notifications.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"// Set the deviceToken that the APNs has assigned to the device\nMobileCore.setPushIdentifier(deviceToken)\n")),(0,d.mdx)("h4",{id:"objective-c-14"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) setPushIdentifier: (NSString * _Nullable deviceToken);\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"// Set the deviceToken that the APNS has assigned to the device\n[AEPMobileCore setPushIdentifier:deviceToken];\n")),(0,d.mdx)(m,{platform:"ios-acp",api:"set-push-identifier",repeat:"11",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"swift-15"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"static func setPushIdentifier(deviceToken: NSData?)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"deviceToken"),"  is a string that contains the device token for push notifications.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"// Set the deviceToken that the APNs has assigned to the device\nACPCore.setPushIdentifier(deviceToken)\n")),(0,d.mdx)("h4",{id:"objective-c-15"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) setPushIdentifier: (nullable NSData*) deviceToken;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"// Set the deviceToken that the APNS has assigned to the device\n[ACPCore setPushIdentifier:deviceToken];\n")),(0,d.mdx)(m,{platform:"react-native",api:"set-push-identifier",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"javascript-7"},"JavaScript"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"ACPCore.setPushIdentifier(pushIdentifier);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"pushIdentifier")," is a string that contains the device token for push notifications.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPCore.setPushIdentifier("pushID");\n')),(0,d.mdx)(m,{platform:"android",api:"sync-identifier",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"java-8"},"Java"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},"public static void syncIdentifier(final String identifierType,\n                                  final String identifier,\n                                  final VisitorID.AuthenticationState authenticationState);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"identifierType (String)")," contains the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", and this parameter should not be null or empty. The allowed characters are ","[A-Za-z0-9_.]"),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"identifier (String)")," contains the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier value"),", and this parameter should not be null or empty."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"authenticationState (AuthenticationState)")," indicates the authentication state of the user and contains one of the ",(0,d.mdx)("a",{parentName:"li",href:"#public-classes"},"VisitorID.AuthenticationState")," values.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},'Identity.syncIdentifier("idType",\n                        "idValue",\n                        VisitorID.AuthenticationState.AUTHENTICATED);\n')),(0,d.mdx)(m,{platform:"ios-aep",api:"sync-identifier",repeat:"11",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"swift-16"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(syncIdentifierWithType:identifier:authenticationState:)\nstatic func syncIdentifier(identifierType: String, identifier: String, authenticationState: MobileVisitorAuthenticationState)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifierType (String)")," contains the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", and this parameter should not be null or empty. The allowed characters are ","[A-Za-z0-9_.]"),(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifier (String)")," contains the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," value, and this parameter should not be null or empty. If either the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifierType")," or ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," contains a null or an empty string, the identifier is ignored by the Identity extension."),(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"authenticationState (MobileVisitorAuthenticationState)")," value indicates the authentication state for the user and contains one of the ",(0,d.mdx)("a",{parentName:"li",href:"#public-classes"},"MobileVisitorAuthenticationState")," values.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},'Identity.syncIdentifier(identifierType: "idType",\n                            identifier: "idValue",\n                        authentication: .unknown)\n')),(0,d.mdx)("h4",{id:"objective-c-16"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) syncIdentifierWithType: (NSString * _Nonnull identifierType)\n                                         identifier: (NSString * _Nonnull identifier)\n                                 authentication: (enum AEPAuthenticationState authenticationState);\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[AEPMobileIdentity syncIdentifierWithType:@"idType"\n                               identifier:@"idValue"\n                      authenticationState:AEPMobileVisitorAuthStateUnknown];\n')),(0,d.mdx)(m,{platform:"ios-acp",api:"sync-identifier",repeat:"11",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"swift-17"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"static func syncIdentifier(_ identifierType: String, identifier: String, authentication authenticationState: ACPMobileVisitorAuthenticationState)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifierType (String)")," contains the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", and this parameter should not be null or empty. The allowed characters are ","[A-Za-z0-9_.]"),(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifier (String)")," contains the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," value, and this parameter should not be null or empty. If either the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," or ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," contains a null or an empty string, the identifier is ignored by the Identity extension."),(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"authenticationState (ACPMobileVisitorAuthenticationState)")," value indicates the authentication state for the user and contains one of the ",(0,d.mdx)("a",{parentName:"li",href:"#public-classes"},"ACPMobileVisitorAuthenticationState")," values.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},'ACPIdentity.syncIdentifier("idType", identifier: "idValue", authentication: ACPMobileVisitorAuthenticationState.unknown)\n')),(0,d.mdx)("h4",{id:"objective-c-17"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) syncIdentifier: (nonnull NSString*) identifierType             \n             identifier: (nonnull NSString*) identifier\n         authentication: (ADBMobileVisitorAuthenticationState) authenticationState;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[ACPIdentity syncIdentifier:@"idType" identifier:@"idValue" authentication:ACPMobileVisitorAuthenticationStateUnknown];\n')),(0,d.mdx)(m,{platform:"react-native",api:"sync-identifier",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"javascript-8"},"JavaScript"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"syncIdentifier(identifierType: String, identifier: String, authenticationState: string);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifierType (String)")," contains the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", and this parameter should not be null or empty. The allowed characters are ","[A-Za-z0-9_.]"),(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifier (String)")," contains the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," value, and this parameter should not be null or empty. If either the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," or ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," contains a null or an empty string, the identifier is ignored by the Identity extension."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"authenticationState (ACPMobileVisitorAuthenticationState)")," value indicating authentication state for the user and contains one of the following ",(0,d.mdx)("a",{parentName:"li",href:"#public-classes"},"ACPMobileVisitorAuthenticationState")," values.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'import {ACPMobileVisitorAuthenticationState} from \'@adobe/react-native-acpcore\';\n\nACPIdentity.syncIdentifier("identifierType", "identifier", ACPMobileVisitorAuthenticationState.AUTHENTICATED);\n')),(0,d.mdx)(m,{platform:"flutter",api:"sync-identifier",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"dart-7"},"Dart"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-dart"},"Future<void> syncIdentifier(String identifierType, String identifier, ACPMobileVisitorAuthenticationState authState);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifierType (String)")," contains the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", and this parameter should not be null or empty. The allowed characters are ","[A-Za-z0-9_.]"),(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifier (String)")," contains the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," value, and this parameter should not be null or empty. If either the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," or ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," contains a null or an empty string, the identifier is ignored by the Identity extension."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"authState (ACPMobileVisitorAuthenticationState")," value indicating authentication state for the user and contains one of the following ",(0,d.mdx)("a",{parentName:"li",href:"#public-classes"},"ACPMobileVisitorAuthenticationState")," values.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-dart"},'import \'package:flutter_acpcore/src/acpmobile_visitor_id.dart\';\n\nFlutterACPIdentity.syncIdentifier("identifierType", "identifier", ACPMobileVisitorAuthenticationState.AUTHENTICATED);\n')),(0,d.mdx)(m,{platform:"cordova",api:"sync-identifier",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"cordova-7"},"Cordova"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"ACPIdentity.syncIdentifier = function(identifierType, identifier, authState, success, fail);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifierType (String)")," contains the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", and this parameter should not be null or empty. The allowed characters are ","[A-Za-z0-9_.]"),(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifier (String)")," contains the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," value, and this parameter should not be null or empty. If either the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," or ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," contains a null or an empty string, the identifier is ignored by the Identity extension."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"authState (ACPMobileVisitorAuthenticationState)")," value indicating authentication state for the user and contains one of the following ",(0,d.mdx)("a",{parentName:"li",href:"#public-classes"},"ACPMobileVisitorAuthenticationState")," values."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"success")," is a callback containing the visitor id type, value, and authentication state if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"syncIdentifier")," API executed without any errors."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"fail")," is a callback containing error information if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"syncIdentifier")," API was executed with errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPIdentity.syncIdentifier("id1", "value1", ACPIdentity.ACPMobileVisitorAuthenticationStateUnknown, function (handleCallback) {\n  console.log("AdobeExperenceSDK: Identifier synced successfully : " + handleCallback);\n}, function (handleError) {\n  console.log("AdobeExperenceSDK: Failed to sync identifier : " + handleError);\n});\n')),(0,d.mdx)(m,{platform:"unity",api:"sync-identifier",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-14"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void SyncIdentifier(string identifierType, string identifier, ACPAuthenticationState authState)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifierType (String)")," contains the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", and this parameter should not be null or empty. The allowed characters are ","[A-Za-z0-9_.]"),(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifier (String)")," contains the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," value, and this parameter should not be null or empty. If either the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," or ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," contains a null or an empty string, the identifier is ignored by the Identity extension."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"authState (ACPAuthenticationState)")," value indicating authentication state for the user and contains one of the following ",(0,d.mdx)("a",{parentName:"li",href:"#public-classes"},"ACPAuthenticationState")," values.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPIdentity.SyncIdentifier("idType1", "idValue1", ACPIdentity.ACPAuthenticationState.AUTHENTICATED);\n')),(0,d.mdx)(m,{platform:"xamarin",api:"sync-identifier",repeat:"11",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-15"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"iOS syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void SyncIdentifier (string identifierType, string identifier, ACPMobileVisitorAuthenticationState authenticationState);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifierType (String)")," contains the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", and this parameter should not be null or empty. The allowed characters are ","[A-Za-z0-9_.]"),(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifier (String)")," contains the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," value, and this parameter should not be null or empty. If either the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," or ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," contains a null or an empty string, the identifier is ignored by the Identity extension."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"authenticationState (ACPMobileVisitorAuthenticationState")," value indicating authentication state for the user and contains one of the following ",(0,d.mdx)("a",{parentName:"li",href:"#public-classes"},"ACPMobileVisitorAuthenticationState")," values.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Android syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void SyncIdentifier (string identifierType, string identifier, VisitorID.AuthenticationState authenticationState);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifierType (String)")," contains the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", and this parameter should not be null or empty. The allowed characters are ","[A-Za-z0-9_.]"),(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifier (String)")," contains the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," value, and this parameter should not be null or empty. If either the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," or ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," contains a null or an empty string, the identifier is ignored by the Identity extension."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"authenticationState (AuthenticationState)")," value indicating authentication state for the user and contains one of the following ",(0,d.mdx)("a",{parentName:"li",href:"#public-classes"},"VisitorID.AuthenticationState")," values.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"iOS example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPIdentity.SyncIdentifier("idType1", "idValue1", ACPMobileVisitorAuthenticationState.Authenticated);\n')),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Android example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPIdentity.SyncIdentifier("idType1", "idValue1", VisitorID.AuthenticationState.Authenticated);\n')),(0,d.mdx)(m,{platform:"android",api:"sync-identifiers",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"java-9"},"Java"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},"public static void syncIdentifiers(final Map<String, String> identifiers);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"identifiers")," is a map that contains the identifiers with the Identifier type as the key, and the string identifier as the value. In each identifier pair, if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," contains a null or an empty string, the identifier is ignored by the Identity extension.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},'Map<String, String> identifiers = new HashMap<String, String>();\nidentifiers.put("idType1", "idValue1");\nidentifiers.put("idType2", "idValue2");\nidentifiers.put("idType3", "idValue3");\nIdentity.syncIdentifiers(identifiers);\n')),(0,d.mdx)(m,{platform:"ios-aep",api:"sync-identifiers",repeat:"11",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"swift-18"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(syncIdentifiers:)\nstatic func syncIdentifiers(identifiers: [String: String]?)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifiers")," dictionary contains identifier type as the key and identifier as the value, both identifier type and identifier should be non empty and non nil values.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},'let ids : [String: String] = ["idType1":"idValue1",\n                              "idType2":"idValue2",\n                              "idType3":"idValue3"];\nIdentity.syncIdentifiers(identifiers: ids)\n')),(0,d.mdx)("h4",{id:"objective-c-18"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) syncIdentifiers: (NSDictionary<NSString *, NSString *> * _Nullable identifiers);\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSDictionary *ids = @{@"idType1":@"idValue1",\n                      @"idType2":@"idValue2",\n                      @"idType3":@"idValue3"};\n[AEPMobileIdentity syncIdentifiers:ids];\n')),(0,d.mdx)(m,{platform:"ios-acp",api:"sync-identifiers",repeat:"11",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"swift-19"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"static func syncIdentifiers(_ identifiers: [AnyHashable : Any]?)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifiers")," dictionary contains identifiers, and each identifier contains an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," as the key and an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," as the value. If any of the identifier pairs contains an empty or null value as the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", then it will be ignored.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},'let identifiers : [String: String] = ["idType1":"idValue1",\n                                      "idType2":"idValue2",\n                                      "idType3":"idValue3"];\nACPIdentity.syncIdentifiers(identifiers)\n')),(0,d.mdx)("h4",{id:"objective-c-19"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) syncIdentifiers: (nullable NSDictionary*) identifiers;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSDictionary *ids = @{@"idType1":@"idValue1",\n                      @"idType2":@"idValue2",\n                      @"idType3":@"idValue3"};\n[ACPIdentity syncIdentifiers:ids];\n')),(0,d.mdx)(m,{platform:"react-native",api:"sync-identifiers",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"javascript-9"},"JavaScript"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"syncIdentifiers(identifiers?: {string: string});\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifiers")," dictionary contains identifiers, and each identifier contains an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," as the key and an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," as the value. If any of the identifier pairs contains an empty or null value as the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", then it will be ignored.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPIdentity.syncIdentifiers({"id1": "identifier1"});\n')),(0,d.mdx)(m,{platform:"flutter",api:"sync-identifiers",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"dart-8"},"Dart"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-dart"},"Future<void> syncIdentifiers (Map<String, String> identifiers);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifiers")," dictionary contains identifiers, and each identifier contains an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," as the key and an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," as the value. If any of the identifier pairs contains an empty or null value as the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", then it will be ignored.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'FlutterACPIdentity.syncIdentifiers({"idType1":"idValue1",\n                                    "idType2":"idValue2",\n                                    "idType3":"idValue3"});\n')),(0,d.mdx)(m,{platform:"cordova",api:"sync-identifiers",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"cordova-8"},"Cordova"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"ACPIdentity.syncIdentifiers = function(identifiers, success, fail);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifiers")," dictionary contains identifiers, and each identifier contains an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," as the key and an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," as the value. If any of the identifier pairs contains an empty or null value as the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", then it will be ignored."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"success")," is a callback containing the synced identifiers if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"syncIdentifiers")," API executed without any errors."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"fail")," is a callback containing error information if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"syncIdentifiers")," API was executed with errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPIdentity.syncIdentifiers({"idType1":"idValue1", "idType2":"idValue2", "idType3":"idValue3"}, function (handleCallback) {\n  console.log("AdobeExperienceSDK: " + handleCallback)\n}, function (handleError) {\n  console.log("AdobeExperenceSDK: Failed to sync identifiers : " + handleError)\n});\n')),(0,d.mdx)(m,{platform:"unity",api:"sync-identifiers",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-16"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void SyncIdentifiers(Dictionary<string, string> identifiers)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifiers")," dictionary contains identifiers, and each identifier contains an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," as the key and an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," as the value. If any of the identifier pairs contains an empty or null value as the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", then it will be ignored.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'Dictionary<string, string> ids = new Dictionary<string, string>();\nids.Add("idsType1", "idValue1");\nids.Add("idsType2", "idValue2");\nids.Add("idsType3", "idValue3");\nACPIdentity.SyncIdentifiers(ids);\n')),(0,d.mdx)(m,{platform:"xamarin",api:"sync-identifiers",repeat:"11",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-17"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"iOS syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void SyncIdentifiers (NSDictionary identifiers);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifiers")," dictionary contains identifiers, and each identifier contains an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," as the key and an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," as the value. If any of the identifier pairs contains an empty or null value as the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", then it will be ignored.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Android syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void SyncIdentifiers (IDictionary<string, string> identifiers);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifiers")," dictionary contains identifiers, and each identifier contains an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," as the key and an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," as the value. If any of the identifier pairs contains an empty or null value as the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", then it will be ignored.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"iOS example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'var ids = new NSMutableDictionary<NSString, NSObject>\n{\n  ["idsType1"] = new NSString("idValue1"),\n  ["idsType2"] = new NSString("idValue2"),\n  ["idsType3"] = new NSString("idValue3")\n};\nACPIdentity.SyncIdentifiers(ids);\n')),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Android example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'var ids = new Dictionary<string, string>();\nids.Add("idsType1", "idValue1");\nids.Add("idsType2", "idValue2");\nids.Add("idsType3", "idValue3");\nACPIdentity.SyncIdentifiers(ids);\n')),(0,d.mdx)(m,{platform:"android",api:"sync-identifiers-overloaded",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"java-10"},"Java"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},"public static void syncIdentifiers(final Map<String, String> identifiers, final VisitorID.AuthenticationState authState)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"identifiers")," is a map that contains IDs with the identifier type as the key, and the string identifier as the value."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"authState")," indicates the authentication state for the user, which contains one of the following ",(0,d.mdx)("a",{parentName:"li",href:"#public-classes"},"VisitorID.AuthenticationState")," values.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},'Map<String, String> identifiers = new HashMap<String, String>();\nidentifiers.put("idType1", "idValue1");\nidentifiers.put("idType2", "idValue2");\nidentifiers.put("idType3", "idValue3");\nIdentity.syncIdentifiers(identifiers, VisitorID.AuthenticationState.AUTHENTICATED);\n')),(0,d.mdx)(m,{platform:"ios-aep",api:"sync-identifiers-overloaded",repeat:"11",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"swift-20"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(syncIdentifiers:authenticationState:)\nstatic func syncIdentifiers(identifiers: [String: String]?, authenticationState: MobileVisitorAuthenticationState)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifiers")," dictionary contains identifier type as the key and identifier as the value, both identifier type and identifier should be non empty and non nil values."),(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"authenticationState (MobileVisitorAuthenticationState)")," indicates the authentication state of the user and contains one of the ",(0,d.mdx)("a",{parentName:"li",href:"#public-classes"},"MobileVisitorAuthenticationState")," values.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},'let ids : [String: String] = ["idType1":"idValue1",\n                              "idType2":"idValue2",\n                              "idType3":"idValue3"];\nIdentity.syncIdentifiers(identifiers: ids, authenticationState: .authenticated)\n')),(0,d.mdx)("h4",{id:"objective-c-20"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) syncIdentifiers: (NSDictionary<NSString *, NSString *> * _Nullable identifiers)\n                  authentication: (enum AEPAuthenticationState authenticationState);\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSDictionary *ids = @{@"idType1":@"idValue1",\n                      @"idType2":@"idValue2",\n                      @"idType3":@"idValue3"};\n[AEPMobileIdentity syncIdentifiers:ids authenticationState:AEPMobileVisitorAuthStateAuthenticated];\n')),(0,d.mdx)(m,{platform:"ios-acp",api:"sync-identifiers-overloaded",repeat:"11",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"swift-21"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"static func syncIdentifiers(_ identifiers: [AnyHashable : Any]?, authentication authenticationState: ACPMobileVisitorAuthenticationState)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifiers")," dictionary contains identifiers, and each identifier contains an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," as the key and an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," as the value. If any of the identifier pairs contains an empty or null value as the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", then it will be ignored."),(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"authenticationState (ACPMobileVisitorAuthenticationState)")," indicates the authentication state of the user and contains one of the ",(0,d.mdx)("a",{parentName:"li",href:"#public-classes"},"ACPMobileVisitorAuthenticationState")," values.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},'let ids : [String: String] = ["idType1":"idValue1",\n                              "idType2":"idValue2",\n                              "idType3":"idValue3"];\nACPIdentity.syncIdentifiers(identifiers, authentication:\nACPMobileVisitorAuthenticationState.authenticated)\n')),(0,d.mdx)("h4",{id:"objective-c-21"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) syncIdentifiers: (nullable NSDictionary*) identifiers authentication: (ACPMobileVisitorAuthenticationState) authenticationState;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSDictionary *ids = @{@"idType1":@"idValue1",\n                      @"idType2":@"idValue2",\n                      @"idType3":@"idValue3"};\n[ACPIdentity syncIdentifiers:ids authentication:ACPMobileVisitorAuthenticationStateAuthenticated];\n')),(0,d.mdx)(m,{platform:"react-native",api:"sync-identifiers-overloaded",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"javascript-10"},"JavaScript"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"syncIdentifiersWithAuthState(identifiers?: {string: string}, authenticationState: string);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifiers")," dictionary contains identifiers, and each identifier contains an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," as the key and an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," as the value. If any of the identifier pairs contains an empty or null value as the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", then it will be ignored."),(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"authenticationState (ACPMobileVisitorAuthenticationState)")," indicates the authentication state of the user and contains one of the ",(0,d.mdx)("a",{parentName:"li",href:"#public-classes"},"ACPMobileVisitorAuthenticationState")," values.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'import {ACPMobileVisitorAuthenticationState} from \'@adobe/react-native-acpcore\';\n\nACPIdentity.syncIdentifiersWithAuthState({"id1": "identifier1"}, ACPMobileVisitorAuthenticationState.UNKNOWN);\n')),(0,d.mdx)(m,{platform:"flutter",api:"sync-identifiers-overloaded",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"dart-9"},"Dart"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-dart"},"Future<void> syncIdentifiersWithAuthState (Map<String, String> identifiers, ACPMobileVisitorAuthenticationState authState);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifiers")," dictionary contains identifiers, and each identifier contains an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," as the key and an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," as the value. If any of the identifier pairs contains an empty or null value as the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", then it will be ignored."),(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"authState (ACPMobileVisitorAuthenticationState)")," indicates the authentication state of the user and contains one of the ",(0,d.mdx)("a",{parentName:"li",href:"#public-classes"},"ACPMobileVisitorAuthenticationState")," values.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-dart"},'import \'package:flutter_acpcore/src/acpmobile_visitor_id.dart\';\n\nFlutterACPIdentity.syncIdentifiersWithAuthState({"idType1":"idValue1", "idType2":"idValue2", "idType3":"idValue3"}, ACPMobileVisitorAuthenticationState.UNKNOWN);\n')),(0,d.mdx)(m,{platform:"cordova",api:"sync-identifiers-overloaded",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"cordova-9"},"Cordova"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"ACPIdentity.syncIdentifiers = function(identifiers, authState, success, fail);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifiers")," dictionary contains identifiers, and each identifier contains an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," as the key and an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," as the value. If any of the identifier pairs contains an empty or null value as the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", then it will be ignored."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"authState")," value indicating authentication state for the identifiers to be synced and contains one of the ",(0,d.mdx)("a",{parentName:"li",href:"#public-classes"},"ACPMobileVisitorAuthenticationState")," values."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"success")," is a callback containing the synced identifiers if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"syncIdentifiers")," API executed without any errors."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"fail")," is a callback containing error information if the ",(0,d.mdx)("inlineCode",{parentName:"li"},"syncIdentifiers")," API was executed with errors.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPIdentity.syncIdentifiers({"idType1":"idValue1", "idType2":"idValue2", "idType3":"idValue3"}, ACPIdentity.ACPMobileVisitorAuthenticationStateAuthenticated, function (handleCallback) {\n  console.log("AdobeExperienceSDK: " + handleCallback)\n}, function (handleError) {\n  console.log("AdobeExperenceSDK: Failed to sync identifiers : " + handleError)\n});\n')),(0,d.mdx)(m,{platform:"unity",api:"sync-identifiers-overloaded",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-18"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void SyncIdentifiers(Dictionary<string, string> ids, ACPAuthenticationState authenticationState)\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"ids")," dictionary contains identifiers, and each identifier contains an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," as the key and an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," as the value. If any of the identifier pairs contains an empty or null value as the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", then it will be ignored."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"authenticationState")," value indicating authentication state for the identifiers to be synced and contains one of the ",(0,d.mdx)("a",{parentName:"li",href:"#public-classes"},"ACPAuthenticationState")," values.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'Dictionary<string, string> ids = new Dictionary<string, string>();\nids.Add("idsType1", "idValue1");\nids.Add("idsType2", "idValue2");\nids.Add("idsType3", "idValue3");\nACPIdentity.SyncIdentifiers(ids, ACPIdentity.ACPAuthenticationState.AUTHENTICATED);\nACPIdentity.SyncIdentifiers(ids, ACPIdentity.ACPAuthenticationState.LOGGED_OUT);\nACPIdentity.SyncIdentifiers(ids, ACPIdentity.ACPAuthenticationState.UNKNOWN);\n')),(0,d.mdx)(m,{platform:"xamarin",api:"sync-identifiers-overloaded",repeat:"11",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-19"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"iOS syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void SyncIdentifiers (NSDictionary identifiers, ACPMobileVisitorAuthenticationState authenticationState);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifiers")," dictionary contains identifiers, and each identifier contains an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," as the key and an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," as the value. If any of the identifier pairs contains an empty or null value as the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", then it will be ignored."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"authenticationState")," value indicating authentication state for the user and contains one of the following ",(0,d.mdx)("a",{parentName:"li",href:"#public-classes"},"ACPMobileVisitorAuthenticationState")," values.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Android syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void SyncIdentifiers (IDictionary<string, string> identifiers, VisitorID.AuthenticationState authenticationState);\n")),(0,d.mdx)("ul",null,(0,d.mdx)("li",{parentName:"ul"},"The ",(0,d.mdx)("em",{parentName:"li"},"identifiers")," dictionary contains identifiers, and each identifier contains an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type")," as the key and an ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier")," as the value. If any of the identifier pairs contains an empty or null value as the ",(0,d.mdx)("inlineCode",{parentName:"li"},"identifier type"),", then it will be ignored."),(0,d.mdx)("li",{parentName:"ul"},(0,d.mdx)("em",{parentName:"li"},"authenticationState")," value indicating authentication state for the user and contains one of the following ",(0,d.mdx)("a",{parentName:"li",href:"#public-classes"},"VisitorID.AuthenticationState")," values.")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"iOS example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'var ids = new NSMutableDictionary<NSString, NSObject>\n{\n  ["idsType1"] = new NSString("idValue1"),\n  ["idsType2"] = new NSString("idValue2"),\n  ["idsType3"] = new NSString("idValue3")\n};\nACPIdentity.SyncIdentifiers(ids, ACPMobileVisitorAuthenticationState.LoggedOut);\n')),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Android example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},'var ids = new Dictionary<string, string>();\nids.Add("idsType1", "idValue1");\nids.Add("idsType2", "idValue2");\nids.Add("idsType3", "idValue3");\nACPIdentity.SyncIdentifiers(ids, VisitorID.AuthenticationState.LoggedOut);\n')),(0,d.mdx)(m,{platform:"android",api:"public-classes",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"AuthenticationState")),(0,d.mdx)("p",null,"This class is used to indicate the authentication state for the current ",(0,d.mdx)("inlineCode",{parentName:"p"},"VisitorID"),"."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},"public enum AuthenticationState {        \n       UNKNOWN,        \n       AUTHENTICATED,        \n       LOGGED_OUT;\n}\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"VisitorID")),(0,d.mdx)("p",null,"This class is an identifier to be used with the Adobe Experience Cloud Identity Service."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},"public class VisitorID {    \n     //Constructor    \n     public VisitorID(String idOrigin, String idType, String id, VisitorID.AuthenticationState authenticationState);\n\n     public VisitorID.AuthenticationState getAuthenticationState();   \n\n     public final String getId();  \n\n     public final String getIdOrigin();  \n\n     public final String getIdType();\n\n}\n")),(0,d.mdx)(m,{platform:"ios-aep",api:"public-classes",repeat:"5",mdxType:"Variant"}),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"MobileVisitorAuthenticationState")),(0,d.mdx)("p",null,"This is used to indicate the authentication state for the current ",(0,d.mdx)("inlineCode",{parentName:"p"},"Identifiable"),"."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(AEPMobileVisitorAuthState) public enum MobileVisitorAuthenticationState: Int, Codable {\n    case unknown = 0\n    case authenticated = 1\n    case loggedOut = 2\n}\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Identifiable")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"@objc(AEPIdentifiable) public protocol Identifiable {\n    /// Origin of the identifier\n    var origin: String? { get }\n\n    /// Type of the identifier\n    var type: String? { get }\n\n    /// The identifier\n    var identifier: String? { get }\n\n    /// The authentication state for the identifier\n    var authenticationState: MobileVisitorAuthenticationState { get }\n}\n")),(0,d.mdx)(m,{platform:"ios-acp",api:"public-classes",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"ACPMobileVisitorAuthenticationState")),(0,d.mdx)("p",null,"This is used to indicate the authentication state for the current ",(0,d.mdx)("inlineCode",{parentName:"p"},"VisitorID"),"."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"typedef NS_ENUM(NSUInteger,\n    ACPMobileVisitorAuthenticationState) {    \n    ACPMobileVisitorAuthenticationStateUnknown          = 0,    \n    ACPMobileVisitorAuthenticationStateAuthenticated    = 1,    \n    ACPMobileVisitorAuthenticationStateLoggedOut        = 2  };\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"ACPMobileVisitorId")),(0,d.mdx)("p",null,"This is an identifier to be used with the Adobe Experience Cloud Identity Service and it contains the origin, the identifier type, the identifier, and the authentication state of the visitor ID."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},"@interface ACPMobileVisitorId : NSObject\n\n@property(nonatomic, strong, nullable) NSString* idOrigin;\n@property(nonatomic, strong, nullable) NSString* idType;\n@property(nonatomic, strong, nullable) NSString* identifier;\n@property(nonatomic, readwrite) ACPMobileVisitorAuthenticationState authenticationState;\n\n@end\n")),(0,d.mdx)(m,{platform:"react-native",api:"public-classes",repeat:"7",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"javascript-11"},"JavaScript"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"ACPVisitorID")),(0,d.mdx)("p",null,"This is an identifier to be used with the Adobe Experience Cloud Identity Service and it contains the origin, the identifier type, the identifier, and the authentication state of the visitor ID."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"import {ACPVisitorID} from '@adobe/react-native-acpcore';\n\nvar visitorId = new ACPVisitorID(idOrigin?: string, idType: string, id?: string, authenticationState?: ACPMobileVisitorAuthenticationState);\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"ACPMobileVisitorAuthenticationState")),(0,d.mdx)("p",null,"This is used to indicate the authentication state for the current ",(0,d.mdx)("inlineCode",{parentName:"p"},"VisitorID"),"."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"import {ACPMobileVisitorAuthenticationState} from '@adobe/react-native-acpcore';\n\nvar state = ACPMobileVisitorAuthenticationState.AUTHENTICATED;\n//var state = ACPMobileVisitorAuthenticationState.LOGGED_OUT;\n//var state = ACPMobileVisitorAuthenticationState.UNKNOWN;\n")),(0,d.mdx)(m,{platform:"flutter",api:"public-classes",repeat:"7",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"dart-10"},"Dart"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"ACPVisitorID")),(0,d.mdx)("p",null,"This is an identifier to be used with the Adobe Experience Cloud Identity Service and it contains the origin, the identifier type, the identifier, and the authentication state of the visitor ID."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter_acpcore/src/acpmobile_visitor_id.dart';\n\n\nclass ACPMobileVisitorId {\n  String get idOrigin;\n  String get idType;\n  String get identifier;\n  ACPMobileVisitorAuthenticationState get authenticationState;\n};\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"ACPMobileVisitorAuthenticationState")),(0,d.mdx)("p",null,"This is used to indicate the authentication state for the current ",(0,d.mdx)("inlineCode",{parentName:"p"},"VisitorID"),"."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter_acpcore/src/acpmobile_visitor_id.dart';\n\nenum ACPMobileVisitorAuthenticationState {UNKNOWN, AUTHENTICATED, LOGGED_OUT};\n")),(0,d.mdx)(m,{platform:"cordova",api:"public-classes",repeat:"4",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"cordova-10"},"Cordova"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"ACPMobileVisitorAuthenticationState")),(0,d.mdx)("p",null,"This is used to indicate the authentication state for the current ",(0,d.mdx)("inlineCode",{parentName:"p"},"VisitorID"),"."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-jsx"},"ACPIdentity.ACPMobileVisitorAuthenticationStateUnknown = 0;\nACPIdentity.ACPMobileVisitorAuthenticationStateAuthenticated = 1;\nACPIdentity.ACPMobileVisitorAuthenticationStateLoggedOut = 2;\n")),(0,d.mdx)(m,{platform:"unity",api:"public-classes",repeat:"4",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-20"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"ACPAuthenticationState")),(0,d.mdx)("p",null,"This is used to indicate the authentication state for the current ",(0,d.mdx)("inlineCode",{parentName:"p"},"VisitorID"),"."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"ACPIdentity.ACPAuthenticationState.UNKNOWN = 0;\nACPIdentity.ACPAuthenticationState.AUTHENTICATED = 1;\nACPIdentity.ACPAuthenticationState.LOGGED_OUT = 2;\n")),(0,d.mdx)(m,{platform:"xamarin",api:"public-classes",repeat:"9",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"c-21"},"C#"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"iOS")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"ACPMobileVisitorAuthenticationState")),(0,d.mdx)("p",null,"This is used to indicate the authentication state for the current ",(0,d.mdx)("inlineCode",{parentName:"p"},"ACPMobileVisitorId"),"."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"ACPMobileVisitorAuthenticationState.Unknown = 0;\nACPMobileVisitorAuthenticationState.Authenticated = 1;\nACPMobileVisitorAuthenticationState.LoggedOut = 2;\n")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Android")),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"VisitorID.AuthenticationState")),(0,d.mdx)("p",null,"This is used to indicate the authentication state for the current ",(0,d.mdx)("inlineCode",{parentName:"p"},"VisitorID"),"."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-csharp"},"VisitorID.AuthenticationState.Unknown = 0;\nVisitorID.AuthenticationState.Authenticated = 1;\nVisitorID.AuthenticationState.LoggedOut = 2;\n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=ff4ce0014a5a857ad24100f116c8aa6f7c8a5f05-648ef8b609c7f71ff751.js.map