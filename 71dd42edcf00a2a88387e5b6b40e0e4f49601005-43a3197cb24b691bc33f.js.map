{"version":3,"file":"71dd42edcf00a2a88387e5b6b40e0e4f49601005-43a3197cb24b691bc33f.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/documentation/mobile-core/lifecycle/tabs/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" task=\"add\" repeat=\"2\" mdxType=\"Variant\" />\n    <p>{`Import the library:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`   import com.adobe.marketing.mobile.*;\n`}</code></pre>\n    <Variant platform=\"ios-aep\" task=\"add\" repeat=\"8\" mdxType=\"Variant\" />\n    <p>{`Add the AEPLifecycle extension and its dependency, the `}<a parentName=\"p\" {...{\n        \"href\": \"../index.md\"\n      }}>{`Mobile Core`}</a>{` extension, to your project using Cocoapods.`}</p>\n    <p>{`Add the following pods in your `}<inlineCode parentName=\"p\">{`Podfile`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-pod\"\n      }}>{`pod 'AEPCore','~>3.0'\npod 'AEPLifecycle','~>3.0'\n`}</code></pre>\n    <p>{`Import the Lifecycle library:`}</p>\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import AEPCore\nimport AEPLifecycle\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`@import AEPCore;\n@import AEPLifecycle;\n`}</code></pre>\n    <Variant platform=\"ios-acp\" task=\"add\" repeat=\"9\" mdxType=\"Variant\" />\n    <p>{`The Lifecycle extension is included in the Mobile Core extension. Add the `}<a parentName=\"p\" {...{\n        \"href\": \"../index.md\"\n      }}>{`Mobile Core`}</a>{` extension to your project using Cocoapods.`}</p>\n    <p>{`Add the following pod in your `}<inlineCode parentName=\"p\">{`Podfile`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-pod\"\n      }}>{`pod 'ACPCore','~>2.0'\n`}</code></pre>\n    <p>{`Import the Lifecycle library:`}</p>\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <p>{`In Swift, importing `}<inlineCode parentName=\"p\">{`ACPCore`}</inlineCode>{` also imports the necessary Lifecycle APIs:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import ACPCore\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-1\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{` #import \"ACPLifecycle.h\"\n #import \"ACPCore.h\"\n`}</code></pre>\n    <Variant platform=\"react-native\" task=\"add\" repeat=\"3\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"javascript\"\n    }}>{`JavaScript`}</h4>\n    <p>{`Import the Lifecycle extension`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {ACPLifecycle} from '@adobe/react-native-acpcore';\n`}</code></pre>\n    <Variant platform=\"flutter\" task=\"add\" repeat=\"3\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"dart\"\n    }}>{`Dart`}</h4>\n    <p>{`Import the Lifecycle extension`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-dart\"\n      }}>{`import 'package:flutter_acpcore/flutter_acplifecycle.dart';\n`}</code></pre>\n    <Variant platform=\"cordova\" task=\"add\" repeat=\"3\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"cordova\"\n    }}>{`Cordova`}</h4>\n    <p>{`After creating your Cordova app and adding the Android and iOS platforms, the Lifecycle extension for Cordova can be added with this command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cordova\"\n      }}>{`cordova plugin add https://github.com/adobe/cordova-acpcore.git\n`}</code></pre>\n    <Variant platform=\"unity\" task=\"add\" repeat=\"3\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"c\"\n    }}>{`C#`}</h4>\n    <p>{`After importing the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/unity-acpcore/blob/master/bin/ACPCore-0.0.1-Unity.zip\"\n      }}>{`ACPCore.unitypackage`}</a>{`, the Lifecycle extension for Unity can be added with following code in the MainScript`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`using com.adobe.marketing.mobile;\n`}</code></pre>\n    <Variant platform=\"xamarin\" task=\"add\" repeat=\"3\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"c-1\"\n    }}>{`C#`}</h4>\n    <p>{`After adding the iOS ACPCore NuGet package or the Android ACPLifecycle NuGet package, the Lifecycle extension can be added by this import statement`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`using Com.Adobe.Marketing.Mobile;\n`}</code></pre>\n    <Variant platform=\"android\" task=\"register\" repeat=\"8\" mdxType=\"Variant\" />\n    <ol>\n      <li parentName=\"ol\">{`Register the Lifecycle extension:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class TargetApp extends Application {\n\n@Override\npublic void onCreate() {\n    super.onCreate();\n    MobileCore.setApplication(this);\n\n    try {\n        Lifecycle.registerExtension();\n        // register other extensions\n        MobileCore.start(new AdobeCallback () {\n            @Override\n            public void call(Object o) {\n                MobileCore.configureWithAppID(\"yourAppId\");\n            }\n        });    \n    } catch (Exception e) {\n        //Log the exception\n    }\n}\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`In the `}<inlineCode parentName=\"li\">{`onResume`}</inlineCode>{` function, start the lifecycle data collection:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`    @Override  \n    public void onResume() {  \n        MobileCore.setApplication(getApplication());\n        MobileCore.lifecycleStart(null);\n    }\n`}</code></pre>\n    <p>{`Setting the application is only necessary on activities that are entry points for your application. However, setting the application on each Activity has no negative impact and ensures that the SDK always has the necessary reference to your application. We recommend that you call `}<inlineCode parentName=\"p\">{`setApplication`}</inlineCode>{`in each of your activities.`}</p>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`In the `}<inlineCode parentName=\"li\">{`onPause`}</inlineCode>{` function, pause the lifecycle data collection:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`    @Override\n    public void onPause() {\n        MobileCore.lifecyclePause();\n    }\n`}</code></pre>\n    <p>{`To ensure accurate session and crash reporting, this call must be added to every activity.`}</p>\n    <Variant platform=\"ios-aep\" task=\"register\" repeat=\"32\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-2\"\n    }}>{`Swift`}</h4>\n    <ol>\n      <li parentName=\"ol\">{`Register the Lifecycle extension with the SDK Core by adding the following to your app's `}<inlineCode parentName=\"li\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` delegate method. This will register the extension with Core and begin Lifecycle event processing:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    MobileCore.registerExtensions([Lifecycle.self, ...], {\n        ...\n    }\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Start Lifecycle data collection by calling `}<inlineCode parentName=\"li\">{`lifecycleStart:`}</inlineCode>{` from within the callback of the `}<inlineCode parentName=\"li\">{`MobileCore.registerExtensions`}</inlineCode>{` method in your app's `}<inlineCode parentName=\"li\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` delegate method.`}</li>\n    </ol>\n    <p>{`If your iOS application supports background capabilities, your `}<inlineCode parentName=\"p\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` method might be called when iOS launches your app in the background. If you do not want background launches to count towards your lifecycle metrics, then `}<inlineCode parentName=\"p\">{`lifecycleStart:`}</inlineCode>{` should only be called when the application state is not equal to `}<inlineCode parentName=\"p\">{`UIApplicationStateBackground`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n    let appState = application.applicationState            \n    MobileCore.registerExtensions([Lifecycle.self, ...], {\n        if appState != .background {\n        // only start lifecycle if the application is not in the background\n        MobileCore.lifecycleStart(additionalContextData: nil)\n        }\n    }\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`When launched, if your app is resuming from a backgrounded state, iOS might call your `}<inlineCode parentName=\"li\">{`applicationWillEnterForeground:`}</inlineCode>{` delegate method. You also need to call `}<inlineCode parentName=\"li\">{`lifecycleStart:`}</inlineCode>{`, but this time you do not need all of the supporting code that you used in `}<inlineCode parentName=\"li\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{`:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func applicationWillEnterForeground(_ application: UIApplication) {    \n    MobileCore.lifecycleStart(additionalContextData: nil)\n}\n`}</code></pre>\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`sceneWillEnterForeground`}</inlineCode>{` method as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func sceneWillEnterForeground(_ scene: UIScene) {\n    MobileCore.lifecycleStart(additionalContextData: nil)\n}\n`}</code></pre>\n    <p>{`For more information on handling foregrounding applications with Scenes, refer to Apple's documentation `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_foreground\"\n      }}>{`here`}</a></p>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`When the app enters the background, pause Lifecycle data collection from your app's `}<inlineCode parentName=\"li\">{`applicationDidEnterBackground:`}</inlineCode>{` delegate method:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func applicationDidEnterBackground(_ application: UIApplication) {    \n    MobileCore.lifecyclePause()\n}\n`}</code></pre>\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`sceneDidEnterBackground`}</inlineCode>{` method as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func sceneDidEnterBackground(_ scene: UIScene) {\n    MobileCore.lifecyclePause()\n}\n`}</code></pre>\n    <p>{`For more information on handling backgrounding applications with Scenes, refer to Apple's documentation `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background\"\n      }}>{`here`}</a></p>\n    <h4 {...{\n      \"id\": \"objective-c-2\"\n    }}>{`Objective-C`}</h4>\n    <ol>\n      <li parentName=\"ol\">{`Register the Lifecycle extension with the SDK Core by adding the following to your app's `}<inlineCode parentName=\"li\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` delegate method. This will register the extension with Core and begin Lifecycle event processing:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    // register the lifecycle extension\n[AEPMobileCore registerExtensions:@[AEPMobileLifecycle.class, ...] completion:^{\n    ...\n}];\nreturn YES;\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Start Lifecycle data collection by calling `}<inlineCode parentName=\"li\">{`lifecycleStart:`}</inlineCode>{` from within the callback of the `}<inlineCode parentName=\"li\">{`AEPMobileCore::registerExtensions:`}</inlineCode>{` method in your app's `}<inlineCode parentName=\"li\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` delegate method.`}</li>\n    </ol>\n    <p>{`If your iOS application supports background capabilities, your `}<inlineCode parentName=\"p\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` method might be called when iOS launches your app in the background. If you do not want background launches to count towards your lifecycle metrics, then `}<inlineCode parentName=\"p\">{`lifecycleStart:`}</inlineCode>{` should only be called when the application state is not equal to `}<inlineCode parentName=\"p\">{`UIApplicationStateBackground`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (BOOL) application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    // register the lifecycle extension, and begin event processing with Core\n    const UIApplicationState appState = application.applicationState;\n    [AEPMobileCore registerExtensions:@[AEPMobileLifecycle.class, ...] completion:^{\n    // only start lifecycle if the application is not in the background\n    if (appState != UIApplicationStateBackground) {\n        [AEPMobileCore lifecycleStart:nil];\n    }\n    }];\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`When launched, if your app is resuming from a backgrounded state, iOS might call your `}<inlineCode parentName=\"li\">{`applicationWillEnterForeground:`}</inlineCode>{` delegate method. You also need to call `}<inlineCode parentName=\"li\">{`lifecycleStart:`}</inlineCode>{`, but this time you do not need all of the supporting code that you used in `}<inlineCode parentName=\"li\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{`:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) applicationWillEnterForeground:(UIApplication *)application {\n    [AEPMobileCore lifecycleStart:nil];\n}\n`}</code></pre>\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`sceneWillEnterForeground`}</inlineCode>{` method as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) sceneWillEnterForeground:(UIScene *)scene {\n    [AEPMobileCore lifecycleStart:nil];\n}\n`}</code></pre>\n    <p>{`For more information on handling foregrounding applications with Scenes, refer to Apple's documentation `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_foreground\"\n      }}>{`here`}</a></p>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`When the app enters the background, pause Lifecycle data collection from your app's `}<inlineCode parentName=\"li\">{`applicationDidEnterBackground:`}</inlineCode>{` delegate method:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) applicationDidEnterBackground:(UIApplication *)application {\n    [AEPMobileCore lifecyclePause];\n}\n`}</code></pre>\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`sceneDidEnterBackground`}</inlineCode>{` method as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) sceneDidEnterBackground:(UIScene *)scene {\n    [AEPMobileCore lifecyclePause];\n}\n`}</code></pre>\n    <p>{`For more information on handling backgrounding applications with Scenes, refer to Apple's documentation `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background\"\n      }}>{`here`}</a></p>\n    <Variant platform=\"ios-acp\" task=\"register\" repeat=\"32\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-3\"\n    }}>{`Swift`}</h4>\n    <ol>\n      <li parentName=\"ol\">{`Register the Lifecycle extension with the SDK Core by adding the following to your app's `}<inlineCode parentName=\"li\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` delegate method:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    // register the lifecycle extension\n    ACPLifecycle.registerExtension();\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Start Lifecycle data collection by calling `}<inlineCode parentName=\"li\">{`lifecycleStart:`}</inlineCode>{` from within the callback of the `}<inlineCode parentName=\"li\">{`ACPCore::start:`}</inlineCode>{` method in your app's `}<inlineCode parentName=\"li\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` delegate method.`}</li>\n    </ol>\n    <p>{`If your iOS application supports background capabilities, your `}<inlineCode parentName=\"p\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` method might be called when iOS launches your app in the background. If you do not want background launches to count towards your lifecycle metrics, then `}<inlineCode parentName=\"p\">{`lifecycleStart:`}</inlineCode>{` should only be called when the application state is not equal to `}<inlineCode parentName=\"p\">{`UIApplicationStateBackground`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n    // register the lifecycle extension\n    ACPLifecycle.registerExtension();\n\n    let appState = application.applicationState;            \n    ACPCore.start {\n        // only start lifecycle if the application is not in the background    \n        if appState != .background {\n            ACPCore.lifecycleStart(nil)\n        }    \n    }    \n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`When launched, if your app is resuming from a backgrounded state, iOS might call your `}<inlineCode parentName=\"li\">{`applicationWillEnterForeground:`}</inlineCode>{` delegate method. You also need to call `}<inlineCode parentName=\"li\">{`lifecycleStart:`}</inlineCode>{`, but this time you do not need all of the supporting code that you used in `}<inlineCode parentName=\"li\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{`:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func applicationWillEnterForeground(_ application: UIApplication) {    \n    ACPCore.lifecycleStart(nil)\n}\n`}</code></pre>\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`sceneWillEnterForeground`}</inlineCode>{` method as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func sceneWillEnterForeground(_ scene: UIScene) {\n    ACPCore.lifecycleStart(nil)\n}\n`}</code></pre>\n    <p>{`For more information on handling foregrounding applications with Scenes, refer to Apple's documentation `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_foreground\"\n      }}>{`here`}</a></p>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`When the app enters the background, pause Lifecycle data collection from your app's `}<inlineCode parentName=\"li\">{`applicationDidEnterBackground:`}</inlineCode>{` delegate method:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func applicationDidEnterBackground(_ application: UIApplication) {    \n    ACPCore.lifecyclePause()\n}\n`}</code></pre>\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`sceneDidEnterBackground`}</inlineCode>{` method as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func sceneDidEnterBackground(_ scene: UIScene) {\n    ACPCore.lifecyclePause()\n}\n`}</code></pre>\n    <p>{`For more information on handling backgrounding applications with Scenes, refer to Apple's documentation `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background\"\n      }}>{`here`}</a></p>\n    <h4 {...{\n      \"id\": \"objective-c-3\"\n    }}>{`Objective-C`}</h4>\n    <ol>\n      <li parentName=\"ol\">{`Register the Lifecycle extension with the SDK Core by adding the following to your app's `}<inlineCode parentName=\"li\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` delegate method:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    // register the lifecycle extension\n[ACPLifecycle registerExtension];\n    return YES;\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Start Lifecycle data collection by calling `}<inlineCode parentName=\"li\">{`lifecycleStart:`}</inlineCode>{` from within the callback of the `}<inlineCode parentName=\"li\">{`ACPCore::start:`}</inlineCode>{` method in your app's `}<inlineCode parentName=\"li\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` delegate method.`}</li>\n    </ol>\n    <p>{`If your iOS application supports background capabilities, your `}<inlineCode parentName=\"p\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` method might be called when iOS launches your app in the background. If you do not want background launches to count towards your lifecycle metrics, then `}<inlineCode parentName=\"p\">{`lifecycleStart:`}</inlineCode>{` should only be called when the application state is not equal to `}<inlineCode parentName=\"p\">{`UIApplicationStateBackground`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (BOOL) application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    // register the lifecycle extension\n    [ACPLifecycle registerExtension];\n\n    const UIApplicationState appState = application.applicationState;\n    [ACPCore start:^{\n        // only start lifecycle if the application is not in the background\n        if (appState != UIApplicationStateBackground) {\n            [ACPCore lifecycleStart:nil];\n        }\n    }];\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`When launched, if your app is resuming from a backgrounded state, iOS might call your `}<inlineCode parentName=\"li\">{`applicationWillEnterForeground:`}</inlineCode>{` delegate method. You also need to call `}<inlineCode parentName=\"li\">{`lifecycleStart:`}</inlineCode>{`, but this time you do not need all of the supporting code that you used in `}<inlineCode parentName=\"li\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{`:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) applicationWillEnterForeground:(UIApplication *)application {\n    [ACPCore lifecycleStart:nil];\n}\n`}</code></pre>\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`sceneWillEnterForeground`}</inlineCode>{` method as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) sceneWillEnterForeground:(UIScene *)scene {\n    [ACPCore lifecycleStart:nil];\n}\n`}</code></pre>\n    <p>{`For more information on handling foregrounding applications with Scenes, refer to Apple's documentation `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_foreground?language=objc\"\n      }}>{`here`}</a></p>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`When the app enters the background, pause Lifecycle data collection from your app's `}<inlineCode parentName=\"li\">{`applicationDidEnterBackground:`}</inlineCode>{` delegate method:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) applicationDidEnterBackground:(UIApplication *)application {\n    [ACPCore lifecyclePause];\n}\n`}</code></pre>\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`sceneDidEnterBackground`}</inlineCode>{` method as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) sceneDidEnterBackground:(UIScene *)scene {\n    [ACPCore lifecyclePause];\n}\n`}</code></pre>\n    <p>{`For more information on handling backgrounding applications with Scenes, refer to Apple's documentation `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background?language=objc\"\n      }}>{`here`}</a></p>\n    <Variant platform=\"react-native\" task=\"register\" repeat=\"2\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Registering the extension with Core`}</strong></p>\n    <p>{`When using React Native, registering Lifecycle with Mobile Core should be done in native code which is shown under the Android and iOS (ACP 2.x) tabs.`}</p>\n    <Variant platform=\"cordova\" task=\"register\" repeat=\"1\" mdxType=\"Variant\" />\n    <p>{`When using Cordova, registering Lifecycle with Mobile Core must be done in native code which is shown under the Android and iOS tabs.`}</p>\n    <Variant platform=\"unity\" task=\"register\" repeat=\"3\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Starting and Pausing a lifecycle event`}</strong>{` `}</p>\n    <p>{`Add the OnApplicationPause in the MainScript with the following code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`private void OnApplicationPause(bool pauseStatus)\n{\n  if (pauseStatus)\n  {\n    ACPCore.LifecyclePause();\n  }\n  else\n  {\n    var cdata = new Dictionary<string, string>();\n    cdata.Add(\"launch.data\", \"added\");\n    ACPCore.LifecycleStart(cdata);\n  }\n}\n`}</code></pre>\n    <Variant platform=\"xamarin\" task=\"register\" repeat=\"19\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`iOS`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`Register the Lifecycle extension with the SDK Core by adding the following to your app's `}<inlineCode parentName=\"li\">{`FinishedLaunching:`}</inlineCode>{` delegate method:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`public override bool FinishedLaunching(UIApplication app, NSDictionary options)\n{\n    ACPLifecycle.RegisterExtension();\n    return base.FinishedLaunching(app, options);\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Start Lifecycle data collection by calling `}<inlineCode parentName=\"li\">{`LifecycleStart:`}</inlineCode>{` from within the callback of the `}<inlineCode parentName=\"li\">{`ACPCore::start:`}</inlineCode>{` method in your app's `}<inlineCode parentName=\"li\">{`FinishedLaunching:`}</inlineCode>{` delegate method.`}</li>\n    </ol>\n    <p>{`If your iOS application supports background capabilities, your `}<inlineCode parentName=\"p\">{`FinishedLaunching:`}</inlineCode>{` method might be called when iOS launches your app in the background. If you do not want background launches to count towards your lifecycle metrics, then `}<inlineCode parentName=\"p\">{`LifecycleStart:`}</inlineCode>{` should only be called when the application state is not equal to `}<inlineCode parentName=\"p\">{`UIApplicationState.Background`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`public override bool FinishedLaunching(UIApplication app, NSDictionary options)\n{\n    ACPLifecycle.RegisterExtension();\n\n    // only start lifecycle if the application is not in the background\n    var appstate = app.ApplicationState;\n    if(appstate != UIApplicationState.Background)\n    {\n    ACPCore.LifecycleStart(null);\n    }\n    return base.FinishedLaunching(app, options);\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`When launched, if your app is resuming from a backgrounded state, iOS might call your `}<inlineCode parentName=\"li\">{`WillEnterForeground:`}</inlineCode>{` delegate method. You also need to call `}<inlineCode parentName=\"li\">{`LifecycleStart:`}</inlineCode>{`, but this time you do not need all of the supporting code that you used in `}<inlineCode parentName=\"li\">{`FinishedLaunching:`}</inlineCode>{`:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`public override void WillEnterForeground(UIApplication uiApplication)\n{\n    base.WillEnterForeground(uiApplication);\n    ACPCore.LifecycleStart(null);\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\">{`When the app enters the background, pause Lifecycle data collection from your app's `}<inlineCode parentName=\"li\">{`DidEnterBackground:`}</inlineCode>{` delegate method:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`public override void DidEnterBackground(UIApplication uiApplication)\n{\n    base.DidEnterBackground(uiApplication);\n    ACPCore.LifecyclePause();\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Android`}</strong></p>\n    <ol>\n      <li parentName=\"ol\">{`Register the Lifecycle extension:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`protected override void OnCreate(Bundle savedInstanceState)\n{\n    base.OnCreate(savedInstanceState);\nLoadApplication(new App());\n    ACPCore.Application = this.Application;\n    ACPLifecycle.RegisterExtension();\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`In the `}<inlineCode parentName=\"li\">{`onResume`}</inlineCode>{` function, start the lifecycle data collection:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`protected override void OnResume()\n{\n    base.OnResume();\n    ACPCore.LifecycleStart(null);\n}\n`}</code></pre>\n    <p>{`Setting the application is only necessary on activities that are entry points for your application. However, setting the application on each Activity has no negative impact and ensures that the SDK always has the necessary reference to your application. You should set the application (`}<inlineCode parentName=\"p\">{`ACPCore.Application = this.Application;`}</inlineCode>{`) in each of your activities.`}</p>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`In the `}<inlineCode parentName=\"li\">{`onPause`}</inlineCode>{` function, pause the lifecycle data collection:`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`protected override void OnPause()\n{\n    base.OnPause();\n    ACPCore.LifecyclePause();\n}\n`}</code></pre>\n    <p>{`To ensure accurate session and crash reporting, this call must be added to every activity.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Variant","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","platform","task","repeat","parentName","isMDXComponent"],"sourceRoot":""}