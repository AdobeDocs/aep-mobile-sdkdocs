"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[6086],{8979:function(e,t,n){n.r(t),n.d(t,{_frontmatter:function(){return d},default:function(){return u}});var o,a=n(87462),i=n(63366),m=(n(15007),n(64983)),s=n(91515),r=["components"],d={},l=(o="CodeBlock",function(e){return console.warn("Component "+o+" was not imported, exported, or provided by MDXProvider as global scope"),(0,m.mdx)("div",e)}),c={_frontmatter:d},p=s.Z;function u(e){var t=e.components,n=(0,i.Z)(e,r);return(0,m.mdx)(p,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,m.mdx)("h1",{id:"customizing-content-card-templates"},"Customizing Content Card Templates"),(0,m.mdx)("p",null,"This tutorial explains how to customize the UI of content card in your application."),(0,m.mdx)("h2",{id:"overview"},"Overview"),(0,m.mdx)("p",null,"Messaging extension provides a way to customize content cards based on the template type. You can customize the content card templates using the ",(0,m.mdx)("a",{parentName:"p",href:"../public-classes/contentcardcustomizing.md"},"ContentCardCustomizing")," protocol."),(0,m.mdx)("h2",{id:"implementing-contentcardcustomizing"},"Implementing ContentCardCustomizing"),(0,m.mdx)("p",null,"Perform the following steps to customize content card templates:"),(0,m.mdx)("ol",null,(0,m.mdx)("li",{parentName:"ol"},"Conform to the ContentCardCustomizing protocol in your class or struct."),(0,m.mdx)("li",{parentName:"ol"},"Implement the desired methods of the ContentCardCustomizing protocol.")),(0,m.mdx)("p",null,"Below is an example implementation of ",(0,m.mdx)("inlineCode",{parentName:"p"},"ContentCardCustomizing"),". In this example, the ",(0,m.mdx)("inlineCode",{parentName:"p"},"HomePageCardCustomizer")," class conforms to the ",(0,m.mdx)("inlineCode",{parentName:"p"},"ContentCardCustomizing")," protocol and customizes the ",(0,m.mdx)("inlineCode",{parentName:"p"},"SmallImageTemplate")," content card template:"),(0,m.mdx)(l,{slots:"heading, code",repeat:"1",languages:"Swift",mdxType:"CodeBlock"}),(0,m.mdx)("h4",{id:"swift"},"Swift"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},"class HomePageCardCustomizer: ContentCardCustomizing {\n    \n    func customize(template: SmallImageTemplate) {\n        // customize UI elements\n        template.title.textColor = .primary\n        template.title.font = .subheadline\n        template.body?.textColor = .secondary\n        template.buttons?.first?.text.font = .system(size: 13)\n        \n        // customize stack structure\n        template.rootHStack.spacing = 15\n        template.textVStack.alignment = .leading\n        template.textVStack.spacing = 10\n        \n        // add custom modifiers\n        template.buttonHStack.modifier = AEPViewModifier(ButtonHStackModifier())\n        template.rootHStack.modifier = AEPViewModifier(RootHStackModifier())\n        \n        // customize the dismiss buttons\n        template.dismissButton?.image.iconColor = .primary\n        template.dismissButton?.image.iconFont = .system(size: 10)\n    }\n    \n    struct RootHStackModifier : ViewModifier {\n        func body(content: Content) -> some View {\n             content\n                .frame(maxWidth: .infinity, alignment: .leading)\n                .padding(.trailing)\n         }\n    }\n    \n    struct ButtonHStackModifier : ViewModifier {\n        func body(content: Content) -> some View {\n             content\n                .frame(maxWidth: .infinity, alignment: .trailing)\n         }\n    }\n}\n")),(0,m.mdx)("h2",{id:"applying-customizations"},"Applying Customizations"),(0,m.mdx)("p",null,"To apply the customizations to the content card templates, pass the customizer to the ",(0,m.mdx)("inlineCode",{parentName:"p"},"getContentCardsUI")," API. The customizer will be called for each content card template type that is recognized by the Messaging extension."),(0,m.mdx)(l,{slots:"heading, code",repeat:"1",languages:"Swift",mdxType:"CodeBlock"}),(0,m.mdx)("h4",{id:"swift-1"},"Swift"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},'let homePageSurface = Surface(path: "homepage")\nlet homePageCardCustomizer = HomePageCardCustomizer()\nMessaging.getContentCardsUI(for: homePageSurface,\n                             customizer: homePageCardCustomizer) { result in\n    // handle result\n}\n')),(0,m.mdx)("p",null,'Customize the content card templates for different surfaces by creating a customizer for each surface. For example, the following code snippet customizes the content card templates for the "homepage" and "detailpage" content cards separately:'),(0,m.mdx)(l,{slots:"heading, code",repeat:"1",languages:"Swift",mdxType:"CodeBlock"}),(0,m.mdx)("h4",{id:"swift-2"},"Swift"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},'let homePageSurface = Surface(path: "homepage")\nlet homePageCustomizer = HomePageCardCustomizer()\nMessaging.getContentCardsUI(for: homePageSurface,\n                             customizer: homePageCustomizer) { result in\n    // handle result\n}\n\nlet detailPageSurface = Surface(path: "detailpage")\nlet detailPageCustomizer = DetailPageCardCustomizer()\nMessaging.getContentCardsUI(for: detailPageSurface,\n                             customizer: detailPageCustomizer) { result in\n    // handle result\n}\n')))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-edge-adobe-journey-optimizer-content-card-ui-i-os-tutorial-customizing-content-card-templates-md-070bfd9f7de479fcb921.js.map