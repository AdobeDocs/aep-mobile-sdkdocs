{"version":3,"file":"component---src-pages-home-base-mobile-core-configuration-index-md-ec5a0b5497646e7d62e1.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/home/base/mobile-core/configuration/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Tabs from './tabs/index.md';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst TabsBlock = makeShortcode(\"TabsBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"configuration\"\n    }}>{`Configuration`}</h1>\n    <p>{`The Configuration extension is built into the Mobile Core extension. It provides several different APIs for you to setup the configuration either remotely in the Data Collection UI or locally.`}</p>\n    <h2 {...{\n      \"id\": \"configure-with-app-id-per-environment\"\n    }}>{`Configure with App ID per environment`}</h2>\n    <p>{`When you configure a mobile property, a unique environment ID is generated that the SDK uses to retrieve your configuration. This ID is generated when an app configuration is created and published to a given environment. The app is first launched and then the SDK retrieves and uses this Adobe-hosted configuration.`}</p>\n    <InlineAlert variant=\"success\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`As best practice, you should configure a mobile property in the Data Collection UI and use environment IDs to configure your application. Follow the steps in the tutorial on `}<a parentName=\"p\" {...{\n        \"href\": \"../../getting-started/create-a-mobile-property.md\"\n      }}>{`setting up a mobile property`}</a>{` if you need to create a new Experience Platform App.`}</p>\n    <p>{`After the configuration is retrieved when the app is initially launched, the configuration is stored in local cache. The SDK tries to refresh the configuration every cold launch or when a new session is detected. If there is no change or a network request error occurs while downloading the configuration file, the cached configuration will be used.`}</p>\n    <p>{`The unique environment ID from the Data Collection UI can be configured with the SDK using the following:`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&task=configure\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&task=configure\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"programmatic-updates-to-configuration\"\n    }}>{`Programmatic updates to configuration`}</h2>\n    <p>{`You can also update the configuration programmatically by passing configuration keys and values to override the existing configuration.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Keys that are not found on the current configuration are added when this method is followed. Null values are allowed and replace existing configuration values.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Do not use this API to update the build.environment or any key with an environment prefix, because it can lead to unexpected behavior. For more information, read `}<a parentName=\"p\" {...{\n        \"href\": \"#environment-aware-configuration-properties\"\n      }}>{`Environment-aware configuration properties`}</a>{`.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&task=update\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&task=update\" mdxType=\"Tabs\" />\n    {/*- React Native\n     <Tabs query=\"platform=react-native&task=update\"/>\n     Flutter\n     <Tabs query=\"platform=flutter&task=update\"/> -*/}\n    <h2 {...{\n      \"id\": \"clearing-programmatic-updates-to-the-configuration\"\n    }}>{`Clearing programmatic updates to the configuration`}</h2>\n    <p>{`You can clear any programmatic updates made to the configuration via the `}<inlineCode parentName=\"p\">{`clearUpdatedConfiguration`}</inlineCode>{` API. This will clear programmatic updates to configuration made via the `}<inlineCode parentName=\"p\">{`updateConfiguration(configMap)`}</inlineCode>{`(Android)/ `}<inlineCode parentName=\"p\">{`updateConfigurationWith(configDict:)`}</inlineCode>{`(iOS) API. It will also clear any updates to the `}<inlineCode parentName=\"p\">{`MobilePrivacyStatus`}</inlineCode>{`(Android)/ `}<inlineCode parentName=\"p\">{`PrivacyStatus`}</inlineCode>{`(iOS)  made via `}<inlineCode parentName=\"p\">{`setPrivacyStatus(privacyStatus)`}</inlineCode>{`(Android)/ `}<inlineCode parentName=\"p\">{`setPrivacyStatus(_ status:)`}</inlineCode>{`(iOS).`}</p>\n    <p>{`For implementation details, please refer to `}<a parentName=\"p\" {...{\n        \"href\": \"./api-reference.md#clearUpdatedConfiguration\"\n      }}>{`Configuration API reference`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"using-a-bundled-file-configuration\"\n    }}>{`Using a bundled file configuration`}</h2>\n    <p>{`Applications which need to get data from the SDK early in the application lifecycle should use a bundled file configuration. This will allow the SDK to properly process events before a remote configuration is downloaded, using the bundled configuration in early, app launch scenarios. If you are going to use a bundled file configuration to help with early app processing, it is strongly recommended that you also use `}<a parentName=\"p\" {...{\n        \"href\": \"../rules-engine/index.md#using-bundled-rules\"\n      }}>{`bundled rules`}</a>{`.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Please note that the configuration that is downloaded by using the `}<a parentName=\"p\" {...{\n        \"href\": \"#configure-with-app-id-per-environment\"\n      }}>{`Configure with App ID per environment`}</a>{` approach, will overwrite the bundled configuration once it is downloaded, allowing you to always keep a more up-to-date configuration remotely, without needing an app update.`}</p>\n    <p>{`To use a bundled configuration, follow the steps below:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Download your JSON configuration file from the following URL: `}<a parentName=\"li\" {...{\n          \"href\": \"https://assets.adobedtm.com/PASTE-ENVIRONMENT-ID.json\"\n        }}>{`https://assets.adobedtm.com/PASTE-ENVIRONMENT-ID.json`}</a>{`, replacing PASTE-ENVIRONMENT-ID with your mobile property environment ID.`}</li>\n      <li parentName=\"ol\">{`Rename the JSON file to “ADBMobileConfig.json”.`}</li>\n      <li parentName=\"ol\">{`iOS: Place the file anywhere that it is accessible in your app bundle.\nAndroid: Place the file in the assets folder.`}</li>\n    </ol>\n    <p>{`You can also load a different `}<inlineCode parentName=\"p\">{`ADBMobileConfig.json`}</inlineCode>{` file by using the `}<inlineCode parentName=\"p\">{`ConfigureWithFileInPath`}</inlineCode>{` method. The Adobe Experience Platform SDKs will attempt to load the file from the given path and parse its JSON contents. Previous programmatic configuration changes that were set by using the `}<inlineCode parentName=\"p\">{`UpdateConfiguration`}</inlineCode>{` method are applied on the bundled file's configuration before setting the new configuration to the Adobe Experience Platform SDKs. If a file-read error or JSON parsing error occurs, no configuration changes are made.`}</p>\n    <p>{`To pass in a bundled path and file name:`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&task=bundle\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&task=bundle\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"environment-aware-configuration-properties\"\n    }}>{`Environment-aware configuration properties`}</h2>\n    <p>{`Some extension developers might use different configuration values based on their environment, and the generated configuration might have several entries for the same property. For example, the Adobe Campaign Standard extension has different endpoints for development, staging, and production servers. Here is an example of a raw configuration that supports multiple build environments:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n  \"myExtension.server\": \"mydomain.com\",\n  \"__dev__myExtension.server\": \"mydomain.dev.com\",\n  \"__stage__myExtension.server\": \"mydomain.stage.com\"\n}\n`}</code></pre>\n    <InlineAlert variant=\"success\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Each time a remote configuration is generated in the Data Collection UI, a `}<inlineCode parentName=\"p\">{`build.environment`}</inlineCode>{` value is set. This value is based on the environment that you are publishing. When the remote configuration is downloaded, the Configuration extension considers the value in `}<inlineCode parentName=\"p\">{`build.environment`}</inlineCode>{` and provides `}<strong parentName=\"p\">{`only`}</strong>{` the non-prefixed version for the current environment in the shared state.`}</p>\n    <p>{`Here is a modification of the previous example, which now includes `}<inlineCode parentName=\"p\">{`build.environment`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n  \"build.environment\": \"dev\",\n  \"myExtension.server\": \"mydomain.com\",\n  \"__dev__myExtension.server\": \"mydomain.dev.com\",\n  \"__stage__myExtension.server\": \"mydomain.stage.com\"\n}\n`}</code></pre>\n    <p>{`Here is the resulting shared state from the Configuration extension:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n  \"build.environment\": \"dev\",\n  \"myExtension.server\": \"mydomain.dev.com\"  \n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"sample-configuration\"\n    }}>{`Sample configuration`}</h3>\n    <p>{`Here's a sample JSON file for the SDK:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`{\n    \"experienceCloud.org\": \"3CE342C75100435B0A490D4C@AdobeOrg\",  \n    \"target.clientCode\": \"yourclientcode\",  \n    \"target.timeout\": 5,  \n    \"audience.server\": \"omniture.demdex.net\",  \n    \"audience.timeout\": 5,  \n    \"analytics.rsids\": \"mobilersidsample\",  \n    \"analytics.server\": \"obumobile1.sc.omtrdc.net\",  \n    \"analytics.aamForwardingEnabled\": false,  \n    \"analytics.offlineEnabled\": true,  \n    \"analytics.batchLimit\": 0,  \n    \"analytics.backdatePreviousSessionInfo\": false,\n    \"global.privacy\": \"optedin\",  \n    \"lifecycle.sessionTimeout\": 300,  \n    \"rules.url\": \"https://link.to.rules/test.zip\"\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","InlineAlert","TabsBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","variant","slots","parentName","orientation","repeat","query","isMDXComponent"],"sourceRoot":""}