{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-code-based-api-reference-md-2c5da019bc4316415f79.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/code-based/api-reference.md","webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/code-based/tabs/api-reference.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Tabs from './tabs/api-reference.md';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst TabsBlock = makeShortcode(\"TabsBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"code-based-experiences---api-reference\"\n    }}>{`Code-based Experiences - API reference`}</h1>\n    <p>{`This document lists the public APIs available in the Messaging extension for implementing code-based experiences.`}</p>\n    <h2 {...{\n      \"id\": \"getpropositionsforsurfaces\"\n    }}>{`getPropositionsForSurfaces`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`getPropositionsForSurfaces`}</inlineCode>{` API retrieves the previously fetched propositions from the SDK's in-memory propositions cache for the provided surfaces. The completion handler is invoked with the decision propositions corresponding to the given surfaces or `}<inlineCode parentName=\"p\">{`AEPError`}</inlineCode>{`, if it occurs.`}</p>\n    <p>{`If a requested surface was not previously cached prior to calling `}<inlineCode parentName=\"p\">{`getPropositionsForSurfaces`}</inlineCode>{` (using the `}<inlineCode parentName=\"p\">{`updatePropositionsForSurfaces`}</inlineCode>{` API), no propositions will be returned for that surface.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=get-propositions-for-surfaces\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=get-propositions-for-surfaces\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"updatepropositionsforsurfaces\"\n    }}>{`updatePropositionsForSurfaces`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`updatePropositionsForSurfaces`}</inlineCode>{` API dispatches an event for the Edge network extension to fetch personalization decisions from the AJO campaigns for the provided surfaces array. The returned decision propositions are cached in-memory by the Messaging extension.`}</p>\n    <p>{`To retrieve previously cached decision propositions, use `}<inlineCode parentName=\"p\">{`getPropositionsForSurfaces`}</inlineCode>{` API.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=update-propositions-for-surfaces\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=update-propositions-for-surfaces\" mdxType=\"Tabs\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" api=\"get-propositions-for-surfaces\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void getPropositionsForSurfaces(@NonNull final List<Surface> surfaces, @NonNull final AdobeCallback<Map<Surface, List<Proposition>>> callback)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`surfaces`}</em>{` is a list of surfaces for which propositions are requested.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`callback`}</em>{` `}<inlineCode parentName=\"li\">{`call`}</inlineCode>{` method is invoked with propositions map of type `}<inlineCode parentName=\"li\">{`Map<Surface, List<Proposition>>`}</inlineCode>{`. If the callback is an instance of `}<a parentName=\"li\" {...{\n          \"href\": \"../../../../home/base/mobile-core/api-reference.md#adobecallbackwitherror\"\n        }}>{`AdobeCallbackWithError`}</a>{`, and if the operation times out or an error occurs in retrieving propositions, the `}<inlineCode parentName=\"li\">{`fail`}</inlineCode>{` method is invoked with the appropriate `}<a parentName=\"li\" {...{\n          \"href\": \"../../../../home/base/mobile-core/api-reference.md#adobeerror\"\n        }}>{`AdobeError`}</a>{`.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`final Surface surface1 = new Surface(\"myActivity#button\");\nfinal Surface surface2 = new Surface(\"myActivityAttributes\");\n\nfinal List<Surface> surfaces = new ArrayList<>();\nsurfaces.add(surface1);\nsurfaces.add(surface2);\n\nMessaging.getPropositionsForSurfaces(surfaces, new AdobeCallbackWithError<Map<Surface, List<Proposition>>>() {\n    @Override\n    public void fail(final AdobeError adobeError) {\n        // handle error\n    }\n\n    @Override\n    public void call(Map<Surface, List<Proposition>> propositionsMap) {\n        if (propositionsMap != null && !propositionsMap.isEmpty()) {\n            // get the propositions for the given surfaces\n            if (propositionsMap.contains(surface1)) {\n                final List<Proposition> propositions1 = propositionsMap.get(surface1)\n                // read surface1 propositions\n            }\n            if (propositionsMap.contains(surface2)) {\n                final List<Proposition> proposition2 = propositionsMap.get(surface2)\n                // read surface2 propositions\n            }\n        }\n    }\n});\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"get-propositions-for-surfaces\" repeat=\"12\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func getPropositionsForSurfaces(_ surfacePaths: [Surface], _ completion: @escaping ([Surface: [Proposition]]?, Error?) -> Void)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`surfaces`}</em>{` is an array of surfaces for which propositions are requested.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`completion`}</em>{` is invoked with propositions dictionary of type `}<inlineCode parentName=\"li\">{`[Surface: [Proposition]]`}</inlineCode>{`. An `}<inlineCode parentName=\"li\">{`Error`}</inlineCode>{` is returned if SDK fails to retrieve the propositions.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let surface1 = Surface(path: \"myView#button\")\nlet surface2 = Surface(path: \"myViewAttributes\")\n\nMessaging.getPropositionsForSurfaces([surface1, surface2]) { propositionsDict, error in\n    guard error == nil else {\n        // handle error\n        return\n    }\n\n    guard let propositionsDict = propositionsDict else {\n        // bail early if no propositions\n        return\n    }\n    \n    // get the propositions for the given surfaces\n    if let propositions1 = propositionsDict[surface1] {\n        // read surface1 propositions\n    }\n\n    if let propositions2 = propositionsDict[surface2] {\n        // read surface2 propositions\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`+ (void) getPropositionsForSurfaces: (NSArray<AEPSurface*>* _Nonnull) surfaces \n              completion: (void (^ _Nonnull)(NSDictionary<AEPSurface*, NSArray<AEPProposition*>*>* _Nullable propositionsDict, NSError* _Nullable error)) completion;\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`surfaces`}</em>{` is an array of surfaces for which propositions are requested.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`completion`}</em>{` is invoked with propositions dictionary of type `}<inlineCode parentName=\"li\">{`NSDictionary<AEPSurface*, NSArray<AEPProposition*>*>`}</inlineCode>{`. An `}<inlineCode parentName=\"li\">{`NSError`}</inlineCode>{` is returned if SDK fails to retrieve the propositions.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`AEPSurface* surface1 = [[AEPSurface alloc] initWithPath: @\"myView#button\"];\nAEPSurface* surface2 = [[AEPSurface alloc] initWithPath: @\"myView#button\"];\n\n[AEPMobileMessaging getPropositionsForSurfaces: @[surface1, surface2] \n                        completion: ^(NSDictionary<AEPDecisionScope*, NSArray<AEPProposition*>*>* propositionsDict, NSError* error) {\n  if (error != nil) {\n    // handle error   \n    return;\n  }\n\n  NSArray<AEPProposition*>* proposition1 = propositionsDict[surface1];\n  // read surface1 propositions\n\n  NSArray<AEPProposition*>* proposition2 = propositionsDict[surface2];\n  // read surface2 propositions\n}];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"update-propositions-for-surfaces\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void updatePropositionsForSurfaces(@NonNull final List<Surface> surfaces)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`surfaces`}</em>{` is a list of surfaces for which propositions need updating.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`final Surface surface1 = new Surface(\"myActivity#button\");\nfinal Surface surface2 = new Surface(\"myActivityAttributes\");\n\nfinal List<Surface> surfaces = new ArrayList<>();\nsurfaces.add(surface1);\nsurfaces.add(surface2);\n\nMessaging.updatePropositionsForSurfaces(surfaces)\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"update-propositions-for-surfaces\" repeat=\"12\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func updatePropositionsForSurfaces(_ surfaces: [Surface])\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`surfaces`}</em>{` is an array of surfaces for which propositions need updating.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let surface1 = Surface(path: \"myView#button\")\nlet surface2 = Surface(path: \"myViewAttributes\")\n\nMessaging.updatePropositionsForSurfaces([surface1, surface2])\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-1\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`+ (void) updatePropositionsForSurfaces: (NSArray<AEPSurface*>* _Nonnull) surfaces;\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`surfaces`}</em>{` is an array of surfaces for which propositions need updating.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`AEPSurface* surface1 = [[AEPSurface alloc] initWithPath: @\"myView#button\"];\nAEPSurface* surface2 = [[AEPSurface alloc] initWithPath: @\"myView#button\"];\n\n[AEPMobileMessaging updatePropositionsForSurfaces: @[surface1, surface2]]; \n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","TabsBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","orientation","slots","repeat","query","isMDXComponent","Variant","platform","api"],"sourceRoot":""}