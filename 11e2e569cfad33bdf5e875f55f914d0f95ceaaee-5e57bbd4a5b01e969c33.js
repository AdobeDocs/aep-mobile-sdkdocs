"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[9967],{31343:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return l},default:function(){return u}});var t,i=a(87462),o=a(63366),r=(a(15007),a(64983)),s=a(91515),p=["components"],l={},d=(t="Variant",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",e)}),m={_frontmatter:l},c=s.Z;function u(e){var n=e.components,a=(0,o.Z)(e,p);return(0,r.mdx)(c,(0,i.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)(d,{platform:"android",api:"extension-version",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static String extensionVersion();\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"String campaignClassicExtensionVersion = CampaignClassic.extensionVersion();\n")),(0,r.mdx)(d,{platform:"ios-aep",api:"extension-version",repeat:"10",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static var extensionVersion: String\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"let campaignClassicVersion = CampaignClassic.extensionVersion\n")),(0,r.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objective-c"},"+ (nonnull NSString *)extensionVersion\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objective-c"},"NSString *campaignClassicVersion = [AEPMobileCampaignClassic extensionVersion];\n")),(0,r.mdx)(d,{platform:"ios-acp",api:"extension-version",repeat:"10",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"swift-1"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static func extensionVersion() -> String\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"let campaignClassicExtensionVersion  = ACPCampaignClassic.extensionVersion()\n")),(0,r.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objc"},"+(NSString) extensionVersion;\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"NSString *campaignClassicExtensionVersion = [ACPCampaignClassic extensionVersion];\n")),(0,r.mdx)(d,{platform:"android",api:"register-device",repeat:"7",mdxType:"Variant"}),(0,r.mdx)("p",null,"To prepare your app to handle push notifications, see the tutorial on ",(0,r.mdx)("a",{parentName:"p",href:"https://firebase.google.com/docs/cloud-messaging/android/client"},"setting up a Firebase Cloud Messaging client app on Android"),". After you receive the Firebase Cloud Messaging (FCM) SDK registration token, send this token and the device information to Campaign Classic by using the ",(0,r.mdx)("inlineCode",{parentName:"p"},"registerDevice")," API."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"registerDevice")," API registers a device with your Campaign Classic registration server. It takes the FCM registration token as a parameter with a user key that identifies a user, such as an email address or a login name. You can also provide a map of the custom key-value pairs that you want to associate with the registration. A boolean value is returned in the callback, which signals whether the registration was successful."),(0,r.mdx)("h4",{id:"java-1"},"Java"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void registerDevice(final String token, final String userKey, final Map<String, Object> additionalParams, final AdobeCallback<Boolean> callback)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'@Override\npublic void onNewToken(String token) {\n    Log.d("TestApp", "Refreshed token: " + token);\n\n    // If you want to send messages to this application instance or\n    // manage this app\'s subscriptions on the server side, send the\n    // Instance ID token to your app server.\n    if (token != null) {\n                Log.d("TestApp", "FCM SDK registration token received : " + token);\n                // Create a map of additional parameters\n                Map<String, Object> additionalParams = new HashMap<String, Object>();\n                additionalParams.put("name", "John");\n                additionalParams.put("serial", 12345);\n                additionalParams.put("premium", true);\n                // Send the registration info\n                CampaignClassic.registerDevice(token, "john@example.com",additionalParams,new AdobeCallback<Boolean>() {\n                    @Override\n                    public void call(final Boolean status) {\n                        Log.d("TestApp", "Registration Status: " + status);\n                    }\n                });\n      }\n}\n')),(0,r.mdx)(d,{platform:"ios-aep",api:"register-device",repeat:"12",mdxType:"Variant"}),(0,r.mdx)("p",null,"To get your app ready to handle push notifications, see the tutorial on ",(0,r.mdx)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/HandlingRemoteNotifications.html#//apple_ref/doc/uid/TP40008194-CH6-SW1"},"configuring remote notification support"),". After you receive the Apple Push Notification service (APNs) token, send this token and the device information to Campaign Classic using the ",(0,r.mdx)("inlineCode",{parentName:"p"},"registerDevice")," API."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"registerDevice")," API registers a device with your Campaign Classic registration server. It takes the APNS token as a parameter with a user key that identifies a user, such as an email address or a login name. You can also provide a map of the custom key-value pairs that you want to associate with the registration."),(0,r.mdx)("h4",{id:"swift-2"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static func registerDevice(token: Data, userKey: String?, additionalParameters: [String: Any]?)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n  let params: [String: Any] = [\n    "name": "John",\n    "serial": 12345,\n    "premium": true\n  ]\n  CampaignClassic.registerDevice(token: deviceToken, userKey: "johnDoe@example.com", additionalParameters: params)\n}\n')),(0,r.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) registerDeviceWithToken:(nonnull NSData*)token userKey:(nullable NSString*)userKey additionalParams:(nullable NSDictionary<NSString *, id> *)additionalParams;\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'- (void) application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n  NSMutableDictionary *params = [[NSMutableDictionary alloc] initWithObjectsAndKeys:  @"John", @"name", nil];\n  [params setObject: [NSNumber numberWithInt:12345] forKey: @"serial"];\n  [params setObject: [NSNumber numberWithBool:YES]  forKey: @"premium"];\n\n[AEPMobileCampaignClassic registerDeviceWithToken:deviceToken userKey:@"john@example.com" additionalParameters:params];\n}\n')),(0,r.mdx)(d,{platform:"ios-acp",api:"register-device",repeat:"12",mdxType:"Variant"}),(0,r.mdx)("p",null,"To get your app ready to handle push notifications, see the tutorial on ",(0,r.mdx)("a",{parentName:"p",href:"https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/HandlingRemoteNotifications.html#//apple_ref/doc/uid/TP40008194-CH6-SW1"},"configuring remote notification support"),". After you receive the Apple Push Notification service (APNs) token, send this token and the device information to Campaign Classic using the ",(0,r.mdx)("inlineCode",{parentName:"p"},"registerDevice")," API."),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"registerDevice")," API registers a device with your Campaign Classic registration server. It takes the APNS token as a parameter with a user key that identifies a user, such as an email address or a login name. You can also provide a map of the custom key-value pairs that you want to associate with the registration. A boolean value is returned in the callback, which signals whether the registration was successful."),(0,r.mdx)("h4",{id:"swift-3"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static func registerDevice(_ token: Data, userKey: String?, additionalParams: [String: Any]?, callback: ((Bool) -> Void)?)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n  let params: [String: Any] = [\n    "name": "John",\n    "serial": 12345,\n    "premium": true\n  ]\n  ACPCampaignClassic.registerDevice(deviceToken, userKey: "john@example.com", additionalParams: params) {\n    result in\n    print("Registration status: \\(result)")\n  }\n}\n')),(0,r.mdx)("h4",{id:"objective-c-3"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) registerDevice: (nonnull NSData*) token userKey: (nullable NSString*) userKey additionalParams: (nullable NSDictionary*) additionalParams callback: (nullable void (^) (BOOL success)) callback;\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'- (void) application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n  // Set the deviceToken that the APNS has assigned to the device\n  NSMutableDictionary *params = [[NSMutableDictionary alloc] initWithObjectsAndKeys:          @"John", @"name", nil];\n  [params setObject: [NSNumber numberWithInt:12345] forKey: @"serial"];\n  [params setObject: [NSNumber numberWithBool:YES]  forKey: @"premium"];\n\n[ACPCampaignClassic registerDevice:deviceToken userKey:@"john@example.com" additionalParams:params callback:^(BOOL success) {\n    NSLog(@"Registration Status: %d", success);\n}];\n')),(0,r.mdx)(d,{platform:"android",api:"track-notification-click",repeat:"6",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-2"},"Java"),(0,r.mdx)("p",null,"If ",(0,r.mdx)("inlineCode",{parentName:"p"},"trackInfo")," is null, or does not contain the necessary tracking identifiers, ",(0,r.mdx)("inlineCode",{parentName:"p"},"messageId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_mId"),") and ",(0,r.mdx)("inlineCode",{parentName:"p"},"deliveryId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_dId"),"), a track request is ",(0,r.mdx)("strong",{parentName:"p"},"not")," sent."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void trackNotificationClick(final Map<String, String> trackInfo)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'@Override\npublic void onResume() {\n  super.onResume();\n  // Perform any other app related tasks\n  // The messageId (_mId) and deliveryId (_dId) can be passed in the intent extras.\n  // This is assuming you extract the messageId and deliveryId from the\n  // received push message and are including it in the intent (intent.putExtra())\n  // of the displayed notification.\n\n  Bundle extras = getIntent().getExtras();\n  if (extras != null) {\n    String deliveryId = extras.getString("_dId");\n    String messageId = extras.getString("_mId");\n    if (deliveryId != null && messageId != null) {\n      Map<String,String> trackInfo = new HashMap<>();\n      trackInfo.put("_mId", messageId);\n      trackInfo.put("_dId", deliveryId);\n\n      // Send the tracking information for message opening\n      CampaignClassic.trackNotificationClick(trackInfo);\n    }\n  }\n}\n')),(0,r.mdx)(d,{platform:"ios-aep",api:"track-notification-click",repeat:"11",mdxType:"Variant"}),(0,r.mdx)("p",null,"You can pass the ",(0,r.mdx)("inlineCode",{parentName:"p"},"launchOptions")," that were received upon opening the application or ",(0,r.mdx)("inlineCode",{parentName:"p"},"userInfo"),", which contains the received push payload in ",(0,r.mdx)("inlineCode",{parentName:"p"},"userInfo"),". If ",(0,r.mdx)("inlineCode",{parentName:"p"},"userInfo")," is null or does not contain the necessary tracking identifiers, ",(0,r.mdx)("inlineCode",{parentName:"p"},"broadlogId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_mId"),") and ",(0,r.mdx)("inlineCode",{parentName:"p"},"deliveryId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_dId"),"), a track request is ",(0,r.mdx)("strong",{parentName:"p"},"not")," sent."),(0,r.mdx)("h4",{id:"swift-4"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static func trackNotificationClick(withUserInfo userInfo: [AnyHashable: Any])\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n        CampaignClassic.trackNotificationClick(withUserInfo: response.notification.request.content.userInfo)\n    }\n")),(0,r.mdx)("h4",{id:"objective-c-4"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) trackNotificationClickWithUserInfo: (nonnull NSDictionary*) userInfo;\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"-(void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler{\n    NSDictionary *userInfo = response.notification.request.content.userInfo;\n    [AEPMobileCampaignClassic trackNotificationClickWithUserInfo:userInfo];\n    completionHandler();\n}\n")),(0,r.mdx)(d,{platform:"ios-acp",api:"track-notification-click",repeat:"11",mdxType:"Variant"}),(0,r.mdx)("p",null,"You can pass the ",(0,r.mdx)("inlineCode",{parentName:"p"},"launchOptions")," that were received upon opening the application or ",(0,r.mdx)("inlineCode",{parentName:"p"},"userInfo"),", which contains the received push payload in ",(0,r.mdx)("inlineCode",{parentName:"p"},"trackInfo"),". If ",(0,r.mdx)("inlineCode",{parentName:"p"},"trackInfo")," is null or does not contain the necessary tracking identifiers, ",(0,r.mdx)("inlineCode",{parentName:"p"},"broadlogId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_mId"),") and ",(0,r.mdx)("inlineCode",{parentName:"p"},"deliveryId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_dId"),"), a track request is ",(0,r.mdx)("strong",{parentName:"p"},"not")," sent."),(0,r.mdx)("h4",{id:"swift-5"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static func trackNotificationClick(_ trackInfo: [String: String])\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n  guard let userInfo = response.notification.request.content.userInfo as? [String: String] else {\n    return;\n  }\n  ACPCampaignClassic.trackNotificationClick(userInfo);\n  completionHandler();\n}\n")),(0,r.mdx)("h4",{id:"objective-c-5"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) trackNotificationClick: (nonnull NSDictionary<NSString*, NSString*>*) trackInfo;\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'-(void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler\n{\n  NSLog(@"User Info : %@",response.notification.request.content.userInfo);\n  // Track action selected by the user for a given notification\n  [ACPCampaignClassic trackNotificationClick:response.notification.request.content.userInfo];\n  completionHandler();\n}\n')),(0,r.mdx)(d,{platform:"android",api:"track-notification-receive",repeat:"6",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-3"},"Java"),(0,r.mdx)("p",null,"If ",(0,r.mdx)("inlineCode",{parentName:"p"},"trackInfo")," is null or does not contain the necessary tracking identifiers, ",(0,r.mdx)("inlineCode",{parentName:"p"},"messageId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_mId"),") and ",(0,r.mdx)("inlineCode",{parentName:"p"},"deliveryId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_dId"),"), a track request is ",(0,r.mdx)("strong",{parentName:"p"},"not")," sent."),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public static void trackNotificationReceive(final Map<String, String> trackInfo)\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'public class MyFirebaseMessagingService extends FirebaseMessagingService {\n  @Override\n  public void onMessageReceived(RemoteMessage remoteMessage) {\n    Log.d("TestApp", "Receive message from: " + remoteMessage.getFrom());\n    Map<String,String> payloadData = message.getData();\n\n    // Check if message contains data payload.\n    if (payloadData.size() > 0) {\n      Map<String,String> trackInfo = new HashMap<>();\n      trackInfo.put("_mId", payloadData.get("_mId"));\n      trackInfo.put("_dId", payloadData.get("_dId"));\n\n      // Send the tracking information for message received\n      CampaignClassic.trackNotificationReceive(trackInfo);\n    }\n  }\n}\n')),(0,r.mdx)(d,{platform:"ios-aep",api:"track-notification-receive",repeat:"11",mdxType:"Variant"}),(0,r.mdx)("p",null,"You can pass the ",(0,r.mdx)("inlineCode",{parentName:"p"},"launchOptions")," that were received upon opening the application or ",(0,r.mdx)("inlineCode",{parentName:"p"},"userInfo"),", which contains the received push payload in ",(0,r.mdx)("inlineCode",{parentName:"p"},"userInfo"),". If ",(0,r.mdx)("inlineCode",{parentName:"p"},"userInfo")," is null or does not contain the necessary tracking identifiers, ",(0,r.mdx)("inlineCode",{parentName:"p"},"broadlogId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_mId"),") and ",(0,r.mdx)("inlineCode",{parentName:"p"},"deliveryId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_dId"),"), a track request is ",(0,r.mdx)("strong",{parentName:"p"},"not")," sent."),(0,r.mdx)("h4",{id:"swift-6"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static func trackNotificationReceive(withUserInfo userInfo: [AnyHashable: Any])\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n\n  guard let aps = userInfo["aps"] as? [String: Any] else {\n    completionHandler(.failed)\n    return\n  }\n  if aps["content-available"] as? Int == 1 {\n    // Track silent push notification receive\n    CampaignClassic.trackNotificationReceive(withUserInfo: userInfo)\n    completionHandler(.noData)\n  }\n}\n')),(0,r.mdx)("h4",{id:"objective-c-6"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) trackNotificationReceiveWithUserInfo:(nonnull NSDictionary*) userInfo;\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)launchOptions fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler\n{\n  if ( launchOptions) NSLog(@"launchOptions: %@", [launchOptions description]);\n  // Tracking silent push notification receive\n  if ( [launchOptions[@"aps"][@"content-available"] intValue] == 1 ) {\n    NSLog(@"Silent Push Notification");\n    [AEPMobileCampaignClassic trackNotificationReceiveWithUserInfo:userInfo];\n    completionHandler(UIBackgroundFetchResultNoData);\n  }\n}\n')),(0,r.mdx)(d,{platform:"ios-acp",api:"track-notification-receive",repeat:"11",mdxType:"Variant"}),(0,r.mdx)("p",null,"You can pass the ",(0,r.mdx)("inlineCode",{parentName:"p"},"launchOptions")," that were received upon opening the application or ",(0,r.mdx)("inlineCode",{parentName:"p"},"userInfo")," , which contains the received push payload in ",(0,r.mdx)("inlineCode",{parentName:"p"},"trackInfo"),". If ",(0,r.mdx)("inlineCode",{parentName:"p"},"trackInfo")," is null or does not contain the necessary tracking identifiers, ",(0,r.mdx)("inlineCode",{parentName:"p"},"broadlogId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_mId"),") and ",(0,r.mdx)("inlineCode",{parentName:"p"},"deliveryId")," (",(0,r.mdx)("inlineCode",{parentName:"p"},"_dId"),"), a track request is ",(0,r.mdx)("strong",{parentName:"p"},"not")," sent."),(0,r.mdx)("h4",{id:"swift-7"},"Swift"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"static func trackNotificationReceive(_ trackInfo: [String: String])\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n\n  guard let aps = userInfo["aps"] as? [String: Any] else {\n    completionHandler(.failed)\n    return\n  }\n  if aps["content-available"] as? Int == 1 {\n    // Track silent push notification receive\n    ACPCampaignClassic.trackNotificationReceive(userInfo)\n    completionHandler(.noData)\n  }\n}\n')),(0,r.mdx)("h4",{id:"objective-c-7"},"Objective-C"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Syntax")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) trackNotificationReceive: (nonnull NSDictionary<NSString*, NSString*>*) trackInfo;\n")),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"Example")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)launchOptions fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler\n{\n  if ( launchOptions) NSLog(@"launchOptions: %@", [launchOptions description]);\n  // Tracking silent push notification receive\n  if ( [launchOptions[@"aps"][@"content-available"] intValue] == 1 ) {\n    NSLog(@"Silent Push Notification");\n    [ACPCampaignClassic trackNotificationReceive:launchOptions];\n    completionHandler(UIBackgroundFetchResultNoData);\n  }\n}\n')))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=11e2e569cfad33bdf5e875f55f914d0f95ceaaee-5e57bbd4a5b01e969c33.js.map