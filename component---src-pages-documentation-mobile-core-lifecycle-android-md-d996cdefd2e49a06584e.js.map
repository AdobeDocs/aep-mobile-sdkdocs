{"version":3,"file":"component---src-pages-documentation-mobile-core-lifecycle-android-md-d996cdefd2e49a06584e.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/documentation/mobile-core/lifecycle/android.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"lifecycle-extension-in-android\"\n    }}>{`Lifecycle extension in Android`}</h1>\n    <h2 {...{\n      \"id\": \"implementing-lifecycle-metrics-in-android\"\n    }}>{`Implementing Lifecycle Metrics in Android`}</h2>\n    <p>{`For implementation details, please reference the guide on `}<a parentName=\"p\" {...{\n        \"href\": \"./index.md#register-lifecycle-with-mobile-core-and-add-appropriate-start-pause-calls\"\n      }}>{`registering Lifecycle with Mobile Core and adding the appropriate start/pause calls`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"tracking-app-crashes-in-android\"\n    }}>{`Tracking app crashes in Android`}</h2>\n    <p>{`This information helps you understand how crashes are tracked and the best practices to handle false crashes.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`App crashes are tracked as part of lifecycle metrics. Before you can track crashes, add the library to your project.`}</p>\n    <p>{`When lifecycle metrics are implemented, a call is made to `}<inlineCode parentName=\"p\">{`MobileCore.lifecycleStart(additionalContextData)`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`OnResume`}</inlineCode>{` method of each activity. In the `}<inlineCode parentName=\"p\">{`onPause`}</inlineCode>{` method, a call is made to `}<inlineCode parentName=\"p\">{`MobileCore.lifecyclePause()`}</inlineCode>{`. In the `}<inlineCode parentName=\"p\">{`MobileCore.lifecyclePause()`}</inlineCode>{` method, a flag is set to indicate a graceful exit. When the app is launched again or resumed, `}<inlineCode parentName=\"p\">{`MobileCore.lifecycleStart(additionalContextData)`}</inlineCode>{` checks this flag. If the app did not exit successfully as determined by the flag status, an `}<inlineCode parentName=\"p\">{`a.CrashEvent`}</inlineCode>{` context data is sent with the next call, and a crash event is reported.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`To ensure accurate crash reporting, you must call `}<inlineCode parentName=\"p\">{`lifecyclePause()`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`onPause`}</inlineCode>{` method of each activity.`}</p>\n    <p>{`To understand why this is essential, here is an illustration of the Android activity lifecycle:`}<span parentName=\"p\" {...{\n        \"className\": \"gatsby-resp-image-wrapper\",\n        \"style\": {\n          \"position\": \"relative\",\n          \"display\": \"block\",\n          \"marginLeft\": \"auto\",\n          \"marginRight\": \"auto\",\n          \"maxWidth\": \"652px\"\n        }\n      }}>{`\n      `}<span parentName=\"span\" {...{\n          \"className\": \"gatsby-resp-image-background-image\",\n          \"style\": {\n            \"paddingBottom\": \"108.74999999999999%\",\n            \"position\": \"relative\",\n            \"bottom\": \"0\",\n            \"left\": \"0\",\n            \"display\": \"block\",\n            \"transition\": \"opacity 0.5s 0.5s\",\n            \"pointerEvents\": \"none\"\n          }\n        }}></span>{`\n  `}<picture parentName=\"span\">{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/aep-mobile-sdkdocs/static/e30dc92032a4fa0afec3e601408bb0ba/5530d/android-crash.webp 320w\", \"/aep-mobile-sdkdocs/static/e30dc92032a4fa0afec3e601408bb0ba/0c8fb/android-crash.webp 640w\", \"/aep-mobile-sdkdocs/static/e30dc92032a4fa0afec3e601408bb0ba/9a7b5/android-crash.webp 652w\"],\n            \"sizes\": \"(max-width: 652px) 100vw, 652px\",\n            \"type\": \"image/webp\"\n          }}></source>{`\n          `}<source parentName=\"picture\" {...{\n            \"srcSet\": [\"/aep-mobile-sdkdocs/static/e30dc92032a4fa0afec3e601408bb0ba/dd4a7/android-crash.png 320w\", \"/aep-mobile-sdkdocs/static/e30dc92032a4fa0afec3e601408bb0ba/0f09e/android-crash.png 640w\", \"/aep-mobile-sdkdocs/static/e30dc92032a4fa0afec3e601408bb0ba/43b96/android-crash.png 652w\"],\n            \"sizes\": \"(max-width: 652px) 100vw, 652px\",\n            \"type\": \"image/png\"\n          }}></source>{`\n          `}<img parentName=\"picture\" {...{\n            \"className\": \"gatsby-resp-image-image\",\n            \"src\": \"/aep-mobile-sdkdocs/static/e30dc92032a4fa0afec3e601408bb0ba/43b96/android-crash.png\",\n            \"alt\": \"android crash\",\n            \"title\": \"android crash\",\n            \"loading\": \"lazy\",\n            \"style\": {\n              \"width\": \"100%\",\n              \"height\": \"100%\",\n              \"margin\": \"0\",\n              \"verticalAlign\": \"middle\",\n              \"position\": \"absolute\",\n              \"opacity\": \"0\",\n              \"transition\": \"opacity 0.5s\",\n              \"color\": \"inherit\",\n              \"boxShadow\": \"inset 0px 0px 0px 400px none\",\n              \"top\": \"0\",\n              \"left\": \"0\"\n            }\n          }}></img>{`\n        `}</picture>{`\n    `}</span></p>\n    <p>{`For more information about the Android activity lifecycle, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.android.com/guide/components/activities/\"\n      }}>{`Activities`}</a>{`.`}</p>\n    <p>{`This Android lifecycle illustration was created and shared by the `}<a parentName=\"p\" {...{\n        \"href\": \"https://source.android.com/\"\n      }}>{`Android Open Source Project`}</a>{` and used according to terms in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://creativecommons.org/licenses/by/2.5/\"\n      }}>{`Creative Commons 2.5 Attribution License`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"what-can-cause-a-false-crash-to-be-reported\"\n    }}>{`What can cause a false crash to be reported?`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`If you are debugging by using an IDE such as Android Studio, and launching the app again from the IDE while the app is in the foreground causes a crash.`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`You can avoid this crash by backgrounding the app before launching again from the IDE.`}</li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">{`If the previous foreground Activity of your app is moved to the background and does not call `}<inlineCode parentName=\"li\">{`MobileCore.lifecyclePause()`}</inlineCode>{`in `}<inlineCode parentName=\"li\">{`onPause`}</inlineCode>{`, and your app is manually closed or killed by the operating system, the next launch results in a crash.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"how-should-fragments-be-handled\"\n    }}>{`How should Fragments be handled?`}</h3>\n    <p>{`Fragments have application lifecycle events that are similar to Activities. However, a Fragment cannot be active without being attached to an Activity.`}</p>\n    <h2 {...{\n      \"id\": \"implementing-global-lifecycle-callbacks\"\n    }}>{`Implementing global lifecycle callbacks`}</h2>\n    <p>{`Starting with API Level 14, Android allows global lifecycle callbacks for activities. For more information, please read the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.android.com/reference/android/app/Application#registerActivityLifecycleCallbacks%28android.app.Application.ActivityLifecycleCallbacks\"\n      }}>{`Android developer guide`}</a>{`.`}</p>\n    <p>{`You can use these callbacks to ensure that all of your `}<inlineCode parentName=\"p\">{`Activities`}</inlineCode>{` correctly call `}<inlineCode parentName=\"p\">{`AdobeMobileMarketing.lifecycleStart()`}</inlineCode>{`, and do not need to implement the code for each of the Activity.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import com.adobe.marketing.mobile.*;\n\npublic class MainActivity extends Activity {    \n\n@Override    \nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);        \n    setContentView(R.layout.activity_main);        \n\n    getApplication().registerActivityLifecycleCallbacks(new Application.ActivityLifecycleCallbacks() {        \n    @Override        \n    public void onActivityResumed(Activity activity) {\n        MobileCore.setApplication(getApplication());\n        MobileCore.lifecycleStart(null);        \n        }        \n        @Override        \n        public void onActivityPaused(Activity activity) { \n            MobileCore.lifecyclePause();        \n        }        \n        // the following methods aren't needed for our lifecycle purposes, but are        \n        // required to be implemented by the ActivityLifecycleCallbacks object        \n        @Override        \n        public void onActivityCreated(Activity activity, Bundle savedInstanceState) {}        \n        @Override        \n        public void onActivityStarted(Activity activity) {}        \n        @Override        \n        public void onActivityStopped(Activity activity) {}        \n        @Override        \n        public void onActivitySaveInstanceState(Activity activity, Bundle outState) {}        \n        @Override        \n        public void onActivityDestroyed(Activity activity) {}        \n        });    \n    }\n ...\n}\n`}</code></pre>\n    <p>{`To include additional data with lifecycle metric calls, pass an additional parameter to `}<inlineCode parentName=\"p\">{`lifecycleStart`}</inlineCode>{` that contains context data:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Overridepublic \nvoid onResume() {    \n  HashMap<String, Object> additionalContextData = new HashMap<String, Object>();    \n  contextData.put(\"myapp.category\", \"Game\");    \n  MobileCore.lifecycleStart(additionalContextData);}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You only need to add this code in your main Activity and any other Activity in which your app may be launched.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","isMDXComponent"],"sourceRoot":""}