"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[6254],{29809:function(e,a,r){r.r(a),r.d(a,{_frontmatter:function(){return i},default:function(){return g}});var t,n=r(87462),d=r(63366),o=(r(15007),r(64983)),m=r(91515),l=r(47968),p=["components"],i={},c=(t="Variant",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)}),s={_frontmatter:i},u=m.Z;function g(e){var a=e.components,r=(0,d.Z)(e,p);return(0,o.mdx)(u,(0,n.Z)({},s,r,{components:a,mdxType:"MDXLayout"}),(0,o.mdx)(c,{platform:"android-kotlin",task:"add",repeat:"3",mdxType:"Variant"}),(0,o.mdx)("p",null,"Add the required dependencies to your project by including them in the app's Gradle file."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-kotlin"},'implementation(platform("com.adobe.marketing.mobile:sdk-bom:3.+"))\nimplementation("com.adobe.marketing.mobile:core")\nimplementation("com.adobe.marketing.mobile:identity")\nimplementation("com.adobe.marketing.mobile:target")\n')),(0,o.mdx)(l.default,{query:"platform=android-gradle&componentClass=InlineNestedAlert",mdxType:"Alerts"}),(0,o.mdx)(c,{platform:"android-groovy",task:"add",repeat:"3",mdxType:"Variant"}),(0,o.mdx)("p",null,"Add the required dependencies to your project by including them in the app's Gradle file."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"implementation platform('com.adobe.marketing.mobile:sdk-bom:3.+')\nimplementation 'com.adobe.marketing.mobile:core'\nimplementation 'com.adobe.marketing.mobile:identity'\nimplementation 'com.adobe.marketing.mobile:target'\n")),(0,o.mdx)(l.default,{query:"platform=android-gradle&componentClass=InlineNestedAlert",mdxType:"Alerts"}),(0,o.mdx)(c,{platform:"ios-pods",task:"add",repeat:"2",mdxType:"Variant"}),(0,o.mdx)("p",null,"Add the required dependencies to your project using CocoaPods. Add following pods in your ",(0,o.mdx)("inlineCode",{parentName:"p"},"Podfile"),":"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},"use_frameworks!\n\ntarget 'YourTargetApp' do\n  pod 'AEPCore','~>5.0'    \n  pod 'AEPIdentity','~>5.0'\n  pod 'AEPTarget','~>5.0'\nend\n")),(0,o.mdx)(c,{platform:"android",task:"target-order",repeat:"5",mdxType:"Variant"}),(0,o.mdx)("h4",{id:"java"},"Java"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Syntax")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"public TargetOrder(final String id, final double total, final List<String> purchasedProductIds)\n")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Example")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},'List<String> purchasedProductIds = new ArrayList<String>();\npurchasedProductIds.add("34");\npurchasedProductIds.add("125");\nTargetOrder targetOrder = new TargetOrder("123", 567.89, purchasedProductIds);\n')),(0,o.mdx)(c,{platform:"ios",task:"target-order",repeat:"10",mdxType:"Variant"}),(0,o.mdx)("h4",{id:"swift"},"Swift"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Syntax")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},"public init(id: String, total: Double = 0, purchasedProductIds: [String]? = nil)\n")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Example")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},'let order = TargetOrder(id: "id1", total: 1.0, purchasedProductIds: ["ppId1"])\n')),(0,o.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Syntax")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (nonnull instancetype) initWithId: (nonnull NSString*) id total: (double) total purchasedProductIds: (nullable NSArray<NSString*>*) purchasedProductIds;\n")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Example")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-objectivec"},'AEPTargetOrder *order = [[AEPTargetOrder alloc] initWithId:@"id1" total:1.0 purchasedProductIds:@[@"ppId1"]];\n')),(0,o.mdx)(c,{platform:"android",task:"target-product",repeat:"5",mdxType:"Variant"}),(0,o.mdx)("h4",{id:"java-1"},"Java"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Syntax")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"public TargetProduct(final String id, final String categoryId)\n")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Example")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},'TargetProduct targetProduct = new TargetProduct("123", "Books");\n')),(0,o.mdx)(c,{platform:"ios",task:"target-product",repeat:"10",mdxType:"Variant"}),(0,o.mdx)("h4",{id:"swift-1"},"Swift"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Syntax")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},"public init(productId: String, categoryId: String? = nil)\n")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Example")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},'let product = TargetProduct(productId: "pId1", categoryId: "cId1")\n')),(0,o.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Syntax")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (nonnull instancetype) initWithProductId:(nonnull NSString*) productId categoryId:(nullable NSString*) categoryId;\n")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Example")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-objectivec"},'AEPTargetProduct *product =[[AEPTargetProduct alloc] initWithProductId:@"pId1" categoryId:@"cId1"];\n')),(0,o.mdx)(c,{platform:"android",task:"target-parameters",repeat:"5",mdxType:"Variant"}),(0,o.mdx)("h4",{id:"java-2"},"Java"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Syntax")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},'TargetParameters targetParameters = new TargetParameters.Builder()\n.parameters(new HashMap<String, String>())\n.profileParameters(new HashMap<String, String>())\n.product(new TargetProduct("productId", "productCategoryId"))\n.order(new TargetOrder("orderId", 0.0, new ArrayList<String>()))\n.build();\n')),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Example")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},'List<String> purchasedProductIds = new ArrayList<String>();\npurchasedProductIds.add("34");\npurchasedProductIds.add("125");\nTargetOrder targetOrder = new TargetOrder("123", 567.89, purchasedProductIds);\n\nTargetProduct targetProduct = new TargetProduct("123", "Books");\n\nMap<String, String> mboxParameters = new HashMap<String, String>();\nmboxParameters1.put("status", "platinum");\n\nMap<String, String> profileParameters = new HashMap<String, String>();\nprofileParameters1.put("gender", "male");\n\nTargetParameters targetParameters = new TargetParameters.Builder()\n.parameters(mboxParameters)\n.profileParameters(profileParameters)\n.product(targetProduct)\n.order(targetOrder)\n.build();\n')),(0,o.mdx)(c,{platform:"ios",task:"target-parameters",repeat:"10",mdxType:"Variant"}),(0,o.mdx)("h4",{id:"swift-2"},"Swift"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Syntax")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},"public init(parameters: [String: String]? = nil, profileParameters: [String: String]? = nil, order: TargetOrder? = nil, product: TargetProduct? = nil)\n")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Example")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},'let mboxParameters = [\n"status": "Platinum"\n]\nlet profileParameters = [\n"gender": "female"\n]\n\nlet order = TargetOrder(id: "id1", total: 1.0, purchasedProductIds: ["ppId1"])\n\nlet product = TargetProduct(productId: "pId1", categoryId: "cId1")\n\nlet targetParameters = TargetParameters(parameters: mboxParameters, profileParameters: profileParameters, order: order, product: product))\n')),(0,o.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Syntax")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (nonnull instancetype) initWithParameters:(nullable NSDictionary<NSString*, NSString*>*) parameters profileParameters:(nullable NSDictionary<NSString*, NSString*>*) profileParameters order:(nullable AEPTargetOrder*) order product:(nullable AEPTargetProduct*) product;\n")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Example")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSDictionary *mboxParameters = @{@"status":@"Platinum"};\nNSDictionary *profileParameters = @{@"gender":@"female"};\n\nAEPTargetProduct *product =[[AEPTargetProduct alloc] initWithProductId:@"pId1" categoryId:@"cId1"];\n\nAEPTargetOrder *order = [[AEPTargetOrder alloc] initWithId:@"id1" total:1.0 purchasedProductIds:@[@"ppId1"]];\n\nAEPTargetParameters * targetParams = [[AEPTargetParameters alloc] initWithParameters:mboxParameters profileParameters:profileParameters order:order product:product];\n')),(0,o.mdx)(c,{platform:"android",task:"visual-preview",repeat:"2",mdxType:"Variant"}),(0,o.mdx)("p",null,"On Android, when the application is launched as a result of a deep link, the Mobile Core's ",(0,o.mdx)("a",{parentName:"p",href:"../../home/base/mobile-core/api-reference.md#collectlaunchinfo"},"collectLaunchInfo")," API is internally invoked, and the Target activity and deep link information is extracted from the Intent extras."),(0,o.mdx)("p",null,"The SDK can only collect information from the launching Activity if ",(0,o.mdx)("a",{parentName:"p",href:"../../home/base/mobile-core/api-reference.md#setapplication"},"setApplication")," has been called. Setting the Application is only necessary on an Activity that is also an entry point for your application. However, setting the Application on each Activity has no negative impact and ensures that the SDK always has the necessary reference to your Application. We recommend that you call ",(0,o.mdx)("inlineCode",{parentName:"p"},"setApplication")," API in each of your Activities."),(0,o.mdx)(c,{platform:"ios",task:"visual-preview",repeat:"7",mdxType:"Variant"}),(0,o.mdx)("p",null,"On iOS, the Mobile Core's ",(0,o.mdx)("a",{parentName:"p",href:"../../home/base/mobile-core/api-reference.md#collectlaunchinfo"},"collectLaunchInfo")," API can be invoked with the Target preview deep link as shown below:"),(0,o.mdx)("h4",{id:"swift-3"},"Swift"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Example")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},'    MobileCore.collectLaunchInfo(["adb_deeplink" : "com.adobe.targetpreview://app.adobetarget.com?at_preview_token=tokenFromTarget"])\n')),(0,o.mdx)("h4",{id:"objective-c-3"},"Objective-C"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Example")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-objectivec"},' [AEPMobileCore collectLaunchInfo:@{@"adb_deeplink" : @"com.adobe.targetpreview://app.adobetarget.com?at_preview_token=tokenFromTarget"}];\n')))}g.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-solution-adobe-target-tabs-index-md-f55c2bacc87c45f87f32.js.map