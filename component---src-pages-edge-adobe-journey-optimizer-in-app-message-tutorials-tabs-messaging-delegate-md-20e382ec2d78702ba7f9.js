"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[3956],{63582:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return d},default:function(){return u}});var s,t=a(87462),i=a(63366),o=(a(15007),a(64983)),l=a(91515),r=["components"],d={},m=(s="Variant",function(e){return console.warn("Component "+s+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)}),g={_frontmatter:d},p=l.Z;function u(e){var n=e.components,a=(0,i.Z)(e,r);return(0,o.mdx)(p,(0,t.Z)({},g,a,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)(m,{platform:"android",function:"register",repeat:"5",mdxType:"Variant"}),(0,o.mdx)("p",null,"On Android, the delegate is registered with the Adobe Service Provider. The ",(0,o.mdx)("inlineCode",{parentName:"p"},"ServiceProvider")," class maintains an optional property that holds reference to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"FullscreenMessaageDelegate"),"."),(0,o.mdx)("h4",{id:"java"},"Java"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"// defined in public class ServiceProvider \npublic void setMessageDelegate(MessagingDelegate messageDelegate)\n")),(0,o.mdx)("p",null,"On Android, the delegate is registered with Mobile Core. The ",(0,o.mdx)("inlineCode",{parentName:"p"},"MobileCore")," contains a method to set the",(0,o.mdx)("inlineCode",{parentName:"p"},"MessagingDelegate")," withing the ",(0,o.mdx)("inlineCode",{parentName:"p"},"ServiceProvider")," class."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"CustomDelegate myMessagingDelegate = new CustomDelegate();\n\nMobileCore.setMessagingDelegate(myMessagingDelegate);\n")),(0,o.mdx)(m,{platform:"ios",function:"register",repeat:"5",mdxType:"Variant"}),(0,o.mdx)("p",null,"On iOS, the delegate is registered with Mobile Core. The ",(0,o.mdx)("inlineCode",{parentName:"p"},"MobileCore")," framework maintains an optional property that holds reference to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"MessagingDelegate"),"."),(0,o.mdx)("h4",{id:"swift"},"Swift"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},"/// defined in MobileCore.swift\n@objc public static var messagingDelegate: MessagingDelegate?\n")),(0,o.mdx)("p",null,"Assuming that ",(0,o.mdx)("inlineCode",{parentName:"p"},"InAppMessagingHandler")," is a class that implements ",(0,o.mdx)("inlineCode",{parentName:"p"},"MessagingDelegate"),", execute the following code to set the delegate in ",(0,o.mdx)("inlineCode",{parentName:"p"},"MobileCore"),":"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},"let myMessagingDelegate = InAppMessagingHandler()   \n\nMobileCore.messagingDelegate = myMessagingDelegate\n")),(0,o.mdx)(m,{platform:"android",function:"messaging-delegate",repeat:"3",mdxType:"Variant"}),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"MessagingDelegate")," interface, which is implemented in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"AEPServices")," framework, is defined below:"),(0,o.mdx)("h4",{id:"java-1"},"Java"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},'/**\n * UI Message delegate which is used to listen for current message lifecycle events and control if\n * the message should be displayed.\n */\npublic interface MessagingDelegate {\n    /**\n     * Invoked when a message is displayed.\n     *\n     * @param message {@link FullscreenMessage} that is being displayed\n     */\n    default void onShow(final FullscreenMessage message) {\n        Log.debug(ServiceConstants.LOG_TAG, "MessagingDelegate", "Fullscreen message shown.");\n    }\n\n    /**\n     * Invoked when a message is dismissed.\n     *\n     * @param message {@link FullscreenMessage} that is being dismissed\n     */\n    default void onDismiss(final FullscreenMessage message) {\n        Log.debug(ServiceConstants.LOG_TAG, "MessagingDelegate", "Fullscreen message dismissed.");\n    }\n\n    /**\n     * Used to determine if a message should be shown.\n     *\n     * @param message {@link FullscreenMessage} that is about to get displayed\n     * @return true if the message should be displayed, false otherwise\n     */\n    boolean shouldShowMessage(final FullscreenMessage message);\n\n    /**\n     * Called when the {@link FullscreenMessage} loads a url.\n     *\n     * @param url {@code String} being loaded by the {@code FullscreenMessage}\n     * @param message {@link FullscreenMessage} loading a url {@code String}\n     */\n    default void urlLoaded(final String url, final FullscreenMessage message) {\n        Log.debug(\n                ServiceConstants.LOG_TAG,\n                "MessagingDelegate",\n                "Fullscreen message loaded url: %s",\n                url);\n    }\n}\n')),(0,o.mdx)(m,{platform:"ios",function:"messaging-delegate",repeat:"3",mdxType:"Variant"}),(0,o.mdx)("p",null,"On iOS, the ",(0,o.mdx)("inlineCode",{parentName:"p"},"MessagingDelegate")," protocol, which is implemented in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"AEPServices")," framework, is defined below:"),(0,o.mdx)("h4",{id:"swift-1"},"Swift"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},"/// UI Message delegate which is used to listen for current message lifecycle events\n@objc(AEPMessagingDelegate)\npublic protocol MessagingDelegate {\n    /// Invoked when a message is displayed\n    /// - Parameters:\n    ///     - message: UIMessaging message that is being displayed\n    @objc(onShow:)\n    func onShow(message: Showable)\n\n    /// Invoked when a message is dismissed\n    /// - Parameters:\n    ///     - message: UIMessaging message that is being dismissed\n    @objc(onDismiss:)\n    func onDismiss(message: Showable)\n\n    /// Used to find whether messages should be shown or not\n    ///\n    /// IMPORTANT! - this method is called on a background thread. \n    /// Any direct interactions with the Message's WKWebView made by the delegate\n    /// should be dispatched back to the main thread.\n    ///\n    /// - Parameters:\n    ///     - message: UIMessaging message that is about to get displayed\n    /// - Returns: true if the message should be shown else false\n    @objc(shouldShowMessage:)\n    func shouldShowMessage(message: Showable) -> Bool\n\n    /// Called when `message` loads a URL\n    /// - Parameters:\n    ///     - url: the `URL` being loaded by the `message`\n    ///     - message: the Message loading a `URL`\n    @objc(urlLoaded:byMessage:)\n    optional func urlLoaded(_ url: URL, byMessage message: Showable)\n}\n")),(0,o.mdx)(m,{platform:"android",function:"using-object",repeat:"4",mdxType:"Variant"}),(0,o.mdx)("p",null,"The user interface methods (except for ",(0,o.mdx)("inlineCode",{parentName:"p"},"onShowFailure()"),") in a ",(0,o.mdx)("inlineCode",{parentName:"p"},"MessagingDelegate")," implementation will be passed an ",(0,o.mdx)("inlineCode",{parentName:"p"},"AEPMessage")," object. An ",(0,o.mdx)("inlineCode",{parentName:"p"},"AEPMessage")," object is the Android Core implementation of the ",(0,o.mdx)("inlineCode",{parentName:"p"},"FullscreenMessage")," interface. It contains a reference to the parent ",(0,o.mdx)("inlineCode",{parentName:"p"},"Message")," class and is your primary way to interact with the message."),(0,o.mdx)("p",null,"A reference to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"AEPMessage")," object can be obtained by calling ",(0,o.mdx)("inlineCode",{parentName:"p"},"fullscreenMessage.getParent()")," . An example of how to access the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Message")," in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"onShow")," delegate method can be seen below:"),(0,o.mdx)("h4",{id:"java-2"},"Java"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},'@Override\npublic void onShow(FullscreenMessage fullscreenMessage) {\n  Message message = (Message) fullscreenMessage.getParent();\n  System.out.println("message was shown: " + message.id);\n}\n')),(0,o.mdx)(m,{platform:"ios",function:"using-object",repeat:"6",mdxType:"Variant"}),(0,o.mdx)("p",null,"Each of the methods implemented in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"MessagingDelegate")," will be passed a ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/adobe/aepsdk-core-ios/blob/main/AEPServices/Sources/ui/Showable.swift"},(0,o.mdx)("inlineCode",{parentName:"a"},"Showable"))," object. In the AEPMessaging SDK, the class implementing ",(0,o.mdx)("inlineCode",{parentName:"p"},"Showable")," is ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/adobe/aepsdk-core-ios/blob/main/AEPServices/Sources/ui/fullscreen/FullscreenMessage.swift"},(0,o.mdx)("inlineCode",{parentName:"a"},"FullscreenMessage")),". A ",(0,o.mdx)("inlineCode",{parentName:"p"},"FullscreenMessage")," object is wrapped in the ",(0,o.mdx)("a",{parentName:"p",href:"../public-classes-enums.md"},(0,o.mdx)("inlineCode",{parentName:"a"},"Message"))," class, and is your primary way to interact with the message."),(0,o.mdx)("p",null,"To get a reference to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Message")," object:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Convert the ",(0,o.mdx)("inlineCode",{parentName:"li"},"Showable")," message parameter to ",(0,o.mdx)("inlineCode",{parentName:"li"},"FullscreenMessage")),(0,o.mdx)("li",{parentName:"ol"},"Access the ",(0,o.mdx)("inlineCode",{parentName:"li"},"parent")," variable (note that ",(0,o.mdx)("inlineCode",{parentName:"li"},"parent")," is variable defined in ",(0,o.mdx)("inlineCode",{parentName:"li"},"FullscreenMessage+Message.swift"),", an extension in the AEPMessaging framework)")),(0,o.mdx)("p",null,"An example of how to access the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Message")," in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"onShow")," delegate method can be seen below:"),(0,o.mdx)("h4",{id:"swift-2"},"Swift"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},'func onShow(message: Showable) {\n    let fullscreenMessage = message as? FullscreenMessage\n    let message = fullscreenMessage?.parent\n    print("message was shown \\(message?.id ?? "undefined")")\n}\n')),(0,o.mdx)(m,{platform:"android",function:"controlling-message",repeat:"7",mdxType:"Variant"}),(0,o.mdx)("p",null,"If a custom  ",(0,o.mdx)("inlineCode",{parentName:"p"},"MessagingDelegate")," has been set in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"ServiceProvider"),", this delegate's ",(0,o.mdx)("inlineCode",{parentName:"p"},"shouldShowMessage")," method will be called prior to displaying an in-app message for which the end user has qualified. You are responsible for returning ",(0,o.mdx)("inlineCode",{parentName:"p"},"true")," if the message should be shown, or ",(0,o.mdx)("inlineCode",{parentName:"p"},"false")," if the message should be suppressed."),(0,o.mdx)("p",null,"An example of when you may choose to suppress an in-app message due to the status of some other workflow within the app can be seen below:"),(0,o.mdx)("h4",{id:"java-3"},"Java"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},'@Override\npublic boolean shouldShowMessage(FullscreenMessage fullscreenMessage) {\n   if (someOtherWorkflowStatus == "inProgress") {\n        return false;\n    }\n    return true;\n}\n')),(0,o.mdx)("p",null,"Another option is to store a reference to the  ",(0,o.mdx)("inlineCode",{parentName:"p"},"FullscreenMessage")," object, and call the ",(0,o.mdx)("inlineCode",{parentName:"p"},"show()")," method on it at a later time."),(0,o.mdx)("p",null,"Continuing with the above example, after you have stored the message that was triggered initially, you can choose to show it upon completion of the other workflow:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},'Message currentMessage = null;\nString anotherWorkflowStatus;\n\npublic void otherWorkflowFinished() {\n    anotherWorkflowStatus = "complete";\n    currentMessage.show();\n}\n\n@Override\npublic boolean shouldShowMessage(FullscreenMessage fullscreenMessage) {\n   if (someOtherWorkflowStatus.equals("inProgress")) {\n     // store the current message for later use\n     currentMessage = (Message) fullscreenMessage.getParent();\n     return false;\n   }\n  \n  return true;\n}\n')),(0,o.mdx)(m,{platform:"ios",function:"controlling-message",repeat:"7",mdxType:"Variant"}),(0,o.mdx)("p",null,"If a ",(0,o.mdx)("inlineCode",{parentName:"p"},"MessagingDelegate")," has been provided to ",(0,o.mdx)("inlineCode",{parentName:"p"},"MobileCore"),", the delegate's ",(0,o.mdx)("inlineCode",{parentName:"p"},"shouldShowMessage")," method will be called prior to displaying an in-app message for which the end user has qualified. You are responsible for returning ",(0,o.mdx)("inlineCode",{parentName:"p"},"true")," if the message should be shown, or ",(0,o.mdx)("inlineCode",{parentName:"p"},"false")," if the message should be suppressed."),(0,o.mdx)("p",null,"An example of when you may choose to suppress an in-app message due to the status of some other workflow within the app can be seen below:"),(0,o.mdx)("h4",{id:"swift-3"},"Swift"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},'func shouldShowMessage(message: Showable) -> Bool {\n    if someOtherWorkflowStatus == "inProgress" {\n        return false\n    }\n\n    return true\n}\n')),(0,o.mdx)("p",null,"Another option is to store a reference to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"Message")," object, and call the ",(0,o.mdx)("inlineCode",{parentName:"p"},"show()")," method on it at a later time."),(0,o.mdx)("p",null,"Continuing with the above example, after you have stored the message that was triggered initially, you can choose to show it upon completion of the other workflow:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},'var currentMessage: Message?\n\nfunc otherWorkflowFinished() {\n    anotherWorkflowStatus = "complete"\n    currentMessage?.show()\n}\n\nfunc shouldShowMessage(message: Showable) -> Bool {\n    if someOtherWorkflowStatus == "inProgress" {        \n        let fullscreenMessage = message as? FullscreenMessage\n\n        // store the current message for later use\n        currentMessage = fullscreenMessage?.parent\n\n        return false\n    }\n\n    return true\n}\n')),(0,o.mdx)(m,{platform:"android",function:"integrate-message",repeat:"4",mdxType:"Variant"}),(0,o.mdx)("p",null,"If you would like to manually integrate the ",(0,o.mdx)("inlineCode",{parentName:"p"},"View")," that contains the UI for an in-app message, you can do so by accessing the ",(0,o.mdx)("inlineCode",{parentName:"p"},"WebView")," directly in a ",(0,o.mdx)("inlineCode",{parentName:"p"},"MessagingDelegate")," method.  "),(0,o.mdx)("p",null,"In the example below, you can decide whether or not the in-app message should be directly integrated into your existing UI. If so, you capture a reference to the message's ",(0,o.mdx)("inlineCode",{parentName:"p"},"WebView")," and return ",(0,o.mdx)("inlineCode",{parentName:"p"},"false")," to prevent the message from being shown by the SDK:"),(0,o.mdx)("h4",{id:"java-4"},"Java"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"private Message currentMessage = null;\nprivate boolean shouldIntegrateMessageDirectly = true;\nprivate MessageWebView inAppMessageView;\n\n@Override\npublic boolean shouldShowMessage(FullscreenMessage fullscreenMessage) {\n  if (shouldIntegrateMessageDirectly) {\n    this.currentMessage = (Message) fullscreenMessage.getParent();\n    \n    // cast to MessageWebView to access the startInAppMessage function\n    inAppMessageView = (MessageWebView) currentMessage.getWebView();\n    \n    return false;\n  }\n  \n  return true;\n}\n")),(0,o.mdx)(m,{platform:"ios",function:"integrate-message",repeat:"4",mdxType:"Variant"}),(0,o.mdx)("p",null,"If you would like to manually integrate the ",(0,o.mdx)("inlineCode",{parentName:"p"},"View")," that contains the UI for an in-app message, you can do so by accessing the ",(0,o.mdx)("inlineCode",{parentName:"p"},"WKWebView")," directly in a ",(0,o.mdx)("inlineCode",{parentName:"p"},"MessagingDelegate")," method.  "),(0,o.mdx)("p",null,"IMPORTANT! - The ",(0,o.mdx)("inlineCode",{parentName:"p"},"shouldShowMessage")," delegate method is called on a background thread. Any direct interactions with the Message's ",(0,o.mdx)("inlineCode",{parentName:"p"},"WKWebView")," made by the delegate should be dispatched back to the main thread."),(0,o.mdx)("p",null,"In the example below, you can decide whether or not the in-app message should be directly integrated into your existing UI. If so, you capture a reference to the message's ",(0,o.mdx)("inlineCode",{parentName:"p"},"WKWebView")," and return ",(0,o.mdx)("inlineCode",{parentName:"p"},"false")," to prevent the message from being shown by the SDK:"),(0,o.mdx)("h4",{id:"swift-4"},"Swift"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},"var inAppMessageView: WKWebView?\n\nfunc shouldShowMessage(message: Showable) -> Bool {    \n    if shouldIntegrateMessageDirectly {\n        let fullscreenMessage = message as? FullscreenMessage\n        let message = fullscreenMessage?.parent\n\n        inAppMessageView = message?.view as? WKWebView\n\n        return false\n    }\n\n    return true\n}\n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-edge-adobe-journey-optimizer-in-app-message-tutorials-tabs-messaging-delegate-md-20e382ec2d78702ba7f9.js.map