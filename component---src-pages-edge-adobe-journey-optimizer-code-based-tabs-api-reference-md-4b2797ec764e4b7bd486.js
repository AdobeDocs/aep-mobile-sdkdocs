"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[5201],{60517:function(e,r,a){a.r(r),a.d(r,{_frontmatter:function(){return u},default:function(){return d}});var n,o=a(87462),i=a(63366),t=(a(15007),a(64983)),s=a(91515),p=["components"],u={},l=(n="Variant",function(e){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,t.mdx)("div",e)}),c={_frontmatter:u},m=s.Z;function d(e){var r=e.components,a=(0,i.Z)(e,p);return(0,t.mdx)(m,(0,o.Z)({},c,a,{components:r,mdxType:"MDXLayout"}),(0,t.mdx)(l,{platform:"android",api:"get-propositions-for-surfaces",repeat:"6",mdxType:"Variant"}),(0,t.mdx)("h4",{id:"java"},"Java"),(0,t.mdx)("p",null,(0,t.mdx)("strong",{parentName:"p"},"Syntax")),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-java"},"public static void getPropositionsForSurfaces(@NonNull final List<Surface> surfaces, @NonNull final AdobeCallback<Map<Surface, List<Proposition>>> callback)\n")),(0,t.mdx)("ul",null,(0,t.mdx)("li",{parentName:"ul"},(0,t.mdx)("em",{parentName:"li"},"surfaces")," is a list of surfaces for which propositions are requested."),(0,t.mdx)("li",{parentName:"ul"},(0,t.mdx)("em",{parentName:"li"},"callback")," ",(0,t.mdx)("inlineCode",{parentName:"li"},"call")," method is invoked with propositions map of type ",(0,t.mdx)("inlineCode",{parentName:"li"},"Map<Surface, List<Proposition>>"),". If the callback is an instance of ",(0,t.mdx)("a",{parentName:"li",href:"../../../../home/base/mobile-core/api-reference.md#adobecallbackwitherror"},"AdobeCallbackWithError"),", and if the operation times out or an error occurs in retrieving propositions, the ",(0,t.mdx)("inlineCode",{parentName:"li"},"fail")," method is invoked with the appropriate ",(0,t.mdx)("a",{parentName:"li",href:"../../../../home/base/mobile-core/api-reference.md#adobeerror"},"AdobeError"),".")),(0,t.mdx)("p",null,(0,t.mdx)("strong",{parentName:"p"},"Syntax")),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-java"},'final Surface surface1 = new Surface("myActivity#button");\nfinal Surface surface2 = new Surface("myActivityAttributes");\n\nfinal List<Surface> surfaces = new ArrayList<>();\nsurfaces.add(surface1);\nsurfaces.add(surface2);\n\nMessaging.getPropositionsForSurfaces(surfaces, new AdobeCallbackWithError<Map<Surface, List<Proposition>>>() {\n    @Override\n    public void fail(final AdobeError adobeError) {\n        // handle error\n    }\n\n    @Override\n    public void call(Map<Surface, List<Proposition>> propositionsMap) {\n        if (propositionsMap != null && !propositionsMap.isEmpty()) {\n            // get the propositions for the given surfaces\n            if (propositionsMap.contains(surface1)) {\n                final List<Proposition> propositions1 = propositionsMap.get(surface1)\n                // read surface1 propositions\n            }\n            if (propositionsMap.contains(surface2)) {\n                final List<Proposition> proposition2 = propositionsMap.get(surface2)\n                // read surface2 propositions\n            }\n        }\n    }\n});\n')),(0,t.mdx)(l,{platform:"ios",api:"get-propositions-for-surfaces",repeat:"12",mdxType:"Variant"}),(0,t.mdx)("h4",{id:"swift"},"Swift"),(0,t.mdx)("p",null,(0,t.mdx)("strong",{parentName:"p"},"Syntax")),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-swift"},"static func getPropositionsForSurfaces(_ surfacePaths: [Surface], _ completion: @escaping ([Surface: [Proposition]]?, Error?) -> Void)\n")),(0,t.mdx)("ul",null,(0,t.mdx)("li",{parentName:"ul"},(0,t.mdx)("em",{parentName:"li"},"surfaces")," is an array of surfaces for which propositions are requested."),(0,t.mdx)("li",{parentName:"ul"},(0,t.mdx)("em",{parentName:"li"},"completion")," is invoked with propositions dictionary of type ",(0,t.mdx)("inlineCode",{parentName:"li"},"[Surface: [Proposition]]"),". An ",(0,t.mdx)("inlineCode",{parentName:"li"},"Error")," is returned if SDK fails to retrieve the propositions.")),(0,t.mdx)("p",null,(0,t.mdx)("strong",{parentName:"p"},"Syntax")),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-swift"},'let surface1 = Surface(path: "myView#button")\nlet surface2 = Surface(path: "myViewAttributes")\n\nMessaging.getPropositionsForSurfaces([surface1, surface2]) { propositionsDict, error in\n    guard error == nil else {\n        // handle error\n        return\n    }\n\n    guard let propositionsDict = propositionsDict else {\n        // bail early if no propositions\n        return\n    }\n    \n    // get the propositions for the given surfaces\n    if let propositions1 = propositionsDict[surface1] {\n        // read surface1 propositions\n    }\n\n    if let propositions2 = propositionsDict[surface2] {\n        // read surface2 propositions\n    }\n}\n')),(0,t.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,t.mdx)("p",null,(0,t.mdx)("strong",{parentName:"p"},"Syntax")),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-objc"},"+ (void) getPropositionsForSurfaces: (NSArray<AEPSurface*>* _Nonnull) surfaces \n              completion: (void (^ _Nonnull)(NSDictionary<AEPSurface*, NSArray<AEPProposition*>*>* _Nullable propositionsDict, NSError* _Nullable error)) completion;\n")),(0,t.mdx)("ul",null,(0,t.mdx)("li",{parentName:"ul"},(0,t.mdx)("em",{parentName:"li"},"surfaces")," is an array of surfaces for which propositions are requested."),(0,t.mdx)("li",{parentName:"ul"},(0,t.mdx)("em",{parentName:"li"},"completion")," is invoked with propositions dictionary of type ",(0,t.mdx)("inlineCode",{parentName:"li"},"NSDictionary<AEPSurface*, NSArray<AEPProposition*>*>"),". An ",(0,t.mdx)("inlineCode",{parentName:"li"},"NSError")," is returned if SDK fails to retrieve the propositions.")),(0,t.mdx)("p",null,(0,t.mdx)("strong",{parentName:"p"},"Syntax")),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-objc"},'AEPSurface* surface1 = [[AEPSurface alloc] initWithPath: @"myView#button"];\nAEPSurface* surface2 = [[AEPSurface alloc] initWithPath: @"myView#button"];\n\n[AEPMobileMessaging getPropositionsForSurfaces: @[surface1, surface2] \n                        completion: ^(NSDictionary<AEPDecisionScope*, NSArray<AEPProposition*>*>* propositionsDict, NSError* error) {\n  if (error != nil) {\n    // handle error   \n    return;\n  }\n\n  NSArray<AEPProposition*>* proposition1 = propositionsDict[surface1];\n  // read surface1 propositions\n\n  NSArray<AEPProposition*>* proposition2 = propositionsDict[surface2];\n  // read surface2 propositions\n}];\n')),(0,t.mdx)(l,{platform:"android",api:"update-propositions-for-surfaces",repeat:"6",mdxType:"Variant"}),(0,t.mdx)("h4",{id:"java-1"},"Java"),(0,t.mdx)("p",null,(0,t.mdx)("strong",{parentName:"p"},"Syntax")),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-java"},"public static void updatePropositionsForSurfaces(@NonNull final List<Surface> surfaces)\n")),(0,t.mdx)("ul",null,(0,t.mdx)("li",{parentName:"ul"},(0,t.mdx)("em",{parentName:"li"},"surfaces")," is a list of surfaces for which propositions need updating.")),(0,t.mdx)("p",null,(0,t.mdx)("strong",{parentName:"p"},"Syntax")),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-java"},'final Surface surface1 = new Surface("myActivity#button");\nfinal Surface surface2 = new Surface("myActivityAttributes");\n\nfinal List<Surface> surfaces = new ArrayList<>();\nsurfaces.add(surface1);\nsurfaces.add(surface2);\n\nMessaging.updatePropositionsForSurfaces(surfaces)\n')),(0,t.mdx)(l,{platform:"ios",api:"update-propositions-for-surfaces",repeat:"12",mdxType:"Variant"}),(0,t.mdx)("h4",{id:"swift-1"},"Swift"),(0,t.mdx)("p",null,(0,t.mdx)("strong",{parentName:"p"},"Syntax")),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-swift"},"static func updatePropositionsForSurfaces(_ surfaces: [Surface])\n")),(0,t.mdx)("ul",null,(0,t.mdx)("li",{parentName:"ul"},(0,t.mdx)("em",{parentName:"li"},"surfaces")," is an array of surfaces for which propositions need updating.")),(0,t.mdx)("p",null,(0,t.mdx)("strong",{parentName:"p"},"Syntax")),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-swift"},'let surface1 = Surface(path: "myView#button")\nlet surface2 = Surface(path: "myViewAttributes")\n\nMessaging.updatePropositionsForSurfaces([surface1, surface2])\n')),(0,t.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,t.mdx)("p",null,(0,t.mdx)("strong",{parentName:"p"},"Syntax")),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-objc"},"+ (void) updatePropositionsForSurfaces: (NSArray<AEPSurface*>* _Nonnull) surfaces;\n")),(0,t.mdx)("ul",null,(0,t.mdx)("li",{parentName:"ul"},(0,t.mdx)("em",{parentName:"li"},"surfaces")," is an array of surfaces for which propositions need updating.")),(0,t.mdx)("p",null,(0,t.mdx)("strong",{parentName:"p"},"Syntax")),(0,t.mdx)("pre",null,(0,t.mdx)("code",{parentName:"pre",className:"language-objc"},'AEPSurface* surface1 = [[AEPSurface alloc] initWithPath: @"myView#button"];\nAEPSurface* surface2 = [[AEPSurface alloc] initWithPath: @"myView#button"];\n\n[AEPMobileMessaging updatePropositionsForSurfaces: @[surface1, surface2]]; \n')))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-edge-adobe-journey-optimizer-code-based-tabs-api-reference-md-4b2797ec764e4b7bd486.js.map