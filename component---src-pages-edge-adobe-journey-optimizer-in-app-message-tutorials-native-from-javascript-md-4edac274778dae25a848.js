"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[9586,4656],{22572:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return d},default:function(){return h}});var t,s=a(87462),i=a(63366),r=(a(15007),a(64983)),l=a(91515),o=a(80599),p=["components"],d={},m=(t="TabsBlock",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",e)}),g={_frontmatter:d},c=l.Z;function h(e){var n=e.components,a=(0,i.Z)(e,p);return(0,r.mdx)(c,(0,s.Z)({},g,a,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"native-handling-of-javascript-events"},"Native handling of JavaScript events"),(0,r.mdx)("p",null,"You can handle events from in-app message interactions natively within your application by completing the following steps:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"#implement-and-assign-a-presentationdelegate-messagingdelegate"},"Implement and assign a ",(0,r.mdx)("inlineCode",{parentName:"a"},"PresentationDelegate"),"/",(0,r.mdx)("inlineCode",{parentName:"a"},"MessagingDelegate"))),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"#register-a-javascript-handler-for-your-in-app-message"},"Register a JavaScript handler for your In-App Message")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"#post-the-javascript-message-from-your-in-app-message"},"Post the JavaScript message from your In-App Message"))),(0,r.mdx)("h2",{id:"implement-and-assign-a-presentationdelegate-messagingdelegate"},"Implement and assign a ",(0,r.mdx)("inlineCode",{parentName:"h2"},"PresentationDelegate"),"/ ",(0,r.mdx)("inlineCode",{parentName:"h2"},"MessagingDelegate")),(0,r.mdx)("p",null,"To register a JavaScript event handler with a ",(0,r.mdx)("inlineCode",{parentName:"p"},"Message")," object, you will first need to implement and set a ",(0,r.mdx)("inlineCode",{parentName:"p"},"PresentationDelegate")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"MessagingDelegate")," (for older Android SDK versions and iOS SDK)."),(0,r.mdx)("p",null,"Please read the ",(0,r.mdx)("a",{parentName:"p",href:"./messaging-delegate.md"},"tutorial")," for more detailed instructions on implementing and using a PresentationDelegate/ MessagingDelegate (for older Android SDK versions and iOS SDK)."),(0,r.mdx)("h2",{id:"register-a-javascript-handler-for-your-in-app-message"},"Register a JavaScript handler for your In-App Message"),(0,r.mdx)(m,{orientation:"horizontal",slots:"heading, content",repeat:"3",mdxType:"TabsBlock"}),(0,r.mdx)("p",null,"Android 3.x"),(0,r.mdx)(o.default,{query:"platform=android3x&function=register",mdxType:"Tabs"}),(0,r.mdx)("p",null,"Android 2.x (Older version)"),(0,r.mdx)(o.default,{query:"platform=android2x&function=register",mdxType:"Tabs"}),(0,r.mdx)("p",null,"iOS"),(0,r.mdx)(o.default,{query:"platform=ios&function=register",mdxType:"Tabs"}),(0,r.mdx)("h2",{id:"post-the-javascript-message-from-your-in-app-message"},"Post the JavaScript message from your In-App Message"),(0,r.mdx)("p",null,"Now that the in-app message has been displayed, the final step is to post the JavaScript message."),(0,r.mdx)("p",null,"Continuing from the previous example, the developer is going to post the ",(0,r.mdx)("inlineCode",{parentName:"p"},"myInappCallback")," message from their HTML, which will in turn call the handler previously configured:"),(0,r.mdx)("h3",{id:"html"},"HTML"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-html"},'<html>\n    <head>\n        <script type="text/javascript">\n            function callNative(action) {\n                try {\n                    // the name of the message handler is the same name that must be registered in native code.\n                    // in this case the message name is "myInappCallback"\n                    webkit.messageHandlers.myInappCallback.postMessage(action);\n                } catch(err) {\n                    console.log(\'The native context does not exist yet\'); }\n                }\n            <\/script>\n    </head>\n    <body>\n        <button onclick="callNative(\'native callbacks are cool!\')">Native callback!</button>\n    </body>\n</html>\n')),(0,r.mdx)("p",null,"(The above HTML is not representative of a valid in-app message, and is intended only to demonstrate how to post the JavaScript message)."),(0,r.mdx)("p",null,"When the user clicks the button inside of this in-app message, the handler configured in the previous step will be called. The handler will send an Experience Event tracking the interaction, and print the following message to the console:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-text"},"JavaScript body passed to native callback: native callbacks are cool!\n")),(0,r.mdx)("h2",{id:"examples"},"Examples"),(0,r.mdx)("p",null,"The test apps in this repository demonstrate calling native code from JavaScript:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://github.com/adobe/aepsdk-messaging-ios/tree/main/TestApps/MessagingDemoApp"},"Swift")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://github.com/adobe/aepsdk-messaging-ios/tree/main/TestApps/MessagingDemoAppObjC"},"Objective-C")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://github.com/adobe/aepsdk-messaging-android/tree/main/code/testapp"},"Kotlin"))))}h.isMDXComponent=!0},80599:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return p},default:function(){return c}});var t,s=a(87462),i=a(63366),r=(a(15007),a(64983)),l=a(91515),o=["components"],p={},d=(t="Variant",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",e)}),m={_frontmatter:p},g=l.Z;function c(e){var n=e.components,a=(0,i.Z)(e,o);return(0,r.mdx)(g,(0,s.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)(d,{platform:"android3x",function:"register",repeat:"7",mdxType:"Variant"}),(0,r.mdx)("p",null,"In the ",(0,r.mdx)("inlineCode",{parentName:"p"},"onShow")," function of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"PresentationDelegate"),", call ",(0,r.mdx)("inlineCode",{parentName:"p"},"handleJavascriptMessage(String, AdobeCallback<String>)")," to register your handler."),(0,r.mdx)("p",null,"The name of the message you intend to pass from the JavaScript side should be specified in the first parameter."),(0,r.mdx)("p",null,"The following example shows a handler that dispatches an ",(0,r.mdx)("inlineCode",{parentName:"p"},"decisioning.propositionInteract")," Experience Event natively when the JavaScript of the in-app message posts a myInappCallback message:"),(0,r.mdx)("h4",{id:"kotlin"},"Kotlin"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin"},'var eventHandler: InAppMessageEventHandler? = null\nvar currentMessagePresentable: Presentable<InAppMessage>? = null\n\noverride fun onShow(presentable: Presentable<*>) {\n  if (presentable.getPresentation() !is InAppMessage) {\n    return\n  }\n  currentMessagePresentable = presentable as Presentable<InAppMessage>\n  eventHandler = currentMessagePresentable?.getPresentation()?.eventHandler\n  // in-line handling of JavaScript calls\n  eventHandler?.handleJavascriptMessage("myInappCallback") { content ->\n    if (content != null) {\n        println("JavaScript body passed to native callback: $content")\n        val message: Message? = MessagingUtils.getMessageForPresentable(currentMessagePresentable)\n        message?.track(content, MessagingEdgeEventType.INTERACT);\n    }\n  }\n}\n')),(0,r.mdx)("h4",{id:"java"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'InAppMessageEventHandler eventHandler = null;\nPresentable<InAppMessage> currentMessagePresentable = null;\n\n@Override\npublic void onShow(Presentable<?> presentable) {\n    if (!(presentable.getPresentation() instanceof InAppMessage)) {\n      return;\n    }\n    currentMessagePresentable = (Presentable<InAppMessage>) presentable;\n    eventHandler = currentMessagePresentable.getPresentation().getEventHandler();\n    // in-line handling of JavaScript calls\n    eventHandler.handleJavascriptMessage("myInappCallback", content -> {\n        if (content != null) {\n            System.out.println("JavaScript body passed to native callback: " + content);\n            Message message = MessagingUtils.getMessageForPresentable(currentMessagePresentable);\n            if (message != null) {\n                message.track(content, MessagingEdgeEventType.INTERACT);\n            }\n        }\n    });\n}\n')),(0,r.mdx)(d,{platform:"android2x",function:"register",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("p",null,"In the ",(0,r.mdx)("inlineCode",{parentName:"p"},"shouldShowMessage")," function of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"MessagingDelegate"),", call ",(0,r.mdx)("inlineCode",{parentName:"p"},"public void handleJavascriptMessage(final String name, final AdobeCallback<String> callback)")," to register your handler."),(0,r.mdx)("p",null,"The name of the message you intend to pass from the JavaScript side should be specified in the first parameter."),(0,r.mdx)("p",null,"The following example shows a handler that dispatches a ",(0,r.mdx)("inlineCode",{parentName:"p"},"decisioning.propositionInteract")," Experience Event natively when the JavaScript of the in-app message posts a ",(0,r.mdx)("inlineCode",{parentName:"p"},"myInappCallback")," message:"),(0,r.mdx)("h4",{id:"java-1"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'@Override\npublic boolean shouldShowMessage(FullscreenMessage fullscreenMessage) {\n  Message message = (Message) fullscreenMessage.getParent();\n  \n  // in-line handling of JavaScript calls\n  message.handleJavascriptMessage("myInappCallback", new AdobeCallback<String>() {\n    @Override\n    public void call(String content) {\n      System.out.println("JavaScript body passed to native callback: " + content);\n      message.track(content, MessagingEdgeEventType.IN_APP_INTERACT);\n    }\n  });\n}\n')),(0,r.mdx)(d,{platform:"ios",function:"register",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("p",null,"In the ",(0,r.mdx)("inlineCode",{parentName:"p"},"shouldShowMessage")," function of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"MessagingDelegate"),", call ",(0,r.mdx)("a",{parentName:"p",href:"./class-message.md#handlejavascriptmessage_withhandler"},(0,r.mdx)("inlineCode",{parentName:"a"},"handleJavascriptMessage(_:withHandler)"))," to register your handler."),(0,r.mdx)("p",null,"The name of the message you intend to pass from the JavaScript side should be specified in the first parameter."),(0,r.mdx)("p",null,"The following example shows a handler that dispatches a ",(0,r.mdx)("inlineCode",{parentName:"p"},"decisioning.propositionInteract")," Experience Event natively when the JavaScript of the in-app message posts a ",(0,r.mdx)("inlineCode",{parentName:"p"},"myInappCallback")," message:"),(0,r.mdx)("h4",{id:"swift"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'func shouldShowMessage(message: Showable) -> Bool {    \n    let fullscreenMessage = message as? FullscreenMessage\n    let message = fullscreenMessage?.parent\n\n    // in-line handling of JavaScript calls\n    message?.handleJavascriptMessage("myInappCallback") { content\n\n        print("JavaScript body passed to native callback: \\(content ?? "empty")")\n\n        message?.track(content as? String, withEdgeEventType: .inappInteract)\n    }\n\n    return true\n}\n')))}c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-edge-adobe-journey-optimizer-in-app-message-tutorials-native-from-javascript-md-4edac274778dae25a848.js.map