{"version":3,"file":"component---src-pages-home-base-mobile-core-api-reference-md-aa76958c7550f0b77384.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/home/base/mobile-core/api-reference.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Tabs from './tabs/api-reference.md';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst TabsBlock = makeShortcode(\"TabsBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"mobile-core-api-reference\"\n    }}>{`Mobile Core API reference`}</h1>\n    <h2 {...{\n      \"id\": \"clearupdatedconfiguration\"\n    }}>{`clearUpdatedConfiguration`}</h2>\n    <p>{`Programmatic updates made to the configuration can be cleared via the `}<inlineCode parentName=\"p\">{`clearUpdatedConfiguration`}</inlineCode>{` API. For more information about configuration in Mobile Core, please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"configuration/api-reference.md#clearupdatedconfiguration\"\n      }}>{`Configuration API reference`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"collectmessageinfo\"\n    }}>{`collectMessageInfo`}</h2>\n    <p>{`User interactions with local or push notifications can be tracked by invoking the `}<inlineCode parentName=\"p\">{`collectMessageInfo`}</inlineCode>{` API. Please refer to `}<a parentName=\"p\" {...{\n        \"href\": \"../../../solution/adobe-campaign-standard/index.md#tracking-local-and-push-notification-message-interactions\"\n      }}>{`this page`}</a>{` for more information about tracking local and push notification message interactions.`}</p>\n    <h2 {...{\n      \"id\": \"collectlaunchinfo\"\n    }}>{`collectLaunchInfo`}</h2>\n    <p>{`You can provide the user information to the SDK from various launch points in your application.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`If the Adobe Analytics extension is enabled in your SDK, collecting this launch data results in an Analytics request being sent. Other extensions in the SDK might use the collected data, for example, as a rule condition for an In-App Message.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=collect-launch-info\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=collect-launch-info\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"collectpii\"\n    }}>{`collectPii`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`collectPii`}</inlineCode>{` method lets the SDK to collect sensitive or personally identifiable information (PII).`}</p>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Although this method enables the collection of sensitive data, no data is sent to any Adobe or other third-party endpoints. To send the data to an endpoint, use a PII type postback.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=collect-pii\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=collect-pii\" mdxType=\"Tabs\" />\n    {/*- React Native\n     <Tabs query=\"platform=react-native&api=collect-pii\"/> -*/}\n    <h2 {...{\n      \"id\": \"configurewithappid\"\n    }}>{`configureWithAppId`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`configureWithAppId`}</inlineCode>{` API can be used to download the configuration for the provided app ID and apply the configuration to the current session. For more information about configuration in Mobile Core, please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"configuration/api-reference.md#configurewithappid\"\n      }}>{`Configuration API reference`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"configurewithfileinassets\"\n    }}>{`configureWithFileInAssets`}</h2>\n    <p>{`You can bundle a JSON configuration file in the app's assets folder and use `}<inlineCode parentName=\"p\">{`configureWithFileInAssets`}</inlineCode>{` API to replace or complement the configuration that was downloaded using the `}<a parentName=\"p\" {...{\n        \"href\": \"#configurewithappid\"\n      }}><inlineCode parentName=\"a\">{`configureWithAppId`}</inlineCode></a>{` API. For more information about configuration in Mobile Core, please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"configuration/api-reference.md#configurewithfileinassets\"\n      }}>{`Configuration API reference`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"configurewithfileinpath\"\n    }}>{`configureWithFileInPath`}</h2>\n    <p>{`You can bundle a JSON configuration file in you app package and use `}<inlineCode parentName=\"p\">{`configureWithFileInPath`}</inlineCode>{` API to replace or complement the configuration that was downloaded using the `}<a parentName=\"p\" {...{\n        \"href\": \"#configurewithappid\"\n      }}><inlineCode parentName=\"a\">{`configureWithAppId`}</inlineCode></a>{` API. For more information about configuration in Mobile Core, please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"configuration/api-reference.md#configurewithfileinpath\"\n      }}>{`Configuration API reference`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"dispatch--dispatchevent\"\n    }}>{`dispatch / dispatchEvent`}</h2>\n    <p>{`This method can be used to send an event through the Mobile Core for other extensions to consume.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=dispatch-event\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=dispatch-event\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"dispatch--dispatcheventwithresponsecallback\"\n    }}>{`dispatch / dispatchEventWithResponseCallback`}</h2>\n    <p>{`This method can be used to send an event through the Mobile Core for other extensions to consume. The provided event is used as a trigger and in return a response event is provided as a callback. The callback is invoked with a null event if the response could not be provided within the given timeout.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=dispatch-event-with-response-callback\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=dispatch-event-with-response-callback\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"getapplication\"\n    }}>{`getApplication`}</h2>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`getApplication`}</inlineCode>{` method to get the previously set Android `}<inlineCode parentName=\"p\">{`Application`}</inlineCode>{` instance. The `}<inlineCode parentName=\"p\">{`Application`}</inlineCode>{` instance is mainly provided for third-party extensions.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"1\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=get-application\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"getloglevel\"\n    }}>{`getLogLevel`}</h2>\n    <p>{`This API gets the current log level being used in the SDK.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=get-log-level\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=get-log-level\" mdxType=\"Tabs\" />\n    {/*- React Native\n     <Tabs query=\"platform=react-native&api=get-log-level\"/> -*/}\n    <h2 {...{\n      \"id\": \"getprivacystatus\"\n    }}>{`getPrivacyStatus`}</h2>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`getPrivacyStatus`}</inlineCode>{` API to retrieve the current privacy status. For more information about privacy in Mobile Core, please see `}<a parentName=\"p\" {...{\n        \"href\": \"../../resources/privacy-and-gdpr.md#getprivacystatus\"\n      }}>{`Privacy and GDPR`}</a></p>\n    <h2 {...{\n      \"id\": \"getsdkidentities\"\n    }}>{`getSdkIdentities`}</h2>\n    <p>{`The following SDK identities are locally stored:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Company Context - IMS Org IDs`}</li>\n      <li parentName=\"ul\">{`Experience Cloud ID (MID)`}</li>\n      <li parentName=\"ul\">{`User IDs`}</li>\n      <li parentName=\"ul\">{`Integration codes (ADID, push IDs)`}</li>\n      <li parentName=\"ul\">{`Data source IDs (DPID, DPUUID)`}</li>\n      <li parentName=\"ul\">{`Analytics IDs (AVID, AID, VID, and associated RSIDs)`}</li>\n      <li parentName=\"ul\">{`Target legacy IDs (TNTID, TNT3rdpartyID)`}</li>\n      <li parentName=\"ul\">{`Audience Manager ID (UUID)`}</li>\n    </ul>\n    <p>{`To retrieve data as a JSON string from the SDKs and send this data to your servers, use the `}<inlineCode parentName=\"p\">{`getSdkIdentities`}</inlineCode>{` method.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You must call the API below and retrieve identities stored in the SDK, `}<strong parentName=\"p\">{`before`}</strong>{` the user opts out.`}<br /><br />{`This API does `}<strong parentName=\"p\">{`not`}</strong>{` include the identities stored in the Edge Identity extension. To retrieve the identities from the Edge Identity extension, use `}<a parentName=\"p\" {...{\n        \"href\": \"../../edge/identity-for-edge-network/api-reference.md#getidentities\"\n      }}>{`getIdentities`}</a>{`.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=get-sdk-identities\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=get-sdk-identities\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"log\"\n    }}>{`log`}</h2>\n    <p>{`This is the API used to log from the SDK.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=log\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=log\" mdxType=\"Tabs\" />\n    {/*- React Native\n     <Tabs query=\"platform=react-native&api=log\"/> -*/}\n    <h2 {...{\n      \"id\": \"registereventlistener\"\n    }}>{`registerEventListener`}</h2>\n    <p>{`An EventListener can be registered with MobileCore to be notified when Events matching a type and source are dispatched.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=register-event-listener\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=register-event-listener\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"registerextension\"\n    }}>{`registerExtension`}</h2>\n    <p>{`Extensions can be incrementally registered with Mobile Core using the `}<inlineCode parentName=\"p\">{`registerExtension`}</inlineCode>{` API.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=register-extension\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=register-extension\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"registerextensions\"\n    }}>{`registerExtensions`}</h2>\n    <p>{`Extensions are registered with Mobile Core so that they can dispatch and listen for events.\nThis API can be used to register desired extensions and boot up the SDK for event processing. Calling `}<inlineCode parentName=\"p\">{`MobileCore.start()`}</inlineCode>{` API is deprecated starting Mobile Core v2.0.0 and is no longer required when using `}<inlineCode parentName=\"p\">{`MobileCore.registerExtensions()`}</inlineCode>{`.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Extension registration is `}<strong parentName=\"p\">{`mandatory`}</strong>{`. Attempting to make extension-specific API calls without registering the extension will lead to undefined behavior.`}</p>\n    <p>{`The following code snippets demonstrate how Lifecycle, Signal, Profile, Edge, and other extensions are imported and registered.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=register-extensions\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=register-extensions\" mdxType=\"Tabs\" />\n    {/*- React Native\n     <Tabs query=\"platform=react-native&api=register-extension\"/>\n     Flutter\n     <Tabs query=\"platform=flutter&api=register-extension\"/> -*/}\n    <h2 {...{\n      \"id\": \"resetidentities\"\n    }}>{`resetIdentities`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`resetIdentities`}</inlineCode>{` method requests that each extension resets the identities it owns and each extension responds to this request uniquely. For more details, check the `}<inlineCode parentName=\"p\">{`resetIdentities`}</inlineCode>{` API reference on each of the extensions you use.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=reset-identities\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=reset-identities\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"setadvertisingidentifier\"\n    }}>{`setAdvertisingIdentifier`}</h2>\n    <p>{`The advertising ID is preserved between app upgrades, is saved and restored during the standard application backup process, available via `}<a parentName=\"p\" {...{\n        \"href\": \"signals/index.md\"\n      }}>{`Signals`}</a>{`, and is removed at uninstall.`}</p>\n    <p>{`For more information about identity in Mobile Core, please read the documentation on the `}<a parentName=\"p\" {...{\n        \"href\": \"identity/api-reference.md#setadvertisingidentifier\"\n      }}>{`identity APIs`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"setappgroup\"\n    }}>{`setAppGroup`}</h2>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`setAppGroup`}</inlineCode>{` method to set the app group, which is used to share user defaults and files among the containing app and the extension apps. Please note that this method is `}<strong parentName=\"p\">{`only`}</strong>{` supported on iOS versions of Mobile Core.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`This API `}<em parentName=\"p\">{`must`}</em>{` be called in `}<inlineCode parentName=\"p\">{`AppDidFinishLaunching`}</inlineCode>{` and before any other interactions with the Adobe Experience SDK have happened. Only the first call to this function will have any effect.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"1\" mdxType=\"TabsBlock\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=set-app-group\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"setapplication\"\n    }}>{`setApplication`}</h2>\n    <p>{`When building Android applications, the `}<inlineCode parentName=\"p\">{`android.app.Application`}</inlineCode>{` reference must be passed to Mobile SDK, which allows Mobile SDK to access the `}<inlineCode parentName=\"p\">{`android.app.Context`}</inlineCode>{` and monitor the lifecycle of the Android application.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Android applications must call `}<inlineCode parentName=\"p\">{`MobileCore.setApplication()`}</inlineCode>{` before calling any other Mobile SDK API.`}</p>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`setApplication`}</inlineCode>{` method to pass the Android `}<inlineCode parentName=\"p\">{`Application`}</inlineCode>{` instance to Mobile SDK. Please note that this method is `}<strong parentName=\"p\">{`only`}</strong>{` supported on Android versions of Mobile Core.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"1\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=set-application\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"setloglevel\"\n    }}>{`setLogLevel`}</h2>\n    <p>{`The logging APIs allow log messages to be tagged and filtered with the Mobile SDK log messages. This allows application developers to filter the logged messages based on the current logging mode.`}</p>\n    <p>{`Application developers can use the `}<inlineCode parentName=\"p\">{`setLogLevel`}</inlineCode>{` method to filter the log messages that are coming from the Mobile SDK.`}</p>\n    <p>{`From least to most verbose, the order of Mobile SDK logging modes is as follows:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`ERROR`}</li>\n      <li parentName=\"ul\">{`WARNING`}</li>\n      <li parentName=\"ul\">{`DEBUG`}</li>\n      <li parentName=\"ul\">{`VERBOSE / TRACE`}</li>\n    </ul>\n    <p>{`When debugging on iOS, you can use `}<inlineCode parentName=\"p\">{`LogLevel.verbose`}</inlineCode>{` to enable all the logging messages that are coming from Mobile SDK and partner extensions. Similarly, on Android, you can use `}<inlineCode parentName=\"p\">{`LoggingMode.VERBOSE`}</inlineCode>{` to enable all the logging messages that are coming from Mobile SDK and partner extensions.`}</p>\n    <p>{`In a production application, you should use a less verbose logging mode, such as error-level logging.`}</p>\n    <p>{`By default, Mobile SDK logging mode is set to `}<inlineCode parentName=\"p\">{`LoggingMode.ERROR`}</inlineCode>{` for Android and `}<inlineCode parentName=\"p\">{`LogLevel.error`}</inlineCode>{`on iOS.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`On `}<strong parentName=\"p\">{`Android`}</strong>{`, Mobile SDK uses the `}<inlineCode parentName=\"p\">{`android.util.Log`}</inlineCode>{` class to log messages.`}<br /><br />{`On `}<strong parentName=\"p\">{`iOS`}</strong>{`, Mobile SDK uses `}<inlineCode parentName=\"p\">{`NSLog`}</inlineCode>{` to messages to Apple System Log facility.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=set-log-level\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=set-log-level\" mdxType=\"Tabs\" />\n    {/*- React Native\n     <Tabs query=\"platform=react-native&api=set-log-level\"/>\n     Flutter\n     <Tabs query=\"platform=flutter&api=set-log-level\"/> -*/}\n    <h2 {...{\n      \"id\": \"setprivacystatus\"\n    }}>{`setPrivacyStatus`}</h2>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`setPrivacyStatus`}</inlineCode>{` API to set the privacy status. For more information about privacy in Mobile Core, please see `}<a parentName=\"p\" {...{\n        \"href\": \"../../../resources/privacy-and-gdpr.md#setprivacystatus\"\n      }}>{`Privacy and GDPR`}</a>{` API's.`}</p>\n    <h2 {...{\n      \"id\": \"setpushidentifier\"\n    }}>{`setPushIdentifier`}</h2>\n    <p>{`This API sets the device token for push notifications in the SDK. If the current SDK privacy status is `}<inlineCode parentName=\"p\">{`optedout`}</inlineCode>{`, the push identifier is not set.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You should call `}<inlineCode parentName=\"p\">{`setPushIdentifier`}</inlineCode>{` on each application launch to ensure the most up-to-date device token is set to the SDK. If no device token is available, `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{`/`}<inlineCode parentName=\"p\">{`nil`}</inlineCode>{` should be passed.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=set-push-identifier\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=set-push-identifier\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"setsmalliconresourceid--setlargeiconresourceid\"\n    }}>{`setSmallIconResourceID / setLargeIconResourceID`}</h2>\n    <p>{`You can set the small and large icons that will be used for notifications that are created by the SDK. The small icon appears in the status bar and is the secondary image that is displayed when the user sees the complete notification in the notification center. The large icon is the primary image that is displayed when the user sees the complete notification in the notification center. Please note that this method is `}<strong parentName=\"p\">{`only`}</strong>{` supported on Android versions of Mobile Core.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"1\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=set-icon-resource-id\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"setwrappertype\"\n    }}>{`setWrapperType`}</h2>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`setWrapperType`}</inlineCode>{` API to set the wrapper type when the SDK is being used in a cross-platform environment.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=set-wrapper-type\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=set-wrapper-type\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"start\"\n    }}>{`start`}</h2>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`This is an Android only API and has been deprecated starting in v2.0.0 of the Mobile Core extension.\nUse `}<a parentName=\"p\" {...{\n        \"href\": \"#registerextensions\"\n      }}>{`registerExtensions`}</a>{` to register desired extensions and boot up the SDK for event processing. Calling `}<inlineCode parentName=\"p\">{`MobileCore.start()`}</inlineCode>{` API is no longer required when using `}<inlineCode parentName=\"p\">{`MobileCore.registerExtensions()`}</inlineCode>{`.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`start`}</inlineCode>{` API triggers Mobile Core to start event processing. This should be used after the desired set of extensions have been registered using `}<inlineCode parentName=\"p\">{`MobileCore.registerExtension()`}</inlineCode>{`  or `}<inlineCode parentName=\"p\">{`<EXTENSION_NAME>.registerExtension()`}</inlineCode>{`. A call to `}<inlineCode parentName=\"p\">{`start`}</inlineCode>{` will wait for any outstanding registrations to complete and then start event processing. You can use the callback to kickoff additional operations immediately after any operations kicked off during registration. This method should not be invoked more than once in your app.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"1\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=start\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"trackaction\"\n    }}>{`trackAction`}</h2>\n    <p>{`Actions are events that occur in your application. You can use the `}<inlineCode parentName=\"p\">{`trackAction`}</inlineCode>{` method to track and measure an action. Each action has one or more corresponding metrics that are incremented each time the event occurs. For example, you can use an action to track new subscriptions, every time an article is viewed, or every time a level is completed.`}</p>\n    <InlineAlert variant=\"warning\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You want to use the `}<inlineCode parentName=\"p\">{`trackAction`}</inlineCode>{` method when you want to track an occurring event. In addition to the action name, you can also send context data with each `}<inlineCode parentName=\"p\">{`trackAction`}</inlineCode>{` call.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`If you installed and configured the Adobe Analytics extension, this method sends an Adobe Analytics action tracking hit with the provided optional context data.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=track-action\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=track-action\" mdxType=\"Tabs\" />\n    {/*- React Native\n     <Tabs query=\"platform=react-native&api=track-action\"/>\n     Flutter\n     <Tabs query=\"platform=flutter&api=track-action\"/> -*/}\n    <h2 {...{\n      \"id\": \"trackstate\"\n    }}>{`trackState`}</h2>\n    <p>{`States represent screens or views in your application. The `}<inlineCode parentName=\"p\">{`trackState`}</inlineCode>{` method needs to be called every time a new state is displayed in your application. For example, this method should be called when a user navigates from the home page to the news feed. This method sends an Adobe Analytics state tracking hit with optional context data.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`If you installed and configured the Adobe Analytics extension, the `}<inlineCode parentName=\"p\">{`trackState`}</inlineCode>{` method increments page views and an Adobe Analytics state tracking hit with the provided optional context data.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=track-state\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=track-state\" mdxType=\"Tabs\" />\n    {/*- React Native\n     <Tabs query=\"platform=react-native&api=track-state\"/>\n     Flutter\n     <Tabs query=\"platform=flutter&api=track-state\"/> -*/}\n    <h2 {...{\n      \"id\": \"updateconfiguration\"\n    }}>{`updateConfiguration`}</h2>\n    <p>{`You can update the configuration programmatically by passing configuration keys and values to override the existing configuration using `}<inlineCode parentName=\"p\">{`updateConfiguration`}</inlineCode>{` API. For more information about configuration in Mobile Core, please refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"configuration/api-reference.md#updateconfiguration\"\n      }}>{`Configuration API reference`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"public-classes\"\n    }}>{`Public classes`}</h2>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=public-classes\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&api=public-classes\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"additional-information\"\n    }}>{`Additional information`}</h2>\n    <p>{`To learn what context data is, please read the `}<a parentName=\"p\" {...{\n        \"href\": \"https://experienceleague.adobe.com/docs/analytics/implementation/vars/page-vars/contextdata.html\"\n      }}>{`documentation on context data`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","InlineAlert","TabsBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","variant","slots","orientation","repeat","query","isMDXComponent"],"sourceRoot":""}