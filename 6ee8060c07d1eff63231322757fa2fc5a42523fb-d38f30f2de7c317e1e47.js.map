{"version":3,"file":"6ee8060c07d1eff63231322757fa2fc5a42523fb-d38f30f2de7c317e1e47.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/home/base/mobile-core/identity/tabs/api-reference.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" api=\"append-to-url\" repeat=\"7\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <p>{`This API can be called with `}<a parentName=\"p\" {...{\n        \"href\": \"../api-reference.md#public-classes\"\n      }}>{`AdobeCallback`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"../api-reference.md#public-classes\"\n      }}>{`AdobeCallbackWithError`}</a>{` for retrieving the attributes from the Mobile SDK. When `}<inlineCode parentName=\"p\">{`AdobeCallbackWithError`}</inlineCode>{` is provided, this API uses a default timeout of 500ms. If the operation times out or an unexpected error occurs, the `}<inlineCode parentName=\"p\">{`fail`}</inlineCode>{` method is called with the appropriate `}<a parentName=\"p\" {...{\n        \"href\": \"../api-reference.md#public-classes\"\n      }}>{`AdobeError`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void appendVisitorInfoForURL(\n            @NonNull final String baseURL, @NonNull final AdobeCallback<String> callback)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`baseUrl`}</em>{` is the URL to which the visitor information needs to be appended. If the visitor information is nil or empty, the URL is returned as is.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`callback`}</em>{` is invoked after the updated URL is available.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Identity.appendVisitorInfoForURL(\"https://example.com\", new AdobeCallback<String>() {\n    @Override\n    public void call(String urlWithAdobeVisitorInfo) {\n        //handle the new URL here\n        //For example, open the URL on the device browser\n        //\n        Intent i = new Intent(Intent.ACTION_VIEW);\n        i.setData(Uri.parse(urlWithAdobeVisitorInfo));\n        startActivity(i);\n    }\n});\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"append-to-url\" repeat=\"11\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func appendTo(url: URL?, completion: @escaping (URL?, Error?) -> Void)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`url`}</em>{` is the URL to which the visitor information needs to be appended. If the visitor information is nil or empty, the URL is returned as is.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`completion`}</em>{` is invoked after the updated `}<em parentName=\"li\">{`URL`}</em>{` is available or `}<em parentName=\"li\">{`Error`}</em>{` if an unexpected exception occurs or the request times out. The returned `}<inlineCode parentName=\"li\">{`Error`}</inlineCode>{` contains the `}<a parentName=\"li\" {...{\n          \"href\": \"../api-reference.md#public-classes\"\n        }}>{`AEPError`}</a>{` code of the specific error.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`Identity.appendTo(url: URL(string: \"https://example.com\")) { appendedURL, error in\n  if let error = error {\n    // handle error\n  } else {\n    // handle the appended url here\n    if let appendedURL = appendedURL {\n      // APIs which update the UI must be called from main thread\n      DispatchQueue.main.async {\n        self.webView.load(URLRequest(url: appendedURL!))\n      }\n    } else {\n      // handle error, nil appendedURL\n    }\n  }\n})\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) appendToUrl: (NSURL * _Nullable baseUrl) completion: ^(NSURL * _Nullable urlWithVisitorData, NSError * _Nullable error) completion;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`NSURL* url = [NSURL URLWithString:@\"https://example.com\"];\n[AEPMobileIdentity appendToUrl:url completion:^(NSURL * _Nullable urlWithVisitorData, NSError * _Nullable error) {\n  if (error) {\n    // handle error here\n  } else {\n    // handle the appended url here\n    if (urlWithVisitorData) {\n      // APIs which update the UI must be called from main thread\n      dispatch_async(dispatch_get_main_queue(), ^{\n        [[self webView] loadRequest:[NSURLRequest requestWithURL:urlWithVisitorData]];\n      }\n    } else {\n      // handle error, nil urlWithVisitorData\n    }\n  }\n}];\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" api=\"append-to-url\" repeat=\"6\"/>\n     #### JavaScript\n     **Syntax**\n     ```jsx\n     appendVisitorInfoForURL(baseURL?: String): Promise<?string>;\n     ```\n     * _baseUrl_ is the URL to which the visitor information needs to be appended. If the visitor information is nil or empty, the URL is returned as is.\n     **Example**\n     ```jsx\n     ACPIdentity.appendVisitorInfoForURL(\"https://example.com\").then(urlWithVistorData => console.log(\"AdobeExperenceSDK: Url with Visitor Data = \" + urlWithVisitorData));\n     ```\n     <Variant platform=\"flutter\" api=\"append-to-url\" repeat=\"6\"/>\n     #### Dart\n     **Syntax**\n     ```dart\n     Future<String> appendToUrl (String url);\n     ```\n     * _url_ is the URL to which the visitor information needs to be appended. If the visitor information is nil or empty, the URL is returned as is.\n     **Example**\n     ```dart\n     String result = \"\";\n     try {\n      result = await FlutterACPIdentity.appendToUrl(\"https://example.com\");\n     } on PlatformException {\n      log(\"Failed to append URL\");\n     }\n     ``` -*/}\n    <Variant platform=\"android\" api=\"extension-version\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@NonNull\npublic static String extensionVersion();\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`String identityExtensionVersion = Identity.extensionVersion();\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"extension-version\" repeat=\"10\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static var extensionVersion: String\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let identityExtensionVersion  = Identity.extensionVersion\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-1\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (nonnull NSString*) extensionVersion;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`NSString *identityVersion = [AEPMobileIdentity extensionVersion];\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" api=\"extension-version\" repeat=\"2\"/>\n     #### JavaScript\n     ```jsx\n     ACPIdentity.extensionVersion().then(identityExtensionVersion => console.log(\"AdobeExperienceSDK: ACPIdentity version: \" + identityExtensionVersion));\n     ```\n     <Variant platform=\"flutter\" api=\"extension-version\" repeat=\"2\"/>\n     #### Dart\n     ```dart\n     String identityExtensionVersion = FlutterACPIdentity.extensionVersion;\n     ``` -*/}\n    <Variant platform=\"android\" api=\"get-experience-cloud-id\" repeat=\"7\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-2\"\n    }}>{`Java`}</h4>\n    <p>{`This API can be called with `}<a parentName=\"p\" {...{\n        \"href\": \"../api-reference.md#public-classes\"\n      }}>{`AdobeCallback`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"../api-reference.md#public-classes\"\n      }}>{`AdobeCallbackWithError`}</a>{` for retrieving the ECID from the Mobile SDK. When `}<inlineCode parentName=\"p\">{`AdobeCallbackWithError`}</inlineCode>{` is provided, this API uses a default timeout of 500ms. If the operation times out or an unexpected error occurs, the `}<inlineCode parentName=\"p\">{`fail`}</inlineCode>{` method is called with the appropriate `}<a parentName=\"p\" {...{\n        \"href\": \"../api-reference.md#public-classes\"\n      }}>{`AdobeError`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void getExperienceCloudId(@NonNull final AdobeCallback<String> callback)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`callback`}</em>{` is invoked after the ECID is available.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Identity.getExperienceCloudId(new AdobeCallback<String>() {\n    @Override\n    public void call(String id) {\n         //Handle the ID returned here\n    }\n});\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"get-experience-cloud-id\" repeat=\"11\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-2\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`@objc(getExperienceCloudId:)\nstatic func getExperienceCloudId(completion: @escaping (String?, Error?) -> Void)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`completion`}</em>{` is invoked with `}<em parentName=\"li\">{`String`}</em>{` after the ECID is available, or `}<em parentName=\"li\">{`Error`}</em>{` if an unexpected error occurs or the request times out. The returned `}<inlineCode parentName=\"li\">{`Error`}</inlineCode>{` contains the `}<a parentName=\"li\" {...{\n          \"href\": \"../api-reference.md#public-classes\"\n        }}>{`AEPError`}</a>{` code of the specific error.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`Identity.getExperienceCloudId { ecid, error in\n  if let error = error {\n    // handle error here\n  } else {\n    // handle the retrieved ID here\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-2\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) getExperienceCloudId: ^(NSString * _Nullable ecid, NSError * _Nullable error) completion;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`[AEPMobileIdentity getExperienceCloudId:^(NSString * _Nullable ecid, NSError *error) {\n  if (error) {\n    // handle error here\n  } else {\n    // handle the retrieved ID here\n  }\n}];\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" api=\"get-experience-cloud-id\" repeat=\"5\"/>\n     #### JavaScript\n     **Syntax**\n     ```jsx\n     getExperienceCloudId(): Promise<?string>;\n     ```\n     **Example**\n     ```jsx\n     ACPIdentity.getExperienceCloudId().then(cloudId => console.log(\"AdobeExperienceSDK: CloudID = \" + cloudId));\n     ```\n     <Variant platform=\"flutter\" api=\"get-experience-cloud-id\" repeat=\"5\"/>\n     #### Dart\n     **Syntax**\n     ```dart\n     Future<String> experienceCloudId;\n     ```\n     **Example**\n     ```dart\n     String result = \"\";\n     try {\n      result = await FlutterACPIdentity.experienceCloudId;\n     } on PlatformException {\n      log(\"Failed to get experienceCloudId\");\n     }\n     ``` -*/}\n    <Variant platform=\"android\" api=\"get-identifiers\" repeat=\"7\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-3\"\n    }}>{`Java`}</h4>\n    <p>{`This API can be called with `}<a parentName=\"p\" {...{\n        \"href\": \"../api-reference.md#public-classes\"\n      }}>{`AdobeCallback`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"../api-reference.md#public-classes\"\n      }}>{`AdobeCallbackWithError`}</a>{` for retrieving the custom identifiers from the Mobile SDK. When `}<inlineCode parentName=\"p\">{`AdobeCallbackWithError`}</inlineCode>{` is provided, this API uses a default timeout of 500ms. If the operation times out or an unexpected error occurs, the `}<inlineCode parentName=\"p\">{`fail`}</inlineCode>{` method is called with the appropriate `}<a parentName=\"p\" {...{\n        \"href\": \"../api-reference.md#public-classes\"\n      }}>{`AdobeError`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void getIdentifiers(@NonNull final AdobeCallback<List<VisitorID>> callback)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`callback`}</em>{` is invoked after the customer identifiers are available.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Identity.getIdentifiers(new AdobeCallback<List<VisitorID>>() {\n    @Override\n    public void call(List<VisitorID> idList) {\n         //Process the IDs here\n    }\n\n});\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"get-identifiers\" repeat=\"11\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-3\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`@objc(getIdentifiers:)\nstatic func getIdentifiers(completion: @escaping ([Identifiable]?, Error?) -> Void)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`completion`}</em>{` is invoked with a list of `}<em parentName=\"li\">{`Identifiable`}</em>{` objects after the customer identifiers are available, or `}<em parentName=\"li\">{`Error`}</em>{` if an unexpected error occurs or the request times out. The returned `}<inlineCode parentName=\"li\">{`Error`}</inlineCode>{` contains the `}<a parentName=\"li\" {...{\n          \"href\": \"../api-reference.md#public-classes\"\n        }}>{`AEPError`}</a>{` code of the specific error.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`Identity.getIdentifiers { identifiers, error in\n  if let error = error {\n    // handle error here\n  } else {\n    // handle the retrieved identifiers here\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-3\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) getIdentifiers: ^(NSArray<id<AEPIdentifiables>> * _Nullable identifiers, NSError * _Nullable error) completion;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`[[AEPMobileIdentity getIdentifiers:^(NSArray<id<AEPIdentifiable>> * _Nullable identifiers, NSError *error) {\n  if (error) {\n    // handle error here\n  } else {\n    // handle the retrieved identifiers here\n  }\n}];\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" api=\"get-identifiers\" repeat=\"5\"/>\n     #### JavaScript\n     **Syntax**\n     ```jsx\n     getIdentifiers(): Promise<Array<?ACPVisitorID>>;\n     ```\n     **Example**\n     ```jsx\n     ACPIdentity.getIdentifiers().then(identifiers => console.log(\"AdobeExperienceSDK: Identifiers = \" + identifiers));\n     ```\n     <Variant platform=\"flutter\" api=\"get-identifiers\" repeat=\"5\"/>\n     #### Dart\n     **Syntax**\n     ```dart\n     Future<List<ACPMobileVisitorId>> identifiers;\n     ```\n     **Example**\n     ```dart\n     List<ACPMobileVisitorId> result;\n     try {\n      result = await FlutterACPIdentity.identifiers;\n     } on PlatformException {\n      log(\"Failed to get identifiers\");\n     }\n     ``` -*/}\n    <Variant platform=\"android\" api=\"get-url-variables\" repeat=\"8\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-4\"\n    }}>{`Java`}</h4>\n    <p>{`This method was added in Core version 1.4.0 and Identity version 1.1.0.`}</p>\n    <p>{`This API can be called with `}<a parentName=\"p\" {...{\n        \"href\": \"../api-reference.md#public-classes\"\n      }}>{`AdobeCallback`}</a>{` or `}<a parentName=\"p\" {...{\n        \"href\": \"../api-reference.md#public-classes\"\n      }}>{`AdobeCallbackWithError`}</a>{` for retrieving the attributes from the Mobile SDK. When `}<inlineCode parentName=\"p\">{`AdobeCallbackWithError`}</inlineCode>{` is provided, this API uses a default timeout of 500ms. If the operation times out or an unexpected error occurs, the `}<inlineCode parentName=\"p\">{`fail`}</inlineCode>{` method is called with the appropriate `}<a parentName=\"p\" {...{\n        \"href\": \"../api-reference.md#public-classes\"\n      }}>{`AdobeError`}</a>{`.`}</p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void getUrlVariables(final AdobeCallback<String> callback);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`callback`}</em>{` has an NSString value that contains the visitor identifiers as a query string after the service request is complete.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Identity.getUrlVariables(new AdobeCallback<String>() {\n    @Override\n    public void call(String stringWithAdobeVisitorInfo) {\n        //handle the URL query parameter string here\n        //For example, open the URL on the device browser\n        //\n        Intent i = new Intent(Intent.ACTION_VIEW);\n        i.setData(Uri.parse(\"https://example.com?\" + urlWithAdobeVisitorInfo));\n        startActivity(i);\n    }\n});\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"get-url-variables\" repeat=\"11\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-4\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`@objc(getUrlVariables:)\nstatic func getUrlVariables(completion: @escaping (String?, Error?) -> Void)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`completion`}</em>{` is invoked with `}<em parentName=\"li\">{`String`}</em>{` containing the visitor identifiers as a query string, or `}<em parentName=\"li\">{`Error`}</em>{` if an unexpected error occurs or the request times out. The returned `}<inlineCode parentName=\"li\">{`Error`}</inlineCode>{` contains the `}<a parentName=\"li\" {...{\n          \"href\": \"../api-reference.md#public-classes\"\n        }}>{`AEPError`}</a>{` code of the specific error. The default timeout of 500ms.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`Identity.getUrlVariables { (urlVariables, error) in\n  if let error = error {\n    // handle error\n  } else {\n    var urlStringWithVisitorData: String = \"https://example.com\"\n    if let urlVariables: String = urlVariables {\n      urlStringWithVisitorData.append(\"?\" + urlVariables)\n    }\n\n    guard let urlWithVisitorData: URL = URL(string: urlStringWithVisitorData) else {\n      // handle error, unable to construct URL\n      return\n    }\n    // APIs which update the UI must be called from main thread\n    DispatchQueue.main.async {\n      self.webView.load(URLRequest(url: urlWithVisitorData))\n    }\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-4\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) getUrlVariables: ^(NSString * _Nullable urlVariables, NSError * _Nullable error) completion;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`[AEPMobileIdentity getUrlVariables:^(NSString * _Nullable urlVariables, NSError *error) {\n  if (error) {\n    // handle error here\n  } else {\n    // handle the URL query parameter string here\n    NSString* urlString = @\"https://example.com\";\n    NSString* urlStringWithVisitorData = [NSString stringWithFormat:@\"%@?%@\", urlString, urlVariables];\n    NSURL* urlWithVisitorData = [NSURL URLWithString:urlStringWithVisitorData];\n    // APIs which update the UI must be called from main thread\n    dispatch_async(dispatch_get_main_queue(), ^{\n      [[self webView] loadRequest:[NSURLRequest requestWithURL:urlWithVisitorData]];\n    }\n  }\n}];\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" api=\"get-url-variables\" repeat=\"6\"/>\n     This method was added in react-native-acpcore v1.0.5.\n     #### JavaScript\n     **Syntax**\n     ```jsx\n     getUrlVariables(): Promise<?string>;\n     ```\n     **Example**\n     ```jsx\n     ACPIdentity.getUrlVariables().then(urlVariables => console.log(\"AdobeExperenceSDK: query params = \" + urlVariables));\n     ```\n     <Variant platform=\"flutter\" api=\"get-url-variables\" repeat=\"5\"/>\n     #### Dart\n     **Syntax**\n     ```dart\n     Future<String> urlVariables;\n     ```\n     **Example**\n     ```dart\n     String result = \"\";\n     try {\n      result = await FlutterACPIdentity.urlVariables;\n     } on PlatformException {\n      log(\"Failed to get url variables\");\n     }\n     ``` -*/}\n    <Variant platform=\"android\" api=\"register-extension\" repeat=\"3\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-5\"\n    }}>{`Java`}</h4>\n    <p>{`After calling the `}<inlineCode parentName=\"p\">{`setApplication()`}</inlineCode>{` method in the `}<inlineCode parentName=\"p\">{`onCreate()`}</inlineCode>{` method, register the extension. If the registration was not successful, an `}<inlineCode parentName=\"p\">{`InvalidInitException`}</inlineCode>{` is thrown.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class MobileApp extends Application {\n@Override\npublic void onCreate() {\nsuper.onCreate();\n     MobileCore.setApplication(this);\n     try {\n         Identity.registerExtension();\n     } catch (Exception e) {\n         //Log the exception\n     }\n  }\n}\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"register-extension\" repeat=\"7\" mdxType=\"Variant\" />\n    <p>{`For iOS AEP libraries, registration is changed to a single API call. Calling the MobileCore.start API is no longer required. See `}<a parentName=\"p\" {...{\n        \"href\": \"../api-reference.md#registerextension-s\"\n      }}>{`MobileCore.registerExtensions()`}</a>{` for more information.`}</p>\n    <h4 {...{\n      \"id\": \"swift-5\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`// AppDelegate.swift\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    MobileCore.registerExtensions([AEPIdentity.Identity.self, Lifecycle.self, Analytics.self], {\n        MobileCore.configureWith(appId: \"mobilePropertyEnvironmentID\")\n    })\n  ...\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-5\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`// AppDelegate.m\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    [AEPMobileCore registerExtensions:@[AEPMobileIdentity.class, AEPMobileLifecycle.class, AEPMobileAnalytics.class] completion:^{\n    [AEPMobileCore configureWithAppId: @\"mobilePropertyEnvironmentID\"];\n  }];\n  ...\n}\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" api=\"register-extension\" repeat=\"2\"/>\n     #### JavaScript\n     When using React Native, registering Identity with Mobile Core should be done in native code which is shown under the Android and iOS tabs.\n     <Variant platform=\"flutter\" api=\"register-extension\" repeat=\"2\"/>\n     #### Dart\n     When using Flutter, registering Identity with Mobile Core should be done in native code which is shown under the Android and iOS tabs. -*/}\n    <Variant platform=\"android\" api=\"set-advertising-identifier\" repeat=\"8\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-6\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void setAdvertisingIdentifier(@Nullable final String advertisingIdentifier)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`advertisingIdentifier`}</em>{` is a string that provides developers with a simple, standard system to track the Ads through their apps.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <p>{`This is just an implementation example. For more information about advertising identifiers and how to handle them correctly in your mobile application, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.google.com/android/reference/com/google/android/gms/ads/identifier/AdvertisingIdClient\"\n      }}>{`Google Play Services documentation about AdvertisingIdClient`}</a>{`.`}</p>\n    <p>{`This example requires Google Play Services to be configured in your mobile application. For instructions on how to import the Google Mobile Ads SDK and how to configure your ApplicationManifest.xml file, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://developers.google.com/admob/android/quick-start\"\n      }}>{`Google Mobile Ads SDK setup`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`...\n@Override\npublic void onResume() {\n    super.onResume();\n    ...\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            String advertisingIdentifier = null;\n\n            try {\n                AdvertisingIdClient.Info adInfo = AdvertisingIdClient.getAdvertisingIdInfo(getApplicationContext());\n                if (adInfo != null) {\n                    if (!adInfo.isLimitAdTrackingEnabled()) {\n                        advertisingIdentifier = adInfo.getId();\n                    } else {\n                        MobileCore.log(LoggingMode.DEBUG, \"ExampleActivity\", \"Limit Ad Tracking is enabled by the user, cannot process the advertising identifier\");\n                    }\n                }\n\n            } catch (IOException e) {\n                // Unrecoverable error connecting to Google Play services (e.g.,\n                // the old version of the service doesn't support getting AdvertisingId).\n                MobileCore.log(LoggingMode.DEBUG, \"ExampleActivity\", \"IOException while retrieving the advertising identifier \" + e.getLocalizedMessage());\n            } catch (GooglePlayServicesNotAvailableException e) {\n                // Google Play services is not available entirely.\n                MobileCore.log(LoggingMode.DEBUG, \"ExampleActivity\", \"GooglePlayServicesNotAvailableException while retrieving the advertising identifier \" + e.getLocalizedMessage());\n            } catch (GooglePlayServicesRepairableException e) {\n                // Google Play services is not installed, up-to-date, or enabled.\n                MobileCore.log(LoggingMode.DEBUG, \"ExampleActivity\", \"GooglePlayServicesRepairableException while retrieving the advertising identifier \" + e.getLocalizedMessage());\n            }\n\n            MobileCore.setAdvertisingIdentifier(advertisingIdentifier);\n        }\n    }).start();\n}\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"set-advertising-identifier\" repeat=\"13\" mdxType=\"Variant\" />\n    <p>{`To access IDFA and handle it correctly in your mobile application, see the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/adsupport/asidentifiermanager\"\n      }}>{`Apple developer documentation about IDFA`}</a></p>\n    <p>{`Starting iOS 14+, applications must use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/apptrackingtransparency\"\n      }}>{`App Tracking Transparency`}</a>{` framework to request user authorization before using the Identifier for Advertising (IDFA).`}</p>\n    <h4 {...{\n      \"id\": \"swift-6\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`@objc(setAdvertisingIdentifier:)\npublic static func setAdvertisingIdentifier(_ identifier: String?)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`identifier`}</em>{` is a string that provides developers with a simple, standard system to continue to track the Ads through their apps.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import AdSupport\nimport AppTrackingTransparency\n...\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    ...\n    if #available(iOS 14, *) {\n       setAdvertisingIdentiferUsingTrackingManager()\n    } else {\n       // Fallback on earlier versions\n       setAdvertisingIdentifierUsingIdentifierManager()\n    }\n\n}\n\nfunc setAdvertisingIdentifierUsingIdentifierManager() {\n    var idfa:String = \"\";\n        if (ASIdentifierManager.shared().isAdvertisingTrackingEnabled) {\n            idfa = ASIdentifierManager.shared().advertisingIdentifier.uuidString;\n        } else {\n            Log.debug(label: \"AppDelegateExample\",\n                      \"Advertising Tracking is disabled by the user, cannot process the advertising identifier.\");\n        }\n        MobileCore.setAdvertisingIdentifier(idfa);\n}\n\n@available(iOS 14, *)\nfunc setAdvertisingIdentiferUsingTrackingManager() {\n    ATTrackingManager.requestTrackingAuthorization { (status) in\n        var idfa: String = \"\";\n\n        switch (status) {\n        case .authorized:\n            idfa = ASIdentifierManager.shared().advertisingIdentifier.uuidString\n        case .denied:\n            Log.debug(label: \"AppDelegateExample\",\n                      \"Advertising Tracking is denied by the user, cannot process the advertising identifier.\")\n        case .notDetermined:\n            Log.debug(label: \"AppDelegateExample\",\n                      \"Advertising Tracking is not determined, cannot process the advertising identifier.\")\n        case .restricted:\n            Log.debug(label: \"AppDelegateExample\",\n                      \"Advertising Tracking is restricted by the user, cannot process the advertising identifier.\")\n        }\n\n        MobileCore.setAdvertisingIdentifier(idfa)\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-6\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) setAdvertisingIdentifier: (NSString * _Nullable identifier);\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`#import <AdSupport/ASIdentifierManager.h>\n#import <AppTrackingTransparency/ATTrackingManager.h>\n...\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n-   ...\n-\n    if (@available(iOS 14, *)) {\n        [self setAdvertisingIdentiferUsingTrackingManager];\n    } else {\n        // fallback to earlier versions\n        [self setAdvertisingIdentifierUsingIdentifierManager];\n    }\n\n}\n\n- (void) setAdvertisingIdentifierUsingIdentifierManager {\n    // setup the advertising identifier\n    NSString *idfa = nil;\n    if ([[ASIdentifierManager sharedManager] isAdvertisingTrackingEnabled]) {\n        idfa = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];\n    } else {\n        [AEPLog debugWithLabel:@\"AppDelegateExample\"\n                       message:@\"Advertising Tracking is disabled by the user, cannot process the advertising identifier\"];\n    }\n    [AEPMobileCore setAdvertisingIdentifier:idfa];\n\n}\n\n- (void) setAdvertisingIdentiferUsingTrackingManager API_AVAILABLE(ios(14)) {\n    [ATTrackingManager requestTrackingAuthorizationWithCompletionHandler:\n    ^(ATTrackingManagerAuthorizationStatus status){\n        NSString *idfa = nil;\n        switch(status) {\n            case ATTrackingManagerAuthorizationStatusAuthorized:\n                idfa = [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];\n                break;\n            case ATTrackingManagerAuthorizationStatusDenied:\n                [AEPLog debugWithLabel:@\"AppDelegateExample\"\n                               message:@\"Advertising Tracking is denied by the user, cannot process the advertising identifier\"];\n                break;\n            case ATTrackingManagerAuthorizationStatusNotDetermined:\n                [AEPLog debugWithLabel:@\"AppDelegateExample\"\n                               message:@\"Advertising Tracking is not determined, cannot process the advertising identifier\"];\n                break;\n            case ATTrackingManagerAuthorizationStatusRestricted:\n                [AEPLog debugWithLabel:@\"AppDelegateExample\"\n                               message:@\"Advertising Tracking is restricted by the user, cannot process the advertising identifier\"];\n                break;\n        }\n\n        [AEPMobileCore setAdvertisingIdentifier:idfa];\n    }];\n}\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" api=\"set-advertising-identifier\" repeat=\"6\"/>\n     #### JavaScript\n     **Syntax**\n     ```jsx\n     setAdvertisingIdentifier(advertisingIdentifier?: String);\n     ```\n     * _adID_ is a string that provides developers with a simple, standard system to continue to track the Ads through their apps.\n     **Example**\n     ```jsx\n     ACPCore.setAdvertisingIdentifier(\"ADVTID\");\n     ```\n     <Variant platform=\"flutter\" api=\"set-advertising-identifier\" repeat=\"6\"/>\n     #### Dart\n     **Syntax**\n     ```dart\n     Future<void> setAdvertisingIdentifier (String aid);\n     ```\n     * _aid_ is a string that provides developers with a simple, standard system to continue to track the Ads through their apps.\n     **Example**\n     ```dart\n     FlutterACPCore.setAdvertisingIdentifier(\"ADVTID\");\n     ``` -*/}\n    <Variant platform=\"android\" api=\"set-push-identifier\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-7\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void setPushIdentifier(@Nullable final String pushIdentifier)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`pushIdentifier`}</em>{` is a string that contains the device token for push notifications.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`//Retrieve the token from either GCM or FCM, and pass it to the SDK\nMobileCore.setPushIdentifier(token);\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"set-push-identifier\" repeat=\"11\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-7\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`@objc(setPushIdentifier:)\npublic static func setPushIdentifier(_ deviceToken: Data?)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`deviceToken`}</em>{` is a string that contains the device token for push notifications.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`// Set the deviceToken that the APNs has assigned to the device\nMobileCore.setPushIdentifier(deviceToken)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-7\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) setPushIdentifier: (NSString * _Nullable deviceToken);\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`// Set the deviceToken that the APNS has assigned to the device\n[AEPMobileCore setPushIdentifier:deviceToken];\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" api=\"set-push-identifier\" repeat=\"6\"/>\n     #### JavaScript\n     **Syntax**\n     ```jsx\n     ACPCore.setPushIdentifier(pushIdentifier);\n     ```\n     * _pushIdentifier_ is a string that contains the device token for push notifications.\n     **Example**\n     ```jsx\n     ACPCore.setPushIdentifier(\"pushID\");\n     ``` -*/}\n    <Variant platform=\"android\" api=\"sync-identifier\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-8\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void syncIdentifier(\n            @NonNull final String identifierType,\n            @Nullable final String identifier,\n            @NonNull final VisitorID.AuthenticationState authenticationState)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`identifierType (String)`}</em>{` contains the `}<inlineCode parentName=\"li\">{`identifier type`}</inlineCode>{`, and this parameter should not be null or empty. The allowed characters are `}{`[A-Za-z0-9_.]`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`identifier (String)`}</em>{` contains the `}<inlineCode parentName=\"li\">{`identifier value`}</inlineCode>{`, and this parameter should not be null or empty.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`authenticationState (AuthenticationState)`}</em>{` indicates the authentication state of the user and contains one of the `}<a parentName=\"li\" {...{\n          \"href\": \"#public-classes\"\n        }}>{`VisitorID.AuthenticationState`}</a>{` values.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Identity.syncIdentifier(\"idType\",\n                        \"idValue\",\n                        VisitorID.AuthenticationState.AUTHENTICATED);\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"sync-identifier\" repeat=\"11\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-8\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`@objc(syncIdentifierWithType:identifier:authenticationState:)\nstatic func syncIdentifier(identifierType: String, identifier: String, authenticationState: MobileVisitorAuthenticationState)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`The `}<em parentName=\"li\">{`identifierType (String)`}</em>{` contains the `}<inlineCode parentName=\"li\">{`identifier type`}</inlineCode>{`, and this parameter should not be null or empty. The allowed characters are `}{`[A-Za-z0-9_.]`}</li>\n      <li parentName=\"ul\">{`The `}<em parentName=\"li\">{`identifier (String)`}</em>{` contains the `}<inlineCode parentName=\"li\">{`identifier`}</inlineCode>{` value, and this parameter should not be null or empty. If either the `}<inlineCode parentName=\"li\">{`identifierType`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`identifier`}</inlineCode>{` contains a null or an empty string, the identifier is ignored by the Identity extension.`}</li>\n      <li parentName=\"ul\">{`The `}<em parentName=\"li\">{`authenticationState (MobileVisitorAuthenticationState)`}</em>{` value indicates the authentication state for the user and contains one of the `}<a parentName=\"li\" {...{\n          \"href\": \"#public-classes\"\n        }}>{`MobileVisitorAuthenticationState`}</a>{` values.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`Identity.syncIdentifier(identifierType: \"idType\",\n                            identifier: \"idValue\",\n                        authentication: .unknown)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-8\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) syncIdentifierWithType: (NSString * _Nonnull identifierType)\n                                         identifier: (NSString * _Nonnull identifier)\n                                 authentication: (enum AEPAuthenticationState authenticationState);\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`[AEPMobileIdentity syncIdentifierWithType:@\"idType\"\n                               identifier:@\"idValue\"\n                      authenticationState:AEPMobileVisitorAuthStateUnknown];\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" api=\"sync-identifier\" repeat=\"6\"/>\n     #### JavaScript\n     **Syntax**\n     ```jsx\n     syncIdentifier(identifierType: String, identifier: String, authenticationState: string);\n     ```\n     * The _identifierType (String)_ contains the `identifier type`, and this parameter should not be null or empty. The allowed characters are [A-Za-z0-9_.]\n     * The _identifier (String)_ contains the `identifier` value, and this parameter should not be null or empty. If either the `identifier type` or `identifier` contains a null or an empty string, the identifier is ignored by the Identity extension.\n     * _authenticationState (ACPMobileVisitorAuthenticationState)_ value indicating authentication state for the user and contains one of the following [ACPMobileVisitorAuthenticationState](#public-classes) values.\n     **Example**\n     ```jsx\n     import {ACPMobileVisitorAuthenticationState} from '@adobe/react-native-acpcore';\n     ACPIdentity.syncIdentifier(\"identifierType\", \"identifier\", ACPMobileVisitorAuthenticationState.AUTHENTICATED);\n     ```\n     <Variant platform=\"flutter\" api=\"sync-identifier\" repeat=\"6\"/>\n     #### Dart\n     **Syntax**\n     ```dart\n     Future<void> syncIdentifier(String identifierType, String identifier, ACPMobileVisitorAuthenticationState authState);\n     ```\n     * The _identifierType (String)_ contains the `identifier type`, and this parameter should not be null or empty. The allowed characters are [A-Za-z0-9_.]\n     * The _identifier (String)_ contains the `identifier` value, and this parameter should not be null or empty. If either the `identifier type` or `identifier` contains a null or an empty string, the identifier is ignored by the Identity extension.\n     * _authState (ACPMobileVisitorAuthenticationState_ value indicating authentication state for the user and contains one of the following [ACPMobileVisitorAuthenticationState](#public-classes) values.\n     **Example**\n     ```dart\n     import 'package:flutter_acpcore/src/acpmobile_visitor_id.dart';\n     FlutterACPIdentity.syncIdentifier(\"identifierType\", \"identifier\", ACPMobileVisitorAuthenticationState.AUTHENTICATED);\n     ``` -*/}\n    <Variant platform=\"android\" api=\"sync-identifiers\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-9\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void syncIdentifiers(@NonNull final Map<String, String> identifiers)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`identifiers`}</em>{` is a map that contains the identifiers with the Identifier type as the key, and the string identifier as the value. In each identifier pair, if the `}<inlineCode parentName=\"li\">{`identifier type`}</inlineCode>{` contains a null or an empty string, the identifier is ignored by the Identity extension.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Map<String, String> identifiers = new HashMap<String, String>();\nidentifiers.put(\"idType1\", \"idValue1\");\nidentifiers.put(\"idType2\", \"idValue2\");\nidentifiers.put(\"idType3\", \"idValue3\");\nIdentity.syncIdentifiers(identifiers);\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"sync-identifiers\" repeat=\"11\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-9\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`@objc(syncIdentifiers:)\nstatic func syncIdentifiers(identifiers: [String: String]?)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`The `}<em parentName=\"li\">{`identifiers`}</em>{` dictionary contains identifier type as the key and identifier as the value, both identifier type and identifier should be non empty and non nil values.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let ids : [String: String] = [\"idType1\":\"idValue1\",\n                              \"idType2\":\"idValue2\",\n                              \"idType3\":\"idValue3\"];\nIdentity.syncIdentifiers(identifiers: ids)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-9\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) syncIdentifiers: (NSDictionary<NSString *, NSString *> * _Nullable identifiers);\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`NSDictionary *ids = @{@\"idType1\":@\"idValue1\",\n                      @\"idType2\":@\"idValue2\",\n                      @\"idType3\":@\"idValue3\"};\n[AEPMobileIdentity syncIdentifiers:ids];\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" api=\"sync-identifiers\" repeat=\"6\"/>\n     #### JavaScript\n     **Syntax**\n     ```jsx\n     syncIdentifiers(identifiers?: {string: string});\n     ```\n     * The _identifiers_ dictionary contains identifiers, and each identifier contains an `identifier type` as the key and an `identifier` as the value. If any of the identifier pairs contains an empty or null value as the `identifier type`, then it will be ignored.\n     **Example**\n     ```jsx\n     ACPIdentity.syncIdentifiers({\"id1\": \"identifier1\"});\n     ```\n     <Variant platform=\"flutter\" api=\"sync-identifiers\" repeat=\"6\"/>\n     #### Dart\n     **Syntax**\n     ```dart\n     Future<void> syncIdentifiers (Map<String, String> identifiers);\n     ```\n     * The _identifiers_ dictionary contains identifiers, and each identifier contains an `identifier type` as the key and an `identifier` as the value. If any of the identifier pairs contains an empty or null value as the `identifier type`, then it will be ignored.\n     **Example**\n     ```jsx\n     FlutterACPIdentity.syncIdentifiers({\"idType1\":\"idValue1\",\n                                        \"idType2\":\"idValue2\",\n                                        \"idType3\":\"idValue3\"});\n     ``` -*/}\n    <Variant platform=\"android\" api=\"sync-identifiers-overloaded\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-10\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void syncIdentifiers(\n            @NonNull final Map<String, String> identifiers,\n            @NonNull final VisitorID.AuthenticationState authenticationState)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`identifiers`}</em>{` is a map that contains IDs with the identifier type as the key, and the string identifier as the value.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`authState`}</em>{` indicates the authentication state for the user, which contains one of the following `}<a parentName=\"li\" {...{\n          \"href\": \"#public-classes\"\n        }}>{`VisitorID.AuthenticationState`}</a>{` values.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Map<String, String> identifiers = new HashMap<String, String>();\nidentifiers.put(\"idType1\", \"idValue1\");\nidentifiers.put(\"idType2\", \"idValue2\");\nidentifiers.put(\"idType3\", \"idValue3\");\nIdentity.syncIdentifiers(identifiers, VisitorID.AuthenticationState.AUTHENTICATED);\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"sync-identifiers-overloaded\" repeat=\"11\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-10\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`@objc(syncIdentifiers:authenticationState:)\nstatic func syncIdentifiers(identifiers: [String: String]?, authenticationState: MobileVisitorAuthenticationState)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`The `}<em parentName=\"li\">{`identifiers`}</em>{` dictionary contains identifier type as the key and identifier as the value, both identifier type and identifier should be non empty and non nil values.`}</li>\n      <li parentName=\"ul\">{`The `}<em parentName=\"li\">{`authenticationState (MobileVisitorAuthenticationState)`}</em>{` indicates the authentication state of the user and contains one of the `}<a parentName=\"li\" {...{\n          \"href\": \"#public-classes\"\n        }}>{`MobileVisitorAuthenticationState`}</a>{` values.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let ids : [String: String] = [\"idType1\":\"idValue1\",\n                              \"idType2\":\"idValue2\",\n                              \"idType3\":\"idValue3\"];\nIdentity.syncIdentifiers(identifiers: ids, authenticationState: .authenticated)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-10\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) syncIdentifiers: (NSDictionary<NSString *, NSString *> * _Nullable identifiers)\n                  authentication: (enum AEPAuthenticationState authenticationState);\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`NSDictionary *ids = @{@\"idType1\":@\"idValue1\",\n                      @\"idType2\":@\"idValue2\",\n                      @\"idType3\":@\"idValue3\"};\n[AEPMobileIdentity syncIdentifiers:ids authenticationState:AEPMobileVisitorAuthStateAuthenticated];\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" api=\"sync-identifiers-overloaded\" repeat=\"6\"/>\n     #### JavaScript\n     **Syntax**\n     ```jsx\n     syncIdentifiersWithAuthState(identifiers?: {string: string}, authenticationState: string);\n     ```\n     * The _identifiers_ dictionary contains identifiers, and each identifier contains an `identifier type` as the key and an `identifier` as the value. If any of the identifier pairs contains an empty or null value as the `identifier type`, then it will be ignored.\n     * The _authenticationState (ACPMobileVisitorAuthenticationState)_ indicates the authentication state of the user and contains one of the [ACPMobileVisitorAuthenticationState](#public-classes) values.\n     **Example**\n     ```jsx\n     import {ACPMobileVisitorAuthenticationState} from '@adobe/react-native-acpcore';\n     ACPIdentity.syncIdentifiersWithAuthState({\"id1\": \"identifier1\"}, ACPMobileVisitorAuthenticationState.UNKNOWN);\n     ```\n     <Variant platform=\"flutter\" api=\"sync-identifiers-overloaded\" repeat=\"6\"/>\n     #### Dart\n     **Syntax**\n     ```dart\n     Future<void> syncIdentifiersWithAuthState (Map<String, String> identifiers, ACPMobileVisitorAuthenticationState authState);\n     ```\n     * The _identifiers_ dictionary contains identifiers, and each identifier contains an `identifier type` as the key and an `identifier` as the value. If any of the identifier pairs contains an empty or null value as the `identifier type`, then it will be ignored.\n     * The _authState (ACPMobileVisitorAuthenticationState)_ indicates the authentication state of the user and contains one of the [ACPMobileVisitorAuthenticationState](#public-classes) values.\n     **Example**\n     ```dart\n     import 'package:flutter_acpcore/src/acpmobile_visitor_id.dart';\n     FlutterACPIdentity.syncIdentifiersWithAuthState({\"idType1\":\"idValue1\", \"idType2\":\"idValue2\", \"idType3\":\"idValue3\"}, ACPMobileVisitorAuthenticationState.UNKNOWN);\n     ``` -*/}\n    <Variant platform=\"android\" api=\"public-classes\" repeat=\"6\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`AuthenticationState`}</strong></p>\n    <p>{`This class is used to indicate the authentication state for the current `}<inlineCode parentName=\"p\">{`VisitorID`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public enum AuthenticationState {\n       UNKNOWN,\n       AUTHENTICATED,\n       LOGGED_OUT;\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`VisitorID`}</strong></p>\n    <p>{`This class is an identifier to be used with the Adobe Experience Cloud Identity Service.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class VisitorID {\n     //Constructor\n     public VisitorID(String idOrigin, String idType, String id, VisitorID.AuthenticationState authenticationState);\n\n     public VisitorID.AuthenticationState getAuthenticationState();\n\n     public final String getId();\n\n     public final String getIdOrigin();\n\n     public final String getIdType();\n\n}\n`}</code></pre>\n    <Variant platform=\"ios\" api=\"public-classes\" repeat=\"5\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`MobileVisitorAuthenticationState`}</strong></p>\n    <p>{`This is used to indicate the authentication state for the current `}<inlineCode parentName=\"p\">{`Identifiable`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`@objc(AEPMobileVisitorAuthState) public enum MobileVisitorAuthenticationState: Int, Codable {\n    case unknown = 0\n    case authenticated = 1\n    case loggedOut = 2\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Identifiable`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`@objc(AEPIdentifiable) public protocol Identifiable {\n    /// Origin of the identifier\n    var origin: String? { get }\n\n    /// Type of the identifier\n    var type: String? { get }\n\n    /// The identifier\n    var identifier: String? { get }\n\n    /// The authentication state for the identifier\n    var authenticationState: MobileVisitorAuthenticationState { get }\n}\n`}</code></pre>\n    {/*- <Variant platform=\"react-native\" api=\"public-classes\" repeat=\"7\"/>\n     #### JavaScript\n     **ACPVisitorID**\n     This is an identifier to be used with the Adobe Experience Cloud Identity Service and it contains the origin, the identifier type, the identifier, and the authentication state of the visitor ID.\n     ```jsx\n     import {ACPVisitorID} from '@adobe/react-native-acpcore';\n     var visitorId = new ACPVisitorID(idOrigin?: string, idType: string, id?: string, authenticationState?: ACPMobileVisitorAuthenticationState);\n     ```\n     **ACPMobileVisitorAuthenticationState**\n     This is used to indicate the authentication state for the current `VisitorID`.\n     ```jsx\n     import {ACPMobileVisitorAuthenticationState} from '@adobe/react-native-acpcore';\n     var state = ACPMobileVisitorAuthenticationState.AUTHENTICATED;\n     //var state = ACPMobileVisitorAuthenticationState.LOGGED_OUT;\n     //var state = ACPMobileVisitorAuthenticationState.UNKNOWN;\n     ```\n     <Variant platform=\"flutter\" api=\"public-classes\" repeat=\"7\"/>\n     #### Dart\n     **ACPVisitorID**\n     This is an identifier to be used with the Adobe Experience Cloud Identity Service and it contains the origin, the identifier type, the identifier, and the authentication state of the visitor ID.\n     ```dart\n     import 'package:flutter_acpcore/src/acpmobile_visitor_id.dart';\n     class ACPMobileVisitorId {\n      String get idOrigin;\n      String get idType;\n      String get identifier;\n      ACPMobileVisitorAuthenticationState get authenticationState;\n     };\n     ```\n     **ACPMobileVisitorAuthenticationState**\n     This is used to indicate the authentication state for the current `VisitorID`.\n     ```dart\n     import 'package:flutter_acpcore/src/acpmobile_visitor_id.dart';\n     enum ACPMobileVisitorAuthenticationState {UNKNOWN, AUTHENTICATED, LOGGED_OUT};\n     ``` -*/}\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Variant","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","platform","api","repeat","parentName","isMDXComponent"],"sourceRoot":""}