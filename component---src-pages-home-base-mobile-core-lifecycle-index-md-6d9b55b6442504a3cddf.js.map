{"version":3,"file":"component---src-pages-home-base-mobile-core-lifecycle-index-md-6d9b55b6442504a3cddf.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/home/base/mobile-core/lifecycle/index.md","webpack://dev-site-documentation-template/./src/pages/home/base/mobile-core/lifecycle/tabs/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Tabs from './tabs/index.md';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst TabsBlock = makeShortcode(\"TabsBlock\");\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"lifecycle\"\n    }}>{`Lifecycle`}</h1>\n    <p>{`Sessions contain information about the app's current lifecycle, such as the device information, the application install or upgrade information, the session start and pause times, the number of application launches, and additional context data that is provided by the developer through the `}<inlineCode parentName=\"p\">{`lifecycleStart`}</inlineCode>{` API. Session data is persisted, so it is available across application launches.`}</p>\n    <h2 {...{\n      \"id\": \"add-lifecycle-to-your-app\"\n    }}>{`Add Lifecycle to your app`}</h2>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"3\" mdxType=\"TabsBlock\" />\n    <p>{`Kotlin`}<br />{`(Android)`}</p>\n    <Tabs query=\"platform=android-kotlin&task=add\" mdxType=\"Tabs\" />\n    <p>{`Groovy`}<br />{`(Android)`}</p>\n    <Tabs query=\"platform=android-groovy&task=add\" mdxType=\"Tabs\" />\n    <p>{`CocoaPods`}<br />{`(iOS)`}</p>\n    <Tabs query=\"platform=ios-pods&task=add\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"register-lifecycle-with-mobile-core\"\n    }}>{`Register Lifecycle with Mobile Core`}</h2>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"4\" mdxType=\"TabsBlock\" />\n    <p>{`Kotlin`}<br />{`(Android)`}</p>\n    <Tabs query=\"platform=android-kotlin&task=register\" mdxType=\"Tabs\" />\n    <p>{`Java`}<br />{`(Android)`}</p>\n    <Tabs query=\"platform=android-java&task=register\" mdxType=\"Tabs\" />\n    <p>{`Swift`}<br />{`(iOS)`}</p>\n    <Tabs query=\"platform=ios-swift&task=register\" mdxType=\"Tabs\" />\n    <p>{`Objective-C`}<br />{`(iOS)`}</p>\n    <Tabs query=\"platform=ios-objc&task=register\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"add-lifecycle-start-and-pause-calls\"\n    }}>{`Add Lifecycle start and pause calls`}</h2>\n    <p>{`You can start collecting Lifecycle information at any time in your app, but you should start as soon as your app enters the foreground. This allows Lifecycle metrics to be correctly attributed to all of your users' activities for their current session.`}</p>\n    <p>{`You should pause Lifecycle collection when the user stops using your app. The best time to do this is usually when your app has entered the background.`}</p>\n    <h3 {...{\n      \"id\": \"lifecycle-on-ios\"\n    }}>{`Lifecycle on iOS`}</h3>\n    <h4 {...{\n      \"id\": \"start-lifecycle-data-collection-on-launch\"\n    }}>{`Start Lifecycle data collection on launch`}</h4>\n    <p>{`Start Lifecycle data collection by calling `}<inlineCode parentName=\"p\">{`lifecycleStart(_:)`}</inlineCode>{` from within the callback of the `}<inlineCode parentName=\"p\">{`MobileCore.registerExtensions(_:)`}</inlineCode>{` method in your app's `}<inlineCode parentName=\"p\">{`application(_:didFinishLaunchingWithOptions:)`}</inlineCode>{` delegate method.`}</p>\n    <p>{`If your iOS application supports background capabilities, your `}<inlineCode parentName=\"p\">{`application(_:didFinishLaunchingWithOptions:)`}</inlineCode>{` method might be called when iOS launches your app in the background. If you do not want background launches to count towards your lifecycle metrics, then `}<inlineCode parentName=\"p\">{`lifecycleStart(_:)`}</inlineCode>{` should only be called when the application state is not equal to `}<inlineCode parentName=\"p\">{`UIApplicationStateBackground`}</inlineCode>{`.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Swift`}</p>\n    <Tabs query=\"platform=ios-swift&task=start-lifecycle-didfinishlaunch\" mdxType=\"Tabs\" />\n    <p>{`Objective-C`}</p>\n    <Tabs query=\"platform=ios-objc&task=start-lifecycle-didfinishlaunch\" mdxType=\"Tabs\" />\n    <h4 {...{\n      \"id\": \"start-and-pause-lifecycle-data-collection-from-ios-lifecycle-delegate\"\n    }}>{`Start and Pause Lifecycle data collection from iOS lifecycle delegate`}</h4>\n    <p>{`When your app is resuming from the background state, call `}<inlineCode parentName=\"p\">{`lifecycleStart(_:)`}</inlineCode>{` from the appropriate delegate object's \"will enter foreground\" method. When your app enters the background state, call `}<inlineCode parentName=\"p\">{`lifecyclePause()`}</inlineCode>{` from the appropriate delegate object's \"did enter background\" method.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`For a scene-based UI, call the Lifecycle APIs from the `}<em parentName=\"p\">{`UISceneDelegate`}</em>{`'s `}<inlineCode parentName=\"p\">{`sceneWillEnterForeground(_:)`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`sceneDidEnterBackground(_:)`}</inlineCode>{` methods.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`For all other apps, call the Lifecycle APIs from the `}<em parentName=\"p\">{`UIApplicationDelegate`}</em>{`'s `}<inlineCode parentName=\"p\">{`applicationWillEnterForeground(_:)`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`applicationDidEnterBackground(_:)`}</inlineCode>{` methods.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If your application supports both a scene delegate and an app delegate, implement the Lifecycle APIs in both delegate objects.`}</p>\n      </li>\n    </ul>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Swift`}</p>\n    <Tabs query=\"platform=ios-swift&task=start-pause\" mdxType=\"Tabs\" />\n    <p>{`Objective-C`}</p>\n    <Tabs query=\"platform=ios-objc&task=start-pause\" mdxType=\"Tabs\" />\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`For more information on handling foreground and background states in applications with Scenes, refer to Apple's documentation on preparing your UI to run in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_foreground\"\n      }}>{`foreground`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background\"\n      }}>{`background`}</a></p>\n    <h4 {...{\n      \"id\": \"start-and-pause-lifecycle-data-collection-in-swiftui\"\n    }}>{`Start and Pause Lifecycle data collection in SwiftUI`}</h4>\n    <p>{`If your pure SwiftUI application does not use an app delegate or scene delegate, you may still use the Lifecycle extension by listening for `}<inlineCode parentName=\"p\">{`scenePhase`}</inlineCode>{` changes.`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Register the Lifecycle extension and configure the Mobile SDK from the `}<inlineCode parentName=\"p\">{`App`}</inlineCode>{` class's `}<inlineCode parentName=\"p\">{`init()`}</inlineCode>{` function.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Set the `}<inlineCode parentName=\"p\">{`@Environment`}</inlineCode>{` property wrapper to observe the `}<inlineCode parentName=\"p\">{`scenePhase`}</inlineCode>{` variable to read the application's current phase.`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`Use the `}<inlineCode parentName=\"p\">{`scenePhase`}</inlineCode>{` property in conjunction with `}<inlineCode parentName=\"p\">{`.onChange(of:)`}</inlineCode>{` to trigger the Lifecycle APIs when the phase changes between `}<inlineCode parentName=\"p\">{`.active`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`.background`}</inlineCode>{`.`}</p>\n      </li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import SwiftUI\nimport AEPCore\nimport AEPLifecycle\n\n@main\nstruct TestSwiftUIApp: App {\n\n    @Environment(\\\\.scenePhase) private var scenePhase\n\n    init() {\n        MobileCore.registerExtensions([Lifecycle.self]) {\n            // Post registration tasks, such as configureWith(appId:)\n        }\n    }\n\n    var body: some Scene {\n        WindowGroup {\n            ContentView()\n        }.onChange(of: scenePhase) { phase in\n            switch phase {\n                case .active:\n                    MobileCore.lifecycleStart(additionalContextData: nil)\n                case .background:\n                    MobileCore.lifecyclePause()\n                case .inactive:\n                    print(\"Inactive scene phase\")\n                @unknown default:\n                    print(\"unknown scene phase has been added to scenePhase enum\")\n            }\n        }\n    }\n}\n`}</code></pre>\n    <p>{`For more information, read the full blog post `}<a parentName=\"p\" {...{\n        \"href\": \"https://blog.developer.adobe.com/implement-adobe-experience-cloud-mobile-lifecycle-tracking-in-swiftui-41a8373a55fb\"\n      }}>{`Implement Adobe Experience Cloud Mobile Lifecycle Tracking in SwiftUI`}</a>{`.`}</p>\n    <h4 {...{\n      \"id\": \"include-additional-context-data\"\n    }}>{`Include additional context data`}</h4>\n    <p>{`To include additional data with lifecycle tracking calls, pass an additional parameter to `}<inlineCode parentName=\"p\">{`lifecycleStart(additionalContextData:)`}</inlineCode>{` that contains context data:`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Swift`}</p>\n    <Tabs query=\"platform=ios-swift&task=context-data\" mdxType=\"Tabs\" />\n    <p>{`Objective-C`}</p>\n    <Tabs query=\"platform=ios-objc&task=context-data\" mdxType=\"Tabs\" />\n    <h3 {...{\n      \"id\": \"lifecycle-on-android\"\n    }}>{`Lifecycle on Android`}</h3>\n    <h4 {...{\n      \"id\": \"start-and-pause-lifecycle-data-collection-from-android-activity\"\n    }}>{`Start and Pause Lifecycle data collection from Android Activity`}</h4>\n    <p>{`To ensure accurate session and crash reporting, the Lifecycle APIs must be implemented in every Activity of the Android Application. Do not start or stop Lifecycle in a Fragment.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Kotlin`}</p>\n    <Tabs query=\"platform=android-kotlin&task=activity-start-pause\" mdxType=\"Tabs\" />\n    <p>{`Java`}</p>\n    <Tabs query=\"platform=android-java&task=activity-start-pause\" mdxType=\"Tabs\" />\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Calling `}<inlineCode parentName=\"p\">{`setApplication(Application)`}</inlineCode>{` is only necessary on activities that are entry points for your application. However, setting the application on each Activity has no negative impact and ensures that the SDK always has the necessary reference to your application. You should call `}<inlineCode parentName=\"p\">{`setApplication(Application)`}</inlineCode>{` in each of your activities.`}</p>\n    <h4 {...{\n      \"id\": \"implementing-global-lifecycle-callbacks\"\n    }}>{`Implementing global lifecycle callbacks`}</h4>\n    <p>{`Starting with API Level 14, Android allows global lifecycle callbacks for activities. For more information, please read the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.android.com/reference/android/app/Application#registerActivityLifecycleCallbacks(android.app.Application.ActivityLifecycleCallbacks)\"\n      }}>{`Android developer guide`}</a>{`.`}</p>\n    <p>{`You can use these callbacks to ensure that all of your activities correctly call the Lifecycle APIs without needing to update each individual Activity class. Add code to register an instance of `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.android.com/reference/android/app/Application.ActivityLifecycleCallbacks\"\n      }}>{`ActivityLifecycleCallbacks`}</a>{` in your Application class, just before `}<a parentName=\"p\" {...{\n        \"href\": \"#register-lifecycle-with-mobile-core\"\n      }}>{`registering your extensions`}</a>{` with MobileCore.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Kotlin`}</p>\n    <Tabs query=\"platform=android-kotlin&task=global-lifecycle\" mdxType=\"Tabs\" />\n    <p>{`Java`}</p>\n    <Tabs query=\"platform=android-java&task=global-lifecycle\" mdxType=\"Tabs\" />\n    <h4 {...{\n      \"id\": \"include-additional-context-data-1\"\n    }}>{`Include additional context data`}</h4>\n    <p>{`To include additional data with lifecycle tracking calls, pass an additional parameter to `}<inlineCode parentName=\"p\">{`lifecycleStart(Map)`}</inlineCode>{` that contains context data:`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Kotlin`}</p>\n    <Tabs query=\"platform=android-kotlin&task=context-data\" mdxType=\"Tabs\" />\n    <p>{`Java`}</p>\n    <Tabs query=\"platform=android-java&task=context-data\" mdxType=\"Tabs\" />\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You only need to add this code in your main Activity and any other Activity in which your app may be launched.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst InlineNestedAlert = makeShortcode(\"InlineNestedAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    {/* ////////////  Add Dependencies ////////// */}\n    <Variant platform=\"android-kotlin\" task=\"add\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`Add the Lifecycle extension and its dependency, the `}<a parentName=\"p\" {...{\n        \"href\": \"/aep-mobile-sdkdocs/src/pages/home/base/mobile-core/index.md\"\n      }}>{`Mobile Core`}</a>{` extension to your project using the app's Gradle file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`implementation(platform(\"com.adobe.marketing.mobile:sdk-bom:3.+\"))\nimplementation(\"com.adobe.marketing.mobile:core\")\nimplementation(\"com.adobe.marketing.mobile:lifecycle\")\n`}</code></pre>\n    <InlineNestedAlert variant=\"warning\" header=\"false\" iconPosition=\"left\" mdxType=\"InlineNestedAlert\">\n      <p>{`Using dynamic dependency versions is `}<strong parentName=\"p\">{`not`}</strong>{` recommended for production apps. Please read the `}<a parentName=\"p\" {...{\n          \"href\": \"/aep-mobile-sdkdocs/src/pages/resources/manage-gradle-dependencies.md\"\n        }}>{`managing Gradle dependencies guide`}</a>{` for more information.`}</p>\n    </InlineNestedAlert>\n    <Variant platform=\"android-groovy\" task=\"add\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`Add the Lifecycle extension and its dependency, the `}<a parentName=\"p\" {...{\n        \"href\": \"/aep-mobile-sdkdocs/src/pages/home/base/mobile-core/index.md\"\n      }}>{`Mobile Core`}</a>{` extension to your project using the app's Gradle file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`implementation platform('com.adobe.marketing.mobile:sdk-bom:3.+')\nimplementation 'com.adobe.marketing.mobile:core'\nimplementation 'com.adobe.marketing.mobile:lifecycle'\n`}</code></pre>\n    <InlineNestedAlert variant=\"warning\" header=\"false\" iconPosition=\"left\" mdxType=\"InlineNestedAlert\">\n      <p>{`Using dynamic dependency versions is `}<strong parentName=\"p\">{`not`}</strong>{` recommended for production apps. Please read the `}<a parentName=\"p\" {...{\n          \"href\": \"/aep-mobile-sdkdocs/src/pages/resources/manage-gradle-dependencies.md\"\n        }}>{`managing Gradle dependencies guide`}</a>{` for more information.`}</p>\n    </InlineNestedAlert>\n    <Variant platform=\"ios-pods\" task=\"add\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`Add the AEPLifecycle extension and its dependency, `}<a parentName=\"p\" {...{\n        \"href\": \"/aep-mobile-sdkdocs/src/pages/home/base/mobile-core/index.md\"\n      }}>{`AEPCore`}</a>{` extension, to your project using CocoaPods.`}</p>\n    <p>{`Add the following pods in your `}<inlineCode parentName=\"p\">{`Podfile`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-pod\"\n      }}>{`pod 'AEPCore', '~> 5.0'\npod 'AEPLifecycle', '~> 5.0'\n`}</code></pre>\n    {/* /////////// Register Extensions ////////// */}\n    <Variant platform=\"android-kotlin\" task=\"register\" repeat=\"4\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"kotlin\"\n    }}>{`Kotlin`}</h4>\n    <p>{`Register the Lifecycle extension in your app's `}<inlineCode parentName=\"p\">{`Application`}</inlineCode>{` class:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`import com.adobe.marketing.mobile.MobileCore\nimport com.adobe.marketing.mobile.Lifecycle\n...\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`class MobileApp : Application() {\n\noverride fun onCreate() {\n    super.onCreate()\n    MobileCore.setApplication(this);\n    val extensions = listOf(Lifecycle.EXTENSION, ...)\n    MobileCore.registerExtensions(extensions) {\n        // Any post registration processing\n    }\n  }\n}\n`}</code></pre>\n    <Variant platform=\"android-java\" task=\"register\" repeat=\"4\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <p>{`Register the Lifecycle extension in your app's `}<inlineCode parentName=\"p\">{`Application`}</inlineCode>{` class:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import com.adobe.marketing.mobile.MobileCore;\nimport com.adobe.marketing.mobile.Lifecycle;\n...\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class MobileApp extends Application {\n@Override\npublic void onCreate() {\n    super.onCreate();\n    MobileCore.setApplication(this);\n    List<Class<? extends Extension>> extensions = Arrays.asList(Lifecycle.EXTENSION, ...);\n    MobileCore.registerExtensions(extensions, o -> {\n        // Any post registration processing\n    });\n  }\n}\n`}</code></pre>\n    <Variant platform=\"ios-swift\" task=\"register\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`Register the Lifecycle extension in the app delegate object's `}<inlineCode parentName=\"p\">{`application(_:didFinishLaunchingWithOptions:)`}</inlineCode>{` method:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import AEPCore\nimport AEPLifecycle\n...\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    MobileCore.registerExtensions([Lifecycle.self, ...], {\n        // Any post registration processing\n    }\n}\n`}</code></pre>\n    <Variant platform=\"ios-objc\" task=\"register\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`Register the Lifecycle extension in the app delegate object's `}<inlineCode parentName=\"p\">{`application:didFinishLaunchingWithOptions:`}</inlineCode>{` method:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`@import AEPCore;\n@import AEPLifecycle;\n...\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n[AEPMobileCore registerExtensions:@[AEPMobileLifecycle.class, ...] completion:^{\n    // Any post registration processing\n}];\nreturn YES;\n}\n`}</code></pre>\n    {/* ////////////  Android Start Pause Lifecycle /////////// */}\n    <Variant platform=\"android-java\" task=\"activity-start-pause\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <p>{`Add the following to each Android Activity class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import com.adobe.marketing.mobile.MobileCore;\nimport com.adobe.marketing.mobile.Lifecycle;\n...\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`    @Override\n    public void onResume() {\n        MobileCore.setApplication(getApplication());\n        MobileCore.lifecycleStart(null);\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`    @Override\n    public void onPause() {\n        MobileCore.lifecyclePause();\n    }\n`}</code></pre>\n    <Variant platform=\"android-kotlin\" task=\"activity-start-pause\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"kotlin-1\"\n    }}>{`Kotlin`}</h4>\n    <p>{`Add the following to each Android Activity class.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`import com.adobe.marketing.mobile.MobileCore\nimport com.adobe.marketing.mobile.Lifecycle\n...\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`    override fun onResume() {\n        MobileCore.setApplication(this.application)\n        MobileCore.lifecycleStart(null)\n    }\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`    override fun onPause() {\n        MobileCore.lifecyclePause()\n    }\n`}</code></pre>\n    {/* ///////////// Additional Context Data ////////// */}\n    <Variant platform=\"android-java\" task=\"context-data\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`HashMap<String, Object> additionalContextData = new HashMap<String, Object>();\ncontextData.put(\"myapp.category\", \"Game\");\nMobileCore.lifecycleStart(additionalContextData);\n`}</code></pre>\n    <Variant platform=\"android-kotlin\" task=\"context-data\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`MobileCore.lifecycleStart(mapOf(\"myapp.category\" to \"Game\"))\n`}</code></pre>\n    <Variant platform=\"ios-swift\" task=\"context-data\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`MobileCore.lifecycleStart(additionalContextData: [\"myapp.category\": \"Game\"])\n`}</code></pre>\n    <Variant platform=\"ios-objc\" task=\"context-data\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`[AEPMobileCore lifecycleStart:@{@\"myapp.category\": @\"Game\"}];      \n`}</code></pre>\n    {/* ///////////  Android Global Lifecycle //////////// */}\n    <Variant platform=\"android-java\" task=\"global-lifecycle\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import com.adobe.marketing.mobile.MobileCore;\nimport com.adobe.marketing.mobile.Lifecycle;\n\npublic class MobileApp extends Application {\n\n@Override\nprotected void onCreate() {\n    super.onCreate();\n\n    registerActivityLifecycleCallbacks(new ActivityLifecycleCallbacks() {\n        @Override\n        public void onActivityResumed(Activity activity) {\n            MobileCore.setApplication(activity.getApplication());\n            MobileCore.lifecycleStart(null);\n        }\n\n        @Override\n        public void onActivityPaused(Activity activity) {\n            MobileCore.lifecyclePause();\n        }\n\n        // the following methods aren't needed for our lifecycle purposes, but are\n        // required to be implemented by the ActivityLifecycleCallbacks object\n        @Override\n        public void onActivityCreated(Activity activity, Bundle savedInstanceState) {}\n        @Override\n        public void onActivityStarted(Activity activity) {}\n        @Override\n        public void onActivityStopped(Activity activity) {}\n        @Override\n        public void onActivitySaveInstanceState(Activity activity, Bundle outState) {}\n        @Override\n        public void onActivityDestroyed(Activity activity) {}\n    });\n\n    ...\n}\n ...\n}\n`}</code></pre>\n    <Variant platform=\"android-kotlin\" task=\"global-lifecycle\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`import com.adobe.marketing.mobile.MobileCore\nimport com.adobe.marketing.mobile.Lifecycle\n\nclass MobileApp : Application() {\n\noverride fun onCreate() {\n    super.onCreate()\n\n    registerActivityLifecycleCallbacks(object: ActivityLifecycleCallbacks {\n        override fun onActivityResumed(activity: Activity) {\n            MobileCore.setApplication(activity.application)\n            MobileCore.lifecycleStart(null)\n        }\n\n        override fun onActivityPaused(activity: Activity) {\n            MobileCore.lifecyclePause()\n        }\n\n        // the following methods aren't needed for our lifecycle purposes, but are\n        // required to be implemented by the ActivityLifecycleCallbacks object\n        override fun onActivityCreated(activity: Activity, savedInstanceState: Bundle?) {}\n        override fun onActivityStarted(activity: Activity) {}\n        override fun onActivityStopped(activity: Activity) {}\n        override fun onActivitySaveInstanceState(activity: Activity, outState: Bundle) {}\n        override fun onActivityDestroyed(activity: Activity) {}\n    })\n\n    ...\n}\n ...\n}\n`}</code></pre>\n    {/* ////////////  iOS Start on Launch /////////// */}\n    <Variant platform=\"ios-swift\" task=\"start-lifecycle-didfinishlaunch\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n    let appState = application.applicationState\n    MobileCore.registerExtensions([Lifecycle.self, ...], {\n        if appState != .background {\n        // only start lifecycle if the application is not in the background\n        MobileCore.lifecycleStart(additionalContextData: nil)\n        }\n    }\n}\n`}</code></pre>\n    <Variant platform=\"ios-objc\" task=\"start-lifecycle-didfinishlaunch\" repeat=\"1\" mdxType=\"Variant\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (BOOL) application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    const UIApplicationState appState = application.applicationState;\n    [AEPMobileCore registerExtensions:@[AEPMobileLifecycle.class, ...] completion:^{\n    // only start lifecycle if the application is not in the background\n    if (appState != UIApplicationStateBackground) {\n        [AEPMobileCore lifecycleStart:nil];\n    }\n    }];\n}\n`}</code></pre>\n    {/* ////////////  iOS Start Pause Lifecycle /////////// */}\n    <Variant platform=\"ios-swift\" task=\"start-pause\" repeat=\"6\" mdxType=\"Variant\" />\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{` as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func sceneWillEnterForeground(_ scene: UIScene) {\n    MobileCore.lifecycleStart(additionalContextData: nil)\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func sceneDidEnterBackground(_ scene: UIScene) {\n    MobileCore.lifecyclePause()\n}\n`}</code></pre>\n    <p>{`In iOS 12 and earlier, use the `}<inlineCode parentName=\"p\">{`UIApplicationDelegate`}</inlineCode>{` as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func applicationWillEnterForeground(_ application: UIApplication) {\n    MobileCore.lifecycleStart(additionalContextData: nil)\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func applicationDidEnterBackground(_ application: UIApplication) {\n    MobileCore.lifecyclePause()\n}\n`}</code></pre>\n    <Variant platform=\"ios-objc\" task=\"start-pause\" repeat=\"6\" mdxType=\"Variant\" />\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{` as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) sceneWillEnterForeground:(UIScene *)scene {\n    [AEPMobileCore lifecycleStart:nil];\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) sceneDidEnterBackground:(UIScene *)scene {\n    [AEPMobileCore lifecyclePause];\n}\n`}</code></pre>\n    <p>{`In iOS 12 and earlier, use the `}<inlineCode parentName=\"p\">{`UIApplicationDelegate`}</inlineCode>{` as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) applicationWillEnterForeground:(UIApplication *)application {\n    [AEPMobileCore lifecycleStart:nil];\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) applicationDidEnterBackground:(UIApplication *)application {\n    [AEPMobileCore lifecyclePause];\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","TabsBlock","InlineAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","orientation","slots","repeat","query","variant","isMDXComponent","Variant","InlineNestedAlert","platform","task","header","iconPosition"],"sourceRoot":""}