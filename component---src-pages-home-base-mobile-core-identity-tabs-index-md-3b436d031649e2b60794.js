"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[4799],{80791:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return d},default:function(){return x}});var a=t(87462),i=t(63366),r=(t(15007),t(64983)),o=t(91515),l=["components"],d={},p=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",n)}},m=p("Variant"),s=p("InlineNestedAlert"),c={_frontmatter:d},u=o.Z;function x(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.mdx)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)(m,{platform:"android",task:"add",repeat:"10",mdxType:"Variant"}),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"Add the ",(0,r.mdx)("inlineCode",{parentName:"li"},"Identity")," library to your project using the app's gradle file.")),(0,r.mdx)("h4",{id:"kotlin"},"Kotlin"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin"},'implementation(platform("com.adobe.marketing.mobile:sdk-bom:3.+"))\nimplementation("com.adobe.marketing.mobile:core")\nimplementation("com.adobe.marketing.mobile:identity")\n')),(0,r.mdx)("h4",{id:"groovy"},"Groovy"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"implementation platform('com.adobe.marketing.mobile:sdk-bom:3.+')\nimplementation 'com.adobe.marketing.mobile:core'\nimplementation 'com.adobe.marketing.mobile:identity'\n")),(0,r.mdx)(s,{variant:"warning",header:"false",iconPosition:"left",mdxType:"InlineNestedAlert"},(0,r.mdx)("p",null,"Using dynamic dependency versions is ",(0,r.mdx)("strong",{parentName:"p"},"not")," recommended for production apps. Please read the ",(0,r.mdx)("a",{parentName:"p",href:"../../resources/manage-gradle-dependencies.md"},"managing Gradle dependencies guide")," for more information.")),(0,r.mdx)("ol",{start:2},(0,r.mdx)("li",{parentName:"ol"},"Import the Identity and MobileCore extensions in your application's main activity.")),(0,r.mdx)("h4",{id:"java"},"Java"),(0,r.mdx)("p",null,"Import the library:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"import com.adobe.marketing.mobile.MobileCore;\nimport com.adobe.marketing.mobile.Identity;\n")),(0,r.mdx)(m,{platform:"ios",task:"add",repeat:"7",mdxType:"Variant"}),(0,r.mdx)("ol",null,(0,r.mdx)("li",{parentName:"ol"},"Add the Mobile Core and Identity extensions to your project using Cocoapods. Add following pods in your ",(0,r.mdx)("inlineCode",{parentName:"li"},"Podfile"),":")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ruby"},"use_frameworks!\ntarget 'YourTargetApp' do\n    pod 'AEPCore', '~> 5.0'\n    pod 'AEPIdentity', '~> 5.0'\nend\n")),(0,r.mdx)("ol",{start:2},(0,r.mdx)("li",{parentName:"ol"},"Import the Identity library.")),(0,r.mdx)("h4",{id:"swift"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"import AEPCore\nimport AEPIdentity\n")),(0,r.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"@import AEPCore;\n@import AEPIdentity;\n")),(0,r.mdx)(m,{platform:"android",task:"register",repeat:"3",mdxType:"Variant"}),(0,r.mdx)("p",null,"After calling the ",(0,r.mdx)("inlineCode",{parentName:"p"},"setApplication()")," method in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"onCreate()")," method, register the Identity extension."),(0,r.mdx)("h4",{id:"java-1"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},"public class MobileApp extends Application {\n@Override\npublic void onCreate() {\nsuper.onCreate();\n     MobileCore.setApplication(this);\n     List<Class<? extends Extension>> extensions = Arrays.asList(Identity.EXTENSION, ...);\n     MobileCore.registerExtensions(extensions, o -> {\n        // Any other post registration processing\n    });\n  }\n}\n")),(0,r.mdx)(m,{platform:"ios",task:"register",repeat:"6",mdxType:"Variant"}),(0,r.mdx)("p",null,"Register the Identity extension in your app's ",(0,r.mdx)("inlineCode",{parentName:"p"},"didFinishLaunchingWithOptions")," function:"),(0,r.mdx)("h4",{id:"swift-1"},"Swift"),(0,r.mdx)("p",null,"When including both Identity and Identity for Edge Network extensions, register the extensions using their full Swift module names, such as ",(0,r.mdx)("inlineCode",{parentName:"p"},"AEPIdentity.Identity.self"),"."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},"func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n     MobileCore.registerExtensions([Identity.self, ...], {\n       ...\n     })\n}\n")),(0,r.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n [AEPMobileCore registerExtensions:@[AEPMobileIdentity.class, ...] completion:^{\n   ...\n }];\n return YES;\n}\n")),(0,r.mdx)(m,{platform:"android",task:"implement",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("h4",{id:"java-2"},"Java"),(0,r.mdx)("p",null,"To append visitor information to the URL that is being used to open the web view, call ",(0,r.mdx)("a",{parentName:"p",href:"#appendtourl-appendvisitorinfoforurl"},"appendVisitorInfoForUrl"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'Identity.appendVisitorInfoForURL("https://example.com", new AdobeCallback<String>() {\n    @Override\n    public void call(String urlWithAdobeVisitorInfo) {\n        //handle the new URL here\n        //For example, open the URL on the device browser\n        //\n        Intent i = new Intent(Intent.ACTION_VIEW);\n        i.setData(Uri.parse(urlWithAdobeVisitorInfo));\n        startActivity(i);\n    }\n});\n')),(0,r.mdx)("p",null,"Alternately, starting in SDK version 1.4.0 (Identity version 1.1.0), you can call ",(0,r.mdx)("a",{parentName:"p",href:"#geturlvariables"},"getUrlVariables")," and build your own URL:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'Identity.getUrlVariables(new AdobeCallback<String>() {\n    @Override\n    public void call(String stringWithAdobeVisitorInfo) {\n        //handle the URL query parameter string here\n        //For example, open the URL on the device browser\n        //\n        Intent i = new Intent(Intent.ACTION_VIEW);\n        i.setData(Uri.parse("https://example.com?" + urlWithAdobeVisitorInfo));\n        startActivity(i);\n    }\n});\n')),(0,r.mdx)(m,{platform:"ios",task:"implement",repeat:"10",mdxType:"Variant"}),(0,r.mdx)("p",null,"To append visitor information to the URL that is being used to open the web view, call ",(0,r.mdx)("a",{parentName:"p",href:"./api-reference.md#appendtourl-appendvisitorinfoforurl"},"appendToUrl"),":"),(0,r.mdx)("h4",{id:"swift-2"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'let url = URL(string: "https://example.com")\nIdentity.appendTo(url: url) { appendedUrl, error in\n    if error != nil {\n        // handle error here\n    } else {\n        // handle appended url here\n    }\n}\n')),(0,r.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSURL *sampleUrl = [NSURL URLWithString:@"https://example.com"];\n[AEPMobileIdentity appendToUrl:sampleUrl completion:^(NSURL * _Nullable appendedUrl, NSError *error) {\n    if (error != nil) {\n        // Handle error here\n    } else {\n        // Handle appended url here\n    }\n}];\n')),(0,r.mdx)("p",null,"Alternately, you can call ",(0,r.mdx)("a",{parentName:"p",href:"api-reference.md#geturlvariables"},"getUrlVariables")," and build your own URL:"),(0,r.mdx)("h4",{id:"swift-3"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'Identity.getUrlVariables { urlVariables, error in\n    if error != nil {\n        // handle error here\n    } else {\n        if let url = URL(string: "https://example.com?\\(urlVariables ?? "")") {\n            DispatchQueue.main.async {\n                UIApplication.shared.open(url)\n            }\n        }\n    }\n}\n')),(0,r.mdx)("h4",{id:"objective-c-3"},"Objective-C"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[AEPMobileIdentity getUrlVariables:^(NSString * _Nullable urlVariables, NSError *error) {\n    NSString *sampleURLString = @"https://example.com";\n    if (error != nil) {\n        // Handle variables being nil\n    } else {\n        NSString *stringWithData = [NSString stringWithFormat:@"%@?%@", sampleURLString, urlVariables];\n        NSURL *appendedUrl = [NSURL URLWithString:stringWithData];\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [[UIApplication sharedApplication] openURL:appendedUrl options:@{} completionHandler:nil];\n        });\n    }\n}];\n')))}x.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-home-base-mobile-core-identity-tabs-index-md-3b436d031649e2b60794.js.map