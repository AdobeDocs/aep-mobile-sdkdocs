"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[6392],{91140:function(a,e,t){t.r(e),t.d(e,{_frontmatter:function(){return c},default:function(){return u}});var n,r=t(87462),i=t(63366),d=(t(15007),t(64983)),o=t(91515),l=t(47968),m=["components"],c={},p=(n="Variant",function(a){return console.warn("Component "+n+" was not imported, exported, or provided by MDXProvider as global scope"),(0,d.mdx)("div",a)}),s={_frontmatter:c},x=o.Z;function u(a){var e=a.components,t=(0,i.Z)(a,m);return(0,d.mdx)(x,(0,r.Z)({},s,t,{components:e,mdxType:"MDXLayout"}),(0,d.mdx)(p,{platform:"android-kotlin",task:"add",repeat:"3",mdxType:"Variant"}),(0,d.mdx)("p",null,"Add the required dependencies to your project by including them in the app's Gradle file."),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-kotlin"},'implementation(platform("com.adobe.marketing.mobile:sdk-bom:3.+"))\nimplementation("com.adobe.marketing.mobile:core")\nimplementation("com.adobe.marketing.mobile:identity")\nimplementation("com.adobe.marketing.mobile:analytics")\n')),(0,d.mdx)(l.default,{query:"platform=android-gradle&componentClass=InlineNestedAlert",mdxType:"Alerts"}),(0,d.mdx)(p,{platform:"android-groovy",task:"add",repeat:"3",mdxType:"Variant"}),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},"implementation platform('com.adobe.marketing.mobile:sdk-bom:3.+')\nimplementation 'com.adobe.marketing.mobile:core'\nimplementation 'com.adobe.marketing.mobile:identity'\nimplementation 'com.adobe.marketing.mobile:analytics'\n")),(0,d.mdx)(l.default,{query:"platform=android-gradle&componentClass=InlineNestedAlert",mdxType:"Alerts"}),"now works",(0,d.mdx)(p,{platform:"ios-pods",task:"add",repeat:"2",mdxType:"Variant"}),(0,d.mdx)("p",null,"Add the required dependencies to your project using CocoaPods. Add following pods in your ",(0,d.mdx)("inlineCode",{parentName:"p"},"Podfile"),":"),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},"use_frameworks!\n\ntarget 'YourTargetApp' do\n    pod 'AEPCore', '~> 5.0'\n    pod 'AEPAnalytics', '~> 5.0'\n    pod 'AEPIdentity', '~> 5.0'\nend\n")),(0,d.mdx)(p,{platform:"android",task:"serialize",repeat:"8",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"java"},"Java"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},'cdata.put("&&events", "event1:12341234");\n')),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},'//create a context data dictionary\nHashMap cdata = new HashMap<String, Object>();\n\n// add events\ncdata.put("&&events", "event1:12341234");\n\n// send a tracking call - use either a trackAction or TrackState call.\n// trackAction example:\nMobileCore.trackAction("Action Name", cdata);\n// trackState example:\nMobileCore.trackState("State Name", cdata);\n')),(0,d.mdx)("h4",{id:"kotlin"},"Kotlin"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-kotlin"},'//create a context data dictionary\nval cdata: Map<String, Any?> = mapOf(\n    "&&events" to "event1:12341234"\n)\n\n// send a tracking call - use either a trackAction or TrackState call.\n// trackAction example:\nMobileCore.trackAction("Action Name", cdata);\n// trackState example:\nMobileCore.trackState("State Name", cdata);\n')),(0,d.mdx)(p,{platform:"ios",task:"serialize",repeat:"10",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"swift"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},'contextdata["&&events"] = "event1:12341234"\n')),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},'//create a context data dictionary\nvar contextData = [String: Any]()\n\n// add events\ncontextData["&&events"] = "event1:12341234"\n\n// send the tracking call - use either a trackAction or trackState call.\n// trackAction example:\nMobileCore.track(action: "Action Name" as String, data: contextData)\n\n// trackState example:\nMobileCore.track(state: "State Name" as String, data: contextData)\n')),(0,d.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Syntax")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[contextData setObject:@"eventN:serial number" forKey:@"&&events"];\n')),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},'//create a context data dictionary\nNSMutableDictionary *contextData = [NSMutableDictionary dictionary];\n\n// add events\n[contextData setObject:@"event1:12341234" forKey:@"&&events"];\n\n// send the tracking call - use either a trackAction or trackState call.\n// trackAction example:\n[AEPMobileCore trackAction:@"Action Name" data:contextData];\n// trackState example:\n[AEPMobileCore trackState:@"State Name" data:contextData];\n')),(0,d.mdx)(p,{platform:"android",task:"update",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"java-1"},"Java"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-java"},'HashMap<String, Object> data = new HashMap<String, Object>();\ndata.put("analytics.server", "sample.analytics.tracking.server");\ndata.put("analytics.rsids", "rsid1,rsid2");\ndata.put("analytics.batchLimit", 10);\ndata.put("analytics.offlineEnabled", true);\n\nMobileCore.updateConfiguration(data);\n')),(0,d.mdx)("h4",{id:"kotlin-1"},"Kotlin"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-kotlin"},'val data: Map<String, Any?> = mapOf(\n    "analytics.server" to "sample.analytics.tracking.server",\n    "analytics.rsids" to "rsid1,rsid2",\n    "analytics.batchLimit" to 10,\n    "analytics.offlineEnabled" to true\n)\n\nMobileCore.updateConfiguration(data)\n')),(0,d.mdx)(p,{platform:"ios",task:"update",repeat:"6",mdxType:"Variant"}),(0,d.mdx)("h4",{id:"swift-1"},"Swift"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-swift"},'let updatedConfig = ["analytics.server":"sample.analytics.tracking.server",\n                     "analytics.rsids":"rsid1,rsid2",\n                     "analytics.batchLimit":10,\n                     "analytics.offlineEnabled":true] as [String: Any]\nMobileCore.updateConfigurationWith(configDict: updatedConfig)\n')),(0,d.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,d.mdx)("p",null,(0,d.mdx)("strong",{parentName:"p"},"Example")),(0,d.mdx)("pre",null,(0,d.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSDictionary *updatedConfig = @{@"analytics.server":@"sample.analytics.tracking.server",\n                                @"analytics.rsids":@"rsid1,rsid2",\n                                @"analytics.batchLimit":@(10),\n                                @"analytics.offlineEnabled":@YES};\n[AEPMobileCore updateConfiguration:updatedConfig];\n')))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-solution-adobe-analytics-tabs-index-md-b108a7d61416b93db63f.js.map