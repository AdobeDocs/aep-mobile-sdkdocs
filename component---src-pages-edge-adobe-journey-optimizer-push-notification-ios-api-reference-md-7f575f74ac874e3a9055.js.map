{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-push-notification-ios-api-reference-md-7f575f74ac874e3a9055.js","mappings":"mTAMaA,EAAe,CAAC,EACvBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EAClB,CAAC,EACKG,EAAYL,EAAc,aAC1BM,EAAcN,EAAc,eAC5BO,EAAc,CAClBR,aAAAA,GAEIS,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGT,GAAK,YAER,OAAO,SAACM,GAAS,UAAKD,EAAiBL,EAAK,CAAES,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,qCAAmC,sCAE3C,uJACA,eACE,GAAM,kBAAgB,mBAExB,mBAAG,cAAGC,WAAW,IACb,KAAQ,oDAAkD,iDACJ,kBAC1D,eACE,GAAM,uBAAqB,wBAE7B,sEAAuD,cAAGA,WAAW,IACjE,KAAQ,8FAA4F,0DACrC,yCAAyC,uBAAYA,WAAW,KAAG,qEAAmF,mBAAmB,uBAAYA,WAAW,KAAG,eAA6B,gFACnS,SAACR,EAAS,CAACS,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,qBAAqBJ,QAAQ,eACnF,eACE,GAAM,SAAO,UAEf,qBAAK,iBAAMC,WAAW,MAClB,UAAa,kBAAgB,8KAKjC,eACE,GAAM,eAAa,gBAErB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,wLAKhC,eACE,GAAM,wCAAsC,yCAE9C,0BAAW,cAAGA,WAAW,IACrB,KAAQ,sDACP,uBAAYA,WAAW,KAAG,+BAAgD,kFAC/E,8BAAe,cAAGA,WAAW,IACzB,KAAQ,gGAA8F,oCAC7D,4KAA4K,cAAGA,WAAW,IACnO,KAAQ,+HAA6H,+DACjE,aACxE,SAACR,EAAS,CAACS,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,qBAAqBJ,QAAQ,eACnF,eACE,GAAM,WAAS,UAEjB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,kBAAgB,4uBAoBjC,eACE,GAAM,iBAAe,gBAEvB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,ouBAkBhC,SAACP,EAAW,CAACW,QAAQ,OAAOH,MAAM,OAAOF,QAAQ,iBACjD,8IACA,eACE,GAAM,gCAA8B,iCAEtC,gDAAiC,uBAAYC,WAAW,KAAG,8BAA4C,iBAAiB,cAAGA,WAAW,IAClI,KAAQ,mCAAiC,sBACd,iEAC/B,SAACR,EAAS,CAACS,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,qBAAqBJ,QAAQ,eACnF,eACE,GAAM,WAAS,UAEjB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,kBAAgB,mIAKjC,eACE,GAAM,iBAAe,gBAEvB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,oQASpC,CAEAH,EAAWQ,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/push-notification/ios/api-reference.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"push-notification---api-reference\"\n    }}>{`Push Notification - API reference`}</h1>\n    <p>{`This document details how to use the APIs provided by the AEPMessaging framework for tracking and displaying push notifications.`}</p>\n    <h2 {...{\n      \"id\": \"pre-requisites\"\n    }}>{`Pre-requisites`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"../../index.md#implement-extension-in-mobile-app\"\n      }}>{`Integrate and register AEPMessaging extension`}</a>{` in your app.`}</p>\n    <h2 {...{\n      \"id\": \"sync-the-push-token\"\n    }}>{`Sync the push token`}</h2>\n    <p>{`To retrieve the push token in iOS, refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/usernotifications/registering_your_app_with_apns\"\n      }}>{`Apple documentation for registering your app with APNs`}</a>{`. Then add the following code to the `}<inlineCode parentName=\"p\">{`application(_: didRegisterForRemoteNotificationsWithDeviceToken:)`}</inlineCode>{` method in the `}<inlineCode parentName=\"p\">{`AppDelegate`}</inlineCode>{` to sync the device's push token with profile in Adobe Experience Platform.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"Swift, Objective-C\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    MobileCore.setPushIdentifier(deviceToken)\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n    [AEPMobileCore setPushIdentifier:deviceToken];\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"track-push-notification-interactions\"\n    }}>{`Track push notification interactions`}</h2>\n    <p>{`Use `}<a parentName=\"p\" {...{\n        \"href\": \"./../../api-reference/#handlenotificationresponse\"\n      }}><inlineCode parentName=\"a\">{`handleNotificationResponse`}</inlineCode></a>{` API to send push notification interaction data to Adobe Experience Platform.`}</p>\n    <p>{`In iOS, `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/usernotifications/unusernotificationcenterdelegate\"\n      }}>{`UNUserNotificationCenterDelegate`}</a>{` is the interface for processing incoming notifications and responding to notification actions. Once the delegate is implemented, handle push notification responses in `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/usernotifications/unusernotificationcenterdelegate/1649501-usernotificationcenter\"\n      }}>{`userNotificationCenter(_:didReceive:withCompletionHandler:)`}</a>{` method.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"Swift, Objective-C\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func userNotificationCenter(_: UNUserNotificationCenter,\n                            didReceive response: UNNotificationResponse,\n                            withCompletionHandler completionHandler: @escaping () -> Void) {\n\n    Messaging.handleNotificationResponse(response, urlHandler: { url in\n        /// return \\`true\\` if the app is handling the url or \\`false\\` if the Adobe SDK should handle it\n        let appHandlesUrl = false\n        return appHandlesUrl\n    }, closure: { pushTrackingStatus in\n        if pushTrackingStatus == .trackingInitiated {\n            // tracking was successful\n        } else {\n            // tracking failed, view the status for more information\n        }\n    })\n\n    completionHandler()\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-1\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`- (void) userNotificationCenter:(UNUserNotificationCenter *) center\n didReceiveNotificationResponse:(UNNotificationResponse *) response\n         withCompletionHandler:(void (^)(void)) completionHandler {\n\n    [AEPMobileMessaging handleNotificationResponse:response urlHandler: ^(NSURL *url) {\n        /// return \\`true\\` if the app is handling the url or \\`false\\` if the Adobe SDK should handle it\n        bool appHandlesUrl = false;\n        return appHandlesUrl;\n    } closure:^(AEPPushTrackingStatus status) {\n        if (status == AEPPushTrackingStatusTrackingInitiated) {\n            // tracking was successful\n        } else {\n            // tracking failed, view the status for more information\n        }\n    }];\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`This API method will automatically handle click behaviour defined for the push notification in Adobe Journey Optimizer.`}</p>\n    <h4 {...{\n      \"id\": \"reading-push-tracking-status\"\n    }}>{`Reading push tracking status`}</h4>\n    <p>{`Implement the callback in `}<inlineCode parentName=\"p\">{`handleNotificationResponse`}</inlineCode>{` API to read `}<a parentName=\"p\" {...{\n        \"href\": \"../enum-push-tracking-status.md\"\n      }}>{`PushTrackingStatus`}</a>{` enum representing tracking status of the push notification.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"2\" languages=\"Swift, Objective-C\" mdxType=\"CodeBlock\" />\n    <h4 {...{\n      \"id\": \"swift-2\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`Messaging.handleNotificationResponse(response) { trackingStatus in\n    // handle the different values of trackingStatus\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-2\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`[AEPMobileMessaging handleNotificationResponse:response urlHandler:nil closure:^(AEPPushTrackingStatus status) {\n    if (status == AEPPushTrackingStatusTrackingInitiated) {\n        NSLog(@\"Successfully started push notification tracking\");\n    }\n}];\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","CodeBlock","InlineAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","slots","repeat","languages","variant","isMDXComponent"],"sourceRoot":""}