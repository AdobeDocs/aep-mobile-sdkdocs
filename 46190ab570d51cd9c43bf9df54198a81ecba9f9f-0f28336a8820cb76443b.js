"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[5688],{61989:function(e,a,t){t.r(a),t.d(a,{_frontmatter:function(){return s},default:function(){return x}});var r,n=t(87462),i=t(63366),m=(t(15007),t(64983)),l=t(91515),p=["components"],s={},d=(r="Variant",function(e){return console.warn("Component "+r+" was not imported, exported, or provided by MDXProvider as global scope"),(0,m.mdx)("div",e)}),o={_frontmatter:s},u=l.Z;function x(e){var a=e.components,t=(0,i.Z)(e,p);return(0,m.mdx)(u,(0,n.Z)({},o,t,{components:a,mdxType:"MDXLayout"}),(0,m.mdx)(d,{platform:"android",api:"extension-version",repeat:"5",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"java"},"Java"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-java"},"public static String extensionVersion()\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-java"},"String extensionVersion = UserProfile.extensionVersion();\n")),(0,m.mdx)(d,{platform:"ios-aep",api:"extension-version",repeat:"10",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"swift"},"Swift"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},"static var extensionVersion: String\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},"let extensionVersion = UserProfile.extensionVersion\n")),(0,m.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (nonnull NSString*) extensionVersion;\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},"NSString *extensionVersion = [AEPMobileUserProfile extensionVersion];\n")),(0,m.mdx)(d,{platform:"ios-acp",api:"extension-version",repeat:"10",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"swift-1"},"Swift"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},"static var extensionVersion: String\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},"let extensionVersion  = ACPUserProfile.extensionVersion()\n")),(0,m.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (nonnull NSString*) extensionVersion;\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},"NSString *extensionVersion = [ACPUserProfile extensionVersion];\n")),(0,m.mdx)(d,{platform:"react-native",api:"extension-version",repeat:"2",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"javascript"},"JavaScript"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPUserProfile.extensionVersion().then(extensionVersion => console.log("AdobeExperienceSDK: ACPUserProfile version: " + extensionVersion));\n')),(0,m.mdx)(d,{platform:"flutter",api:"extension-version",repeat:"2",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"dart"},"Dart"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-dart"},"String extensionVersion = await FlutterACPUserProfile.extensionVersion;\n")),(0,m.mdx)(d,{platform:"cordova",api:"extension-version",repeat:"2",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"cordova"},"Cordova"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-jsx"},'ACPUserProfile.extensionVersion(function(version) {  \n   console.log("ACPUserProfile version: " + version);\n}, function(error) {  \n   console.log(error);  \n});\n')),(0,m.mdx)(d,{platform:"unity",api:"extension-version",repeat:"2",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"c"},"C#"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},"string extensionVersion = ACPUserProfile.ExtensionVersion();\n")),(0,m.mdx)(d,{platform:"xamarin",api:"extension-version",repeat:"2",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"c-1"},"C#"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},"string extensionVersion = ACPUserProfile.ExtensionVersion();\n")),(0,m.mdx)(d,{platform:"android",api:"get-user-attributes",repeat:"8",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"java-1"},"Java"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-java"},"public static void getUserAttributes(List<String> keys, AdobeCallback<Map<String, Object>> callback)\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"callback")," is invoked after the customer attributes are available.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"A retail application wants to get the ",(0,m.mdx)("inlineCode",{parentName:"p"},"itemsAddedToCart")," user data when processing checkout."),(0,m.mdx)("p",null,"When ",(0,m.mdx)("inlineCode",{parentName:"p"},"AdobeCallbackWithError")," is provided, if the operation times out (5s) or an unexpected error occurs, the ",(0,m.mdx)("inlineCode",{parentName:"p"},"fail")," method is called with the appropriate ",(0,m.mdx)("inlineCode",{parentName:"p"},"AdobeError"),"."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-java"},'UserProfile.getUserAttributes(Arrays.asList("itemsAddedToCart"), new AdobeCallbackWithError<Map<String, Object>>() {\n            @Override\n            public void fail(AdobeError adobeError) {\n                // your customized code\n            }\n            @Override\n            public void call(Map<String, Object> stringObjectMap) {\n                     // your customized code\n            }\n        });\n')),(0,m.mdx)(d,{platform:"ios-aep",api:"get-user-attributes",repeat:"13",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"swift-2"},"Swift"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},"static func getUserAttributes(attributeNames: [String], completion: @escaping ([String: Any]?, AEPError) -> Void)\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"completion")," is the callback ",(0,m.mdx)("inlineCode",{parentName:"li"},"function")," which will be called with user attributes.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"A retail application wants to get the ",(0,m.mdx)("inlineCode",{parentName:"p"},"itemsAddedToCart")," user data when processing checkout."),(0,m.mdx)("p",null,"When the callback is provided, if the operation times out (5s) or an unexpected error occurs, the ",(0,m.mdx)("inlineCode",{parentName:"p"},"completion")," method is called with the appropriate ",(0,m.mdx)("inlineCode",{parentName:"p"},"AEPError"),"."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},'UserProfile.getUserAttributes(attributeNames: ["itemsAddedToCart"]) { attributes, error in\n// your customized code\n}\n')),(0,m.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void)getUserAttributesWithAttributeNames:(NSArray<NSString *> * _Nonnull) comletion:^(NSDictionary<NSString *,id> * _Nullable, enum AEPError)\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSArray *attributes = @[@"itemsAddedToCart"];\n[AEPMobileUserProfile getUserAttributesWithAttributeNames:attributes completion:^(NSDictionary<NSString *,id> * _Nullable, enum AEPError) {\n        // your customized code\n}];\n')),(0,m.mdx)(d,{platform:"ios-acp",api:"get-user-attributes",repeat:"12",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"swift-3"},"Swift"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},"static func getUserAttributes(_ attributeNames: [String]?, withCompletionHandler completionHandler:([AnyHashable : Any]?, Error?) -> Void)\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"completionHandler")," is invoked after the customer attributes are available, or ",(0,m.mdx)("em",{parentName:"li"},"error")," if an unexpected error occurs or the request times out. The default timeout is 5s.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"A retail application wants to get the ",(0,m.mdx)("inlineCode",{parentName:"p"},"itemsAddedToCart")," user data when processing checkout."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},'ACPUserProfile.getUserAttributes(["itemsAddedToCart"], withCompletionHandler: {(dict: [AnyHashable: Any]?, error: Error?) -> Void in\n              // your customized code\n})\n')),(0,m.mdx)("h4",{id:"objective-c-3"},"Objective-C"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) getUserAttributes: (nullable NSArray <NSString*>*) attributNames withCompletionHandler: (nonnull void (^) (NSDictionary* __nullable userAttributes, NSError* _Nullable error)) completionHandler\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},"[ACPUserProfile getUserAttributes:attributes withCompletionHandler:^(NSDictionary* dict, NSError* error){\n    // your customized code\n    }];\n")),(0,m.mdx)(d,{platform:"flutter",api:"get-user-attributes",repeat:"7",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"dart-1"},"Dart"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-dart"},"static Future<String> getUserAttributes(List<String> attributeKeys) async\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeKeys")," is an array of strings containing the names of user profile attributes to retrieve.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"A retail application wants to get the ",(0,m.mdx)("inlineCode",{parentName:"p"},"itemsAddedToCart")," user data when processing checkout."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-dart"},'try {\n  result = await FlutterACPUserProfile.getUserAttributes(["itemsAddedToCart"]);\n} on PlatformException {\n  log("Failed to get the user attributes");\n}\n')),(0,m.mdx)(d,{platform:"cordova",api:"get-user-attributes",repeat:"7",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"cordova-1"},"Cordova"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-javascript"},"ACPUserProfile.getUserAttributes = function(attributeNames, success, fail);\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeNames")," is an array of strings containing the names of user profile attributes to retrieve."),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"success")," is a callback containing the retrieved user profile attributes."),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"fail")," is a callback containing error information if the getUserAttributes API was executed with errors.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"A retail application wants to get the ",(0,m.mdx)("inlineCode",{parentName:"p"},"itemsAddedToCart")," user data when processing checkout."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-javascript"},'var attributeNames = new Array();\nattributeNames.push("itemsAddedToCart");\nACPUserProfile.getUserAttributes(attributeNames, handleCallback, handleError);\n')),(0,m.mdx)(d,{platform:"xamarin",api:"get-user-attributes",repeat:"13",mdxType:"Variant"}),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Android")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void GetUserAttributes (IList<string> keys, IAdobeCallback callback);\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"keys")," is an IList containing the names of user profile attributes to retrieve.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"iOS")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void GetUserAttributes (string[] attributNames, [BlockProxy (typeof(ObjCRuntime.Trampolines.NIDActionArity2V0))] Action<NSDictionary, NSError> completionHandler);\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributNames")," is an array of strings containing the names of user profile attributes to remove.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"A retail application wants to get the ",(0,m.mdx)("inlineCode",{parentName:"p"},"itemsAddedToCart")," user data when processing checkout."),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Android")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},'var keysToRetrieve = new List<string>();\nkeysToRetrieve.Add("itemsAddedToCart");\nACPUserProfile.GetUserAttributes(keysToRetrieve, new AdobeCallback());\n\nclass AdobeCallback : Java.Lang.Object, IAdobeCallbackWithError\n{\n  public void Fail(AdobeError error)\n  {\n    Console.WriteLine("GetUserAttributes error: " + error.ToString());\n  }\n\n  public void Call(Java.Lang.Object retrievedAttributes)\n  {\n    if (retrievedAttributes != null)\n    {\n      var attributesDictionary = new Android.Runtime.JavaDictionary<string, object>(retrievedAttributes.Handle, Android.Runtime.JniHandleOwnership.DoNotRegister);\n      foreach (KeyValuePair<string, object> pair in attributesDictionary)\n      {\n        Console.WriteLine("[ " + pair.Key + " : " + pair.Value + " ]");\n      }\n    }\n    else\n    {\n      Console.WriteLine("GetUserAttributes callback is null.");\n    }\n  }\n}\n')),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"iOS")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},'var callback = new Action<NSDictionary, NSError>(handleCallback);\nvar keysToRetrieve = new string[] { "itemsAddedToCart" };\nACPUserProfile.GetUserAttributes(keysToRetrieve, callback);\n\nprivate void handleCallback(NSDictionary content, NSError error)\n{\n  if (error != null)\n  {\n    Console.WriteLine("GetUserAttributes error: " + error.DebugDescription);\n  }\n  else if (content == null)\n  {\n    Console.WriteLine("GetUserAttributes callback is null.");\n  }\n  else\n  {\n    var attributesDictionary = (NSDictionary)content;\n    foreach (KeyValuePair<NSObject, NSObject> pair in attributesDictionary)\n    {\n      Console.WriteLine("[ " + pair.Key + " : " + pair.Value + " ]");\n    }\n  }\n}\n')),(0,m.mdx)(d,{platform:"android",api:"register-extension",repeat:"5",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"java-2"},"Java"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-java"},"public static void registerExtension()\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-java"},"import com.adobe.marketing.mobile.UserProfile\n\n...\n\nUserProfile.registerExtension();\n")),(0,m.mdx)(d,{platform:"ios-aep",api:"register-extension",repeat:"11",mdxType:"Variant"}),(0,m.mdx)("p",null,"On iOS, the registration occurs by passing UserProfile extension to the ",(0,m.mdx)("a",{parentName:"p",href:"../mobile-core/api-reference.md#registerextension-s"},"MobileCore.registerExtensions API"),"."),(0,m.mdx)("h4",{id:"swift-4"},"Swift"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},"static func registerExtensions(_ extensions: [NSObject.Type], \n                               _ completion: (() -> Void)? = nil)\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},"import AEPUserProfile\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n  \n  MobileCore.registerExtensions([UserProfile.self])\n  // Override point for customization after application launch.\n  return true;\n}\n")),(0,m.mdx)("h4",{id:"objective-c-4"},"Objective-C"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) registerExtensions: (NSArray<Class*>* _Nonnull) extensions \n                 completion: (void (^ _Nullable)(void)) completion;\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},"@import AEPUserProfile;\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  \n  [AEPMobileCore registerExtensions:@[AEPMobileUserProfile.class] completion:nil];\n  // Override point for customization after application launch.\n  return YES;\n}\n")),(0,m.mdx)(d,{platform:"ios-acp",api:"register-extension",repeat:"11",mdxType:"Variant"}),(0,m.mdx)("p",null,"Register the Identity extension in your app's ",(0,m.mdx)("inlineCode",{parentName:"p"},"didFinishLaunchingWithOptions")," function:"),(0,m.mdx)("h4",{id:"swift-5"},"Swift"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},"static func registerExtensions()\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},"\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n  ACPUserProfile.registerExtension()\n  // Override point for customization after application launch.\n  return true;\n}\n")),(0,m.mdx)("h4",{id:"objective-c-5"},"Objective-C"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) registerExtension;\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  [ACPUserProfile registerExtension];\n  // Override point for customization after application launch.\n  return YES;\n}\n")),(0,m.mdx)(d,{platform:"android",api:"remove-user-attribute",repeat:"6",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"java-3"},"Java"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-java"},"public static void removeUserAttribute(String attributeName)\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"A retail application wants to remove the ",(0,m.mdx)("inlineCode",{parentName:"p"},"itemsAddedToCart")," user data after the product is purchased."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-java"},'UserProfile.removeUserAttribute("itemsAddedToCart");\n')),(0,m.mdx)(d,{platform:"ios-acp",api:"remove-user-attribute",repeat:"11",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"swift-6"},"Swift"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},"static func removeUserAttribute(_ attributeName: String)\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"A retail application wants to remove the ",(0,m.mdx)("inlineCode",{parentName:"p"},"itemsAddedToCart")," user data after the product is purchased."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},'ACPUserProfile.removeUserAttribute("itemsAddedToCart");\n')),(0,m.mdx)("h4",{id:"objective-c-6"},"Objective-C"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) removeUserAttribute: (nonnull NSString*) key\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[ACPUserProfile removeUserAttribute:@"itemsAddedToCart"];\n')),(0,m.mdx)(d,{platform:"flutter",api:"remove-user-attribute",repeat:"7",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"dart-2"},"Dart"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-dart"},"static Future<void> removeUserAttribute(String attributeName) async\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeName")," is a string containing the name of the user profile attribute to remove.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"A retail application wants to remove the ",(0,m.mdx)("inlineCode",{parentName:"p"},"itemsAddedToCart")," user data after the product is purchased."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-dart"},'FlutterACPUserProfile.removeUserAttribute("itemsAddedToCart");\n')),(0,m.mdx)(d,{platform:"cordova",api:"remove-user-attribute",repeat:"7",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"cordova-2"},"Cordova"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-javascript"},"ACPUserProfile.removeUserAttribute = function(attributeName, success, fail);\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeName")," is a string containing the name of the user profile attribute to remove."),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"success")," is a callback containing a general success message if the removeUserAttribute API executed without any errors."),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"fail")," is a callback containing error information if the removeUserAttribute API was executed with errors.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"A retail application wants to remove the ",(0,m.mdx)("inlineCode",{parentName:"p"},"itemsAddedToCart")," user data after the product is purchased."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-javascript"},'ACPUserProfile.removeUserAttribute("itemsAddedToCart", handleCallback, handleError);\n')),(0,m.mdx)(d,{platform:"xamarin",api:"remove-user-attribute",repeat:"11",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"c-2"},"C#"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Android")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void RemoveUserAttribute (string attributeName);\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeName")," is a string containing the name of the user profile attribute to remove.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"iOS")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void RemoveUserAttribute (string attributeName);\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeName")," is a string containing the name of the user profile attribute to remove.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"A retail application wants to remove the ",(0,m.mdx)("inlineCode",{parentName:"p"},"itemsAddedToCart")," user data after the product is purchased."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPUserProfile.RemoveUserAttribute("itemsAddedToCart");\n')),(0,m.mdx)(d,{platform:"android",api:"remove-user-attributes",repeat:"6",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"java-4"},"Java"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-java"},"public static void removeUserAttributes(List<String> attributeNames)\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"You want to remove ",(0,m.mdx)("inlineCode",{parentName:"p"},"username"),", ",(0,m.mdx)("inlineCode",{parentName:"p"},"usertype")," user data when session timeout occurs."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-java"},'UserProfile.removeUserAttributes(Arrays.asList("username", "usertype"));\n')),(0,m.mdx)(d,{platform:"ios-aep",api:"remove-user-attributes",repeat:"11",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"swift-7"},"Swift"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},"public static void removeUserAttributes(List<String> attributeNames)\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"You want to remove ",(0,m.mdx)("inlineCode",{parentName:"p"},"username"),", ",(0,m.mdx)("inlineCode",{parentName:"p"},"usertype")," user data when session timeout occurs."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},'UserProfile.removeUserAttributes(Arrays.asList("username", "usertype"));\n')),(0,m.mdx)("h4",{id:"objective-c-7"},"Objective-C"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) removeUserAttributesWithAttributeNames:(NSArray<NSString *> * _Nonnull)\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[AEPMobileUserProfile removeUserAttributesWithAttributeNames:@[@"username", @"usertype"]]\n')),(0,m.mdx)(d,{platform:"ios-acp",api:"remove-user-attributes",repeat:"11",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"swift-8"},"Swift"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},"static func removeUserAttributes(_ attributeNames: [String]?)\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"You want to remove ",(0,m.mdx)("inlineCode",{parentName:"p"},"username"),", ",(0,m.mdx)("inlineCode",{parentName:"p"},"usertype")," user data when session timeout occurs."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},'ACPUserProfile.removeUserAttributes(["username","usertype"]);\n')),(0,m.mdx)("h4",{id:"objective-c-8"},"Objective-C"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) removeUserAttributes: (nonnull NSArray <NSString*>*) attributeNames\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[ACPUserProfile removeUserAttributes:@[@"username", @"usertype"]]\n')),(0,m.mdx)(d,{platform:"flutter",api:"remove-user-attributes",repeat:"7",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"dart-3"},"Dart"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-dart"},"static Future<void> removeUserAttributes(List<String> attributeName) async\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeName")," is an array of strings containing the names of user profile attributes to remove.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"You want to remove ",(0,m.mdx)("inlineCode",{parentName:"p"},"username"),", ",(0,m.mdx)("inlineCode",{parentName:"p"},"usertype")," user data when session timeout occurs."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-dart"},'FlutterACPUserProfile.removeUserAttributes(["username", "usertype"])\n')),(0,m.mdx)(d,{platform:"cordova",api:"remove-user-attributes",repeat:"7",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"cordova-3"},"Cordova"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-javascript"},"ACPUserProfile.removeUserAttributes = function(attributeNames, success, fail);\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeNames")," is an array of strings containing the names of user profile attributes to remove."),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"success")," is a callback containing a general success message if the removeUserAttributes API executed without any errors."),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"fail")," is a callback containing error information if the removeUserAttributes API was executed with errors.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"You want to remove ",(0,m.mdx)("inlineCode",{parentName:"p"},"username"),", ",(0,m.mdx)("inlineCode",{parentName:"p"},"usertype")," user data when session timeout occurs."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-javascript"},'var attributeNames = new Array();\nattributeNames.push("username");\nattributeNames.push("usertype");\nACPUserProfile.removeUserAttributes(attributeNames, handleCallback, handleError);\n')),(0,m.mdx)(d,{platform:"xamarin",api:"remove-user-attributes",repeat:"14",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"c-3"},"C#"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Android")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void RemoveUserAttributes (IList<string> attributeNames);\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeNames")," is an IList containing the names of user profile attributes to remove.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"iOS")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void RemoveUserAttributes (string[] attributeNames);\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeNames")," is an array of strings containing the names of user profile attributes to remove.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"You want to remove ",(0,m.mdx)("inlineCode",{parentName:"p"},"username"),", ",(0,m.mdx)("inlineCode",{parentName:"p"},"usertype")," user data when session timeout occurs."),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Android")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},'var attributes = new List<string>();\nattributes.Add("username");\nattributes.Add("usertype");\nACPUserProfile.RemoveUserAttributes(attributes);\n')),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"iOS")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},'string[] attributes = new string[] { "username", "usertype" };\nACPUserProfile.RemoveUserAttributes(attributes);\n')),(0,m.mdx)(d,{platform:"android",api:"update-user-attribute",repeat:"6",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"java-5"},"Java"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-java"},"public static void updateUserAttribute(String attributeName, \n                                       Object attributeValue)\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"You want to update ",(0,m.mdx)("inlineCode",{parentName:"p"},"username")," of a user obtained in the log in page:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-java"},'UserProfile.updateUserAttribute("username", "Will Smith");\n')),(0,m.mdx)(d,{platform:"ios-acp",api:"update-user-attribute",repeat:"11",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"swift-9"},"Swift"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},"static func updateUserAttribute(_ attributeName: String, withValue attributeValue: String?)\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"You want to update ",(0,m.mdx)("inlineCode",{parentName:"p"},"username")," of a user obtained in the log in page:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},'ACPUserProfile.updateUserAttribute("username", withValue: "Will Smith");\n')),(0,m.mdx)("h4",{id:"objective-c-9"},"Objective-C"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) updateUserAttribute: (nonnull NSString*) attributeName withValue: (nullable NSString*) attributeValue;\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},'[ACPUserProfile updateUserAttribute:@"username" withValue:@"Will Smith"];\n')),(0,m.mdx)(d,{platform:"flutter",api:"update-user-attribute",repeat:"7",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"dart-4"},"Dart"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-dart"},"static Future<void> updateUserAttribute(String attributeName, String attributeValue) async\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeName")," is a string containing the name of the user profile attribute to create or update."),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeValue")," must be a string, number, or array containing the user profile attribute value.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"You want to update ",(0,m.mdx)("inlineCode",{parentName:"p"},"username")," of a user obtained in the log in page :"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-dart"},'FlutterACPUserProfile.updateUserAttribute("username", "Will Smith");\n')),(0,m.mdx)(d,{platform:"cordova",api:"update-user-attribute",repeat:"7",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"cordova-4"},"Cordova"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-javascript"},"ACPUserProfile.updateUserAttribute = function(attributeName, attributeValue, success, fail);\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeName")," is a string containing the name of the user profile attribute to create or update."),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeValue")," must be a string, number, or array containing the user profile attribute value."),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"success")," is a callback containing a general success message if the updateUserAttribute API executed without any errors."),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"fail")," is a callback containing error information if the updateUserAttribute API was executed with errors.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"You want to update ",(0,m.mdx)("inlineCode",{parentName:"p"},"username")," of a user obtained in the log in page:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-javascript"},'ACPUserProfile.updateUserAttribute("username", "Will Smith", handleCallback, handleError);\n')),(0,m.mdx)(d,{platform:"xamarin",api:"update-user-attribute",repeat:"11",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"c-4"},"C#"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Android")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void UpdateUserAttribute (string attributeName, Java.Lang.Object attributeValue);\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeName")," is a string containing the name of the user profile attribute to create or update."),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeValue")," must be a String, Integer, Boolean, Double, Array, or Map containing the user profile attribute value. Custom objects cannot be saved as a ",(0,m.mdx)("inlineCode",{parentName:"li"},"UserProfile")," attribute.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"iOS")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void UpdateUserAttribute (string attributeName, string attributeValue);\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeName")," is a string containing the name of the user profile attribute to create or update."),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeValue")," is a string containing the user profile attribute value.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"You want to update ",(0,m.mdx)("inlineCode",{parentName:"p"},"username")," of a user obtained in the log in page:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},'ACPUserProfile.updateUserAttribute("username", "Will Smith");\n')),(0,m.mdx)(d,{platform:"android",api:"update-user-attributes",repeat:"6",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"java-6"},"Java"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-java"},"public static void updateUserAttributes(Map<String, Object> attributeMap)\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"You want to update ",(0,m.mdx)("inlineCode",{parentName:"p"},"username, usertype")," of a user obtained in the log in page:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-java"},'HashMap<String, Object> profileMap = new HashMap<>();\nprofileMap.put("username","Will Smith");\nprofileMap.put("usertype","Actor");\nUserProfile.updateUserAttributes(profileMap);\n')),(0,m.mdx)(d,{platform:"ios-aep",api:"update-user-attributes",repeat:"11",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"swift-10"},"Swift"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},"public static func updateUserAttributes(attributeDict: [String: Any])\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"You want to update ",(0,m.mdx)("inlineCode",{parentName:"p"},"username, usertype")," of a user obtained in the log in page:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},'var profileMap = [AnyHashable: Any]()\nprofileMap["username"] = "will_smith"\nprofileMap["usertype"] = "Actor"\nUserProfile.updateUserAttributes(attributeDict: profileMap)\n')),(0,m.mdx)("h4",{id:"objective-c-10"},"Objective-C"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void)updateUserAttributesWithAttributeDict:(NSDictionary<NSString *,id> * _Nonnull)\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSMutableDictionary *profileMap = [NSMutableDictionary dictionary];\n[profileMap setObject:@"username" forKey:@"will_smith"];\n[profileMap setObject:@"usertype" forKey:@"Actor"];\n[AEPMobileUserProfile updateUserAttributesWithAttributeDict:profileMap];\n')),(0,m.mdx)(d,{platform:"ios-acp",api:"update-user-attributes",repeat:"11",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"swift-11"},"Swift"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},"static func updateUserAttributes(_ attributeMap: [AnyHashble: Any])\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"You want to update ",(0,m.mdx)("inlineCode",{parentName:"p"},"username, usertype")," of a user obtained in the log in page:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-swift"},'var profileMap = [AnyHashable: Any]()\nprofileMap["username"] = "will_smith"\nprofileMap["usertype"] = "Actor"\nACPUserProfile.updateUserAttributes(profileMap)\n')),(0,m.mdx)("h4",{id:"objective-c-11"},"Objective-C"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) updateUserAttributes: (nonnull NSDictionary*) attributeMap\n")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSMutableDictionary *profileMap = [NSMutableDictionary dictionary];\n[profileMap setObject:@"username" forKey:@"will_smith"];\n[profileMap setObject:@"usertype" forKey:@"Actor"];\n[ACPUserProfile updateUserAttributes:profileMap];\n')),(0,m.mdx)(d,{platform:"flutter",api:"update-user-attributes",repeat:"7",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"dart-5"},"Dart"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-dart"},"static Future<void> updateUserAttributes(Map<String, Object> attributeMap) async\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeMap")," is a object containing a batch of user profile attributes to create or update.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"You want to update ",(0,m.mdx)("inlineCode",{parentName:"p"},"username, usertype")," of a user obtained in the log in page:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-dart"},'FlutterACPUserProfile.updateUserAttributes({"username":"will_smith", "usertype":"Actor"});\n')),(0,m.mdx)(d,{platform:"cordova",api:"update-user-attributes",repeat:"7",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"cordova-5"},"Cordova"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-javascript"},"ACPUserProfile.updateUserAttributes = function(attributes, success, fail);\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributes")," is a object containing a batch of user profile attributes to create or update."),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"success")," is a callback containing a general success message if the updateUserAttributes API executed without any errors."),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"fail")," is a callback containing error information if the updateUserAttributes API was executed with errors.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"You want to update ",(0,m.mdx)("inlineCode",{parentName:"p"},"username, usertype")," of a user obtained in the log in page:"),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-javascript"},'var username = "will_smith";\nvar usertype = "Actor";\nvar attributes = {"username":username, "usertype":usertype};\nACPUserProfile.updateUserAttributes(attributes, handleCallback, handleError);\n')),(0,m.mdx)(d,{platform:"xamarin",api:"update-user-attributes",repeat:"14",mdxType:"Variant"}),(0,m.mdx)("h4",{id:"c-5"},"C#"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Syntax")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Android")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},"public unsafe static void UpdateUserAttributes (IDictionary<string, Java.Lang.Object> attributeMap);\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeMap")," is a object containing a batch of user profile attributes to create or update.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"iOS")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},"public static void UpdateUserAttributes (NSDictionary attributeMap);\n")),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("em",{parentName:"li"},"attributeMap")," is a object containing a batch of user profile attributes to create or update.")),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Example")),(0,m.mdx)("p",null,"You want to update ",(0,m.mdx)("inlineCode",{parentName:"p"},"username, usertype")," of a user obtained in the log in page :"),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"Android")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},'var attributes = new Dictionary<string, Java.Lang.Object>();\nattributes.Add("username", "will_smith");\nattributes.Add("usertype", "Actor");\nACPUserProfile.UpdateUserAttributes(attributes);\n')),(0,m.mdx)("p",null,(0,m.mdx)("strong",{parentName:"p"},"iOS")),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-csharp"},' var attributes = new NSMutableDictionary<NSString, NSString>\n {\n   ["username"] = new NSString("will_smith"),\n   ["usertype"] = new NSString("Actor")\n };\nACPUserProfile.updateUserAttributes(attributes);\n')))}x.isMDXComponent=!0}}]);
//# sourceMappingURL=46190ab570d51cd9c43bf9df54198a81ecba9f9f-0f28336a8820cb76443b.js.map