{"version":3,"file":"component---src-pages-home-base-mobile-core-platform-services-index-md-033be1b6d45deff1861b.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/home/base/mobile-core/platform-services/index.md","webpack://dev-site-documentation-template/./src/pages/home/base/mobile-core/platform-services/tabs/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Tabs from './tabs/index.md';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst TabsBlock = makeShortcode(\"TabsBlock\");\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"platform-services\"\n    }}>{`Platform Services`}</h1>\n    <p>{`The Platform Services are provided by the Adobe Experience Platform Mobile SDKs as part of the Mobile Core extension. These services provide shared functionality throughout the SDK that can be shared by extensions. For example, services provide shared functionality for networking, data queuing, and caching. For more information on services provided by the SDK please see the documentation in our `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/aepsdk-core-ios/blob/main/Documentation/Services/README.md\"\n      }}>{`iOS`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/aepsdk-core-ios/tree/main/Documentation/Services\"\n      }}>{`Android`}</a>{` repositories.`}</p>\n    <h2 {...{\n      \"id\": \"accessing-services\"\n    }}>{`Accessing services`}</h2>\n    <p>{`The MobileCore extension provides a shared `}<inlineCode parentName=\"p\">{`ServiceProvider`}</inlineCode>{`, responsible for maintaining the current set of provided services and any potential service overrides.`}</p>\n    <p>{`Some services provide wrapper classes. For example, the `}<inlineCode parentName=\"p\">{`Log`}</inlineCode>{` class is a wrapper around the `}<inlineCode parentName=\"p\">{`LoggingService`}</inlineCode>{`. However, in some cases, a wrapper class may not exist, and you may need to access a service directly from the `}<inlineCode parentName=\"p\">{`ServiceProvider`}</inlineCode>{`. The recommended way to do this is through a computed variable or directly through the `}<inlineCode parentName=\"p\">{`ServiceProvider`}</inlineCode>{` when required. This ensures that if the service is overridden, the service consumer always uses the correct service implementation.`}</p>\n    <p>{`For example, the following code snippet shows how to access `}<inlineCode parentName=\"p\">{`CacheService`}</inlineCode>{`.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&task=access\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&task=access\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"overriding-services\"\n    }}>{`Overriding services`}</h2>\n    <p>{`The SDK allows overriding some services with your custom implemetation. This section walks through the steps necessary to create a custom `}<inlineCode parentName=\"p\">{`Logging`}</inlineCode>{` service, and register it with the SDK.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Use caution when overriding services. Changes to behavior for a given service can have unintended consequences throughout the SDK.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&task=override\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&task=override\" mdxType=\"Tabs\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" task=\"access\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`CacheService cacheService = ServiceProvider.getInstance().getCacheService();\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"access\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`private var cacheService: Caching { return ServiceProvider.shared.cacheService }\n`}</code></pre>\n    <Variant platform=\"android\" task=\"override\" repeat=\"7\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <p>{`First, implement a class that conforms to the `}<inlineCode parentName=\"p\">{`Logging`}</inlineCode>{` interface. Below is an example of a logging service that only prints out messages with a log level of Error.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`class ErrorLogger implements Logging {\n @Override\n public void trace(String tag, String message) {}\n\n @Override\n public void debug(String tag, String message) {}\n\n @Override\n public void warning(String tag, String message) {}\n\n @Override\n public void error(String tag, String message) {\n  Log.e(\"ErrorLogger\", message);\n }\n}\n`}</code></pre>\n    <p>{`Next, use the `}<inlineCode parentName=\"p\">{`setLoggingService`}</inlineCode>{` API of `}<inlineCode parentName=\"p\">{`ServiceProvider`}</inlineCode>{` to update the logging service used by the SDK.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`ServiceProvider.getInstance().setLoggingService(new ErrorLogger());\n`}</code></pre>\n    <p>{`To revert to the default implementation of the `}<inlineCode parentName=\"p\">{`LoggingService`}</inlineCode>{`, you can set the logging service to nil using `}<inlineCode parentName=\"p\">{`setLoggingService`}</inlineCode>{` API.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`ServiceProvider.getInstance().setLoggingService(null);\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"override\" repeat=\"7\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <p>{`First, implement a type that conforms to the Logging protocol, as defined above.  Below is an example of a logging service that only prints out messages with a log level of `}<inlineCode parentName=\"p\">{`Error`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`class ErrorLogger: Logging {\n  func log(level: LogLevel, label: String, message: String) {\n    guard level == .error else { return }\n    print(\"\\\\(label): \\\\(message)\")\n  }\n}\n`}</code></pre>\n    <p>{`Next, set the `}<inlineCode parentName=\"p\">{`loggingService`}</inlineCode>{` on the shared `}<inlineCode parentName=\"p\">{`ServiceProvider`}</inlineCode>{` used by the SDK.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`ServiceProvider.shared.loggingService = ErrorLogger()\n`}</code></pre>\n    <p>{`To revert to the default implementation of the `}<inlineCode parentName=\"p\">{`LoggingService`}</inlineCode>{`, you can set the loggingService to nil.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`ServiceProvider.shared.loggingService = nil\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","TabsBlock","InlineAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","orientation","slots","repeat","query","variant","isMDXComponent","Variant","platform","task"],"sourceRoot":""}