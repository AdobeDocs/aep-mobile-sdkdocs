"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[4656],{80599:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return o},default:function(){return g}});var t,s=a(87462),l=a(63366),r=(a(15007),a(64983)),i=a(91515),p=["components"],o={},d=(t="Variant",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.mdx)("div",e)}),c={_frontmatter:o},m=i.Z;function g(e){var n=e.components,a=(0,l.Z)(e,p);return(0,r.mdx)(m,(0,s.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)(d,{platform:"android3x",function:"register",repeat:"7",mdxType:"Variant"}),(0,r.mdx)("p",null,"In the ",(0,r.mdx)("inlineCode",{parentName:"p"},"onShow")," function of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"PresentationDelegate"),", call ",(0,r.mdx)("inlineCode",{parentName:"p"},"handleJavascriptMessage(String, AdobeCallback<String>)")," to register your handler."),(0,r.mdx)("p",null,"The name of the message you intend to pass from the JavaScript side should be specified in the first parameter."),(0,r.mdx)("p",null,"The following example shows a handler that dispatches an ",(0,r.mdx)("inlineCode",{parentName:"p"},"decisioning.propositionInteract")," Experience Event natively when the JavaScript of the in-app message posts a myInappCallback message:"),(0,r.mdx)("h4",{id:"kotlin"},"Kotlin"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-kotlin"},'var eventHandler: InAppMessageEventHandler? = null\nvar currentMessagePresentable: Presentable<InAppMessage>? = null\n\noverride fun onShow(presentable: Presentable<*>) {\n  if (presentable.getPresentation() !is InAppMessage) {\n    return\n  }\n  currentMessagePresentable = presentable as Presentable<InAppMessage>\n  eventHandler = currentMessagePresentable?.getPresentation()?.eventHandler\n  // in-line handling of JavaScript calls\n  eventHandler?.handleJavascriptMessage("myInappCallback") { content ->\n    if (content != null) {\n        println("JavaScript body passed to native callback: $content")\n        val message: Message? = MessagingUtils.getMessageForPresentable(currentMessagePresentable)\n        message?.track(content, MessagingEdgeEventType.INTERACT);\n    }\n  }\n}\n')),(0,r.mdx)("h4",{id:"java"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'InAppMessageEventHandler eventHandler = null;\nPresentable<InAppMessage> currentMessagePresentable = null;\n\n@Override\npublic void onShow(Presentable<?> presentable) {\n    if (!(presentable.getPresentation() instanceof InAppMessage)) {\n      return;\n    }\n    currentMessagePresentable = (Presentable<InAppMessage>) presentable;\n    eventHandler = currentMessagePresentable.getPresentation().getEventHandler();\n    // in-line handling of JavaScript calls\n    eventHandler.handleJavascriptMessage("myInappCallback", content -> {\n        if (content != null) {\n            System.out.println("JavaScript body passed to native callback: " + content);\n            Message message = MessagingUtils.getMessageForPresentable(currentMessagePresentable);\n            if (message != null) {\n                message.track(content, MessagingEdgeEventType.INTERACT);\n            }\n        }\n    });\n}\n')),(0,r.mdx)(d,{platform:"android2x",function:"register",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("p",null,"In the ",(0,r.mdx)("inlineCode",{parentName:"p"},"shouldShowMessage")," function of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"MessagingDelegate"),", call ",(0,r.mdx)("inlineCode",{parentName:"p"},"public void handleJavascriptMessage(final String name, final AdobeCallback<String> callback)")," to register your handler."),(0,r.mdx)("p",null,"The name of the message you intend to pass from the JavaScript side should be specified in the first parameter."),(0,r.mdx)("p",null,"The following example shows a handler that dispatches a ",(0,r.mdx)("inlineCode",{parentName:"p"},"decisioning.propositionInteract")," Experience Event natively when the JavaScript of the in-app message posts a ",(0,r.mdx)("inlineCode",{parentName:"p"},"myInappCallback")," message:"),(0,r.mdx)("h4",{id:"java-1"},"Java"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-java"},'@Override\npublic boolean shouldShowMessage(FullscreenMessage fullscreenMessage) {\n  Message message = (Message) fullscreenMessage.getParent();\n  \n  // in-line handling of JavaScript calls\n  message.handleJavascriptMessage("myInappCallback", new AdobeCallback<String>() {\n    @Override\n    public void call(String content) {\n      System.out.println("JavaScript body passed to native callback: " + content);\n      message.track(content, MessagingEdgeEventType.IN_APP_INTERACT);\n    }\n  });\n}\n')),(0,r.mdx)(d,{platform:"ios",function:"register",repeat:"5",mdxType:"Variant"}),(0,r.mdx)("p",null,"In the ",(0,r.mdx)("inlineCode",{parentName:"p"},"shouldShowMessage")," function of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"MessagingDelegate"),", call ",(0,r.mdx)("a",{parentName:"p",href:"./class-message.md#handlejavascriptmessage_withhandler"},(0,r.mdx)("inlineCode",{parentName:"a"},"handleJavascriptMessage(_:withHandler)"))," to register your handler."),(0,r.mdx)("p",null,"The name of the message you intend to pass from the JavaScript side should be specified in the first parameter."),(0,r.mdx)("p",null,"The following example shows a handler that dispatches a ",(0,r.mdx)("inlineCode",{parentName:"p"},"decisioning.propositionInteract")," Experience Event natively when the JavaScript of the in-app message posts a ",(0,r.mdx)("inlineCode",{parentName:"p"},"myInappCallback")," message:"),(0,r.mdx)("h4",{id:"swift"},"Swift"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-swift"},'func shouldShowMessage(message: Showable) -> Bool {    \n    let fullscreenMessage = message as? FullscreenMessage\n    let message = fullscreenMessage?.parent\n\n    // in-line handling of JavaScript calls\n    message?.handleJavascriptMessage("myInappCallback") { content\n\n        print("JavaScript body passed to native callback: \\(content ?? "empty")")\n\n        message?.track(content as? String, withEdgeEventType: .inappInteract)\n    }\n\n    return true\n}\n')))}g.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-edge-adobe-journey-optimizer-in-app-message-tutorials-tabs-native-from-javascript-md-b8714dfcde3695b734fa.js.map