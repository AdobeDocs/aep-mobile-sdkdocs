{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-in-app-message-tutorials-tabs-javascript-from-native-md-066c3a0874dc177f0938.js","mappings":"4OAOsBA,E,wEADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAIQ,UAJA,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EAClB,GAEMG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGP,GAAK,YAER,OAAO,SAACI,GAAS,UAAKD,EAAiBH,EAAK,CAAEO,WAAYA,EAAYC,QAAQ,eAG5E,SAACT,EAAO,CAACU,SAAS,UAAUC,KAAK,SAASC,OAAO,IAAIH,QAAQ,aAC7D,iEAAkD,uBAAYI,WAAW,KAAG,WAAyB,QACrG,eACE,GAAM,QAAM,SAEd,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,2QAWhC,SAACb,EAAO,CAACU,SAAS,MAAMC,KAAK,SAASC,OAAO,IAAIH,QAAQ,aACzD,6DAA8C,uBAAYI,WAAW,KAAG,aAA2B,QACnG,eACE,GAAM,SAAO,UAEf,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBAAgB,6RAWjC,SAACb,EAAO,CAACU,SAAS,UAAUC,KAAK,OAAOC,OAAO,IAAIH,QAAQ,aAC3D,8CAA+B,uBAAYI,WAAW,KAAG,WAAyB,0BAA0B,uBAAYA,WAAW,KAAG,0GAAwH,uDAC9P,uEAAwD,cAAGA,WAAW,IAClE,KAAQ,6JAA2J,yBACrI,uEAClC,eACE,GAAM,UAAQ,SAEhB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,6mBAuBhC,SAACb,EAAO,CAACU,SAAS,MAAMC,KAAK,OAAOC,OAAO,IAAIH,QAAQ,aACvD,8CAA+B,uBAAYI,WAAW,KAAG,aAA2B,0BAA0B,uBAAYA,WAAW,KAAG,4CAA0D,uDAClM,uEAAwD,cAAGA,WAAW,IAClE,KAAQ,yFAAuF,uBACnE,uEAChC,eACE,GAAM,WAAS,UAEjB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBAAgB,4xBA4BrC,CAEAN,EAAWO,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/in-app-message/tutorials/tabs/javascript-from-native.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" task=\"obtain\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`On Android, the web view is represented as `}<inlineCode parentName=\"p\">{`WebView`}</inlineCode>{`.  `}</p>\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic boolean shouldShowMessage(FullscreenMessage fullscreenMessage) {\n  // access to the whole message from the parent\n  Message message = (Message) fullscreenMessage.getParent();\n      \n  WebView webView = message.getWebView();\n  \n  ...\n}\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"obtain\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`On iOS, the web view is represented as `}<inlineCode parentName=\"p\">{`WKWebView`}</inlineCode>{`.  `}</p>\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func shouldShowMessage(message: Showable) -> Bool {\n    // access to the whole message from the parent\n    let fullscreenMessage = message as? FullscreenMessage\n    let message = fullscreenMessage?.parent\n\n    let messageWebView = message?.view as? WKWebView\n\n    ...\n}\n`}</code></pre>\n    <Variant platform=\"android\" task=\"call\" repeat=\"4\" mdxType=\"Variant\" />\n    <p>{`With a reference to the `}<inlineCode parentName=\"p\">{`WebView`}</inlineCode>{`, the instance method `}<inlineCode parentName=\"p\">{`public void evaluateJavascript(@NonNull String script, @Nullable ValueCallback<String> resultCallback)`}</inlineCode>{` can now be leveraged to call a JavaScript method.`}</p>\n    <p>{`Further details of this API are explained in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.android.com/reference/android/webkit/WebView#evaluateJavascript(java.lang.String,%20android.webkit.ValueCallback%3Cjava.lang.String%3E)\"\n      }}>{`Android documentation`}</a>{` - the example below is provided for the purpose of demonstration:`}</p>\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic boolean shouldShowMessage(FullscreenMessage fullscreenMessage) {\n  // access to the whole message from the parent\n  Message message = (Message) fullscreenMessage.getParent();\n      \n  WebView webView = message.getWebView();\n  // webview operations must be run on the ui thread\n  webView.post(new Runnable() {\n    @Override\n    public void run() {\n      webView.evaluateJavascript(\"startTimer()\", new ValueCallback<String>() {\n        @Override\n        public void onReceiveValue(String s) {\n          // do something with the content\n        }\n      });\n    }\n  });\n  \n  ...\n}\n`}</code></pre>\n    <Variant platform=\"ios\" task=\"call\" repeat=\"4\" mdxType=\"Variant\" />\n    <p>{`With a reference to the `}<inlineCode parentName=\"p\">{`WKWebView`}</inlineCode>{`, the instance method `}<inlineCode parentName=\"p\">{`evaluateJavaScript(_:completionHandler:)`}</inlineCode>{` can now be leveraged to call a JavaScript method.`}</p>\n    <p>{`Further details of this API are explained in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/documentation/webkit/wkwebview/1415017-evaluateJavaScript\"\n      }}>{`Apple documentation`}</a>{` - the example below is provided for the purpose of demonstration:`}</p>\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func shouldShowMessage(message: Showable) -> Bool {\n    // access to the whole message from the parent\n    let fullscreenMessage = message as? FullscreenMessage\n    let message = fullscreenMessage?.parent\n\n    // the \\`shouldShowMessage\\` delegate method is called on a background thread.\n    // need to dispatch code that uses the webview back to the main thread.\n    DispatchQueue.main.async {\n        let messageWebView = message?.view as? WKWebView\n\n        messageWebView?.evaluateJavaScript(\"startTimer();\") { result, error in\n            if error != nil {\n                // handle error\n                return\n            }\n\n            if result != nil {\n                // do something with the result\n            }\n        }                \n    }\n\n    ...\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Variant","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","platform","task","repeat","parentName","isMDXComponent"],"sourceRoot":""}