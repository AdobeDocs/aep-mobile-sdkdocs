"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[8459,3477],{76800:function(e,n,r){r.r(n),r.d(n,{_frontmatter:function(){return s},default:function(){return f}});var a=r(87462),t=r(63366),i=(r(15007),r(64983)),o=r(91515),l=r(52777),d=["components"],s={},p=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.mdx)("div",n)}},m=p("TabsBlock"),c=p("InlineAlert"),x={_frontmatter:s},u=o.Z;function f(e){var n=e.components,r=(0,t.Z)(e,d);return(0,i.mdx)(u,(0,a.Z)({},x,r,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("h1",{id:"mobile-services-api-reference"},"Mobile Services API reference"),(0,i.mdx)("h2",{id:"extensionversion"},"extensionVersion"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"extensionVersion()")," API returns the version of the Mobile Services extension that is registered with the Mobile Core extension."),(0,i.mdx)(m,{orientation:"horizontal",slots:"heading, content",repeat:"3",mdxType:"TabsBlock"}),(0,i.mdx)("p",null,"Android"),(0,i.mdx)(l.default,{query:"platform=android&api=extension-version",mdxType:"Tabs"}),(0,i.mdx)("p",null,"iOS (AEP 3.x)"),(0,i.mdx)(l.default,{query:"platform=ios-aep&api=extension-version",mdxType:"Tabs"}),(0,i.mdx)("p",null,"iOS (ACP 2.x)"),(0,i.mdx)(l.default,{query:"platform=ios-acp&api=extension-version",mdxType:"Tabs"}),(0,i.mdx)("h2",{id:"processreferrer"},"processReferrer"),(0,i.mdx)("p",null,"You can use this API to process the referrer intent that was received from Android."),(0,i.mdx)(c,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"This API is ",(0,i.mdx)("strong",{parentName:"p"},"only")," available in Android."),(0,i.mdx)("h4",{id:"java"},"Java"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"public static void processReferrer(final Context context, final Intent intent)\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"public  void onReceive(Context context, Intent intent) {\n    MobileServices.processReferrer(context, intent);\n}\n")),(0,i.mdx)("h2",{id:"processgoogleplayinstallreferrerurl"},"processGooglePlayInstallReferrerUrl"),(0,i.mdx)("p",null,"You can use this API to process the data you get from the Google Play Install Referrer APIs."),(0,i.mdx)(c,{variant:"warning",slots:"text",mdxType:"InlineAlert"}),(0,i.mdx)("p",null,"This API is ",(0,i.mdx)("strong",{parentName:"p"},"only")," available on Android, starting in version ",(0,i.mdx)("inlineCode",{parentName:"p"},"1.1.0"),"."),(0,i.mdx)("h4",{id:"java-1"},"Java"),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Syntax")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},"public static void processGooglePlayInstallReferrerUrl(final Context context, final Intent intent)\n")),(0,i.mdx)("p",null,(0,i.mdx)("strong",{parentName:"p"},"Example")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-java"},'void handleGooglePlayReferrer() {\n    // Google recommends only calling this API the first time you need it:\n    // https://developer.android.com/google/play/installreferrer/library#install-referrer\n\n    // Store a boolean in SharedPreferences to ensure we only call it once.\n    final SharedPreferences prefs = getSharedPreferences("acquisition", 0);\n    if (prefs != null) {\n        if (prefs.getBoolean("referrerHasBeenProcessed", false)) {\n            return;\n        }\n    }\n\n    final InstallReferrerClient referrerClient = InstallReferrerClient.newBuilder(getApplicationContext()).build();\n    referrerClient.startConnection(new InstallReferrerStateListener() {\n        private boolean complete = false;\n\n        @Override\n        public void onInstallReferrerSetupFinished(int responseCode) {\n            switch (responseCode) {\n                case InstallReferrerClient.InstallReferrerResponse.OK:\n                    // connection is established\n                    complete();\n                    try {\n                        final ReferrerDetails details = referrerClient.getInstallReferrer();                        \n\n                        // pass the install referrer url to the SDK\n                        MobileServices.processGooglePlayInstallReferrerUrl(details.getInstallReferrer());\n\n                    } catch (final RemoteException ex) {\n                        Log.w("Acquisition - RemoteException while retrieving referrer information (%s)", ex.getLocalizedMessage() == null ? "unknown" : ex.getLocalizedMessage());\n                    } finally {\n                        referrerClient.endConnection();\n                    }\n                    break;\n                case InstallReferrerClient.InstallReferrerResponse.FEATURE_NOT_SUPPORTED:\n                case InstallReferrerClient.InstallReferrerResponse.SERVICE_UNAVAILABLE:\n                default:\n                    // API not available in the Play Store app - nothing to do here\n                    complete();\n                    referrerClient.endConnection();\n                    break;\n            }\n        }\n\n        @Override\n        public void onInstallReferrerServiceDisconnected() {\n            if (!complete) {\n                // something went wrong trying to get a connection, try again\n                referrerClient.startConnection(this);\n            }\n        }\n\n        void complete() {\n            complete = true;\n            SharedPreferences.Editor editor = getSharedPreferences("acquisition", 0).edit();\n            editor.putBoolean("referrerHasBeenProcessed", true);\n            editor.apply();\n        }\n    });\n}\n')),(0,i.mdx)("h2",{id:"trackadobedeeplink"},"trackAdobeDeepLink"),(0,i.mdx)("p",null,"You can use this API to track a deep link or a marketing link, as long as the link contains a key ",(0,i.mdx)("inlineCode",{parentName:"p"},"a.deeplink.id")," and a corresponding non-null and user generated value. The link can be created in the Adobe Mobile Services UI or be generated by another vendor."),(0,i.mdx)(m,{orientation:"horizontal",slots:"heading, content",repeat:"3",mdxType:"TabsBlock"}),(0,i.mdx)("p",null,"Android"),(0,i.mdx)(l.default,{query:"platform=android&api=track-adobe-deep-link",mdxType:"Tabs"}),(0,i.mdx)("p",null,"iOS (AEP 3.x)"),(0,i.mdx)(l.default,{query:"platform=ios-aep&api=track-adobe-deep-link",mdxType:"Tabs"}),(0,i.mdx)("p",null,"iOS (ACP 2.x)"),(0,i.mdx)(l.default,{query:"platform=ios-acp&api=track-adobe-deep-link",mdxType:"Tabs"}))}f.isMDXComponent=!0},52777:function(e,n,r){r.r(n),r.d(n,{_frontmatter:function(){return s},default:function(){return x}});var a,t=r(87462),i=r(63366),o=(r(15007),r(64983)),l=r(91515),d=["components"],s={},p=(a="Variant",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)}),m={_frontmatter:s},c=l.Z;function x(e){var n=e.components,r=(0,i.Z)(e,d);return(0,o.mdx)(c,(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)(p,{platform:"android",api:"extension-version",repeat:"2",mdxType:"Variant"}),(0,o.mdx)("h4",{id:"java"},"Java"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"String mobileServicesExtensionVersion = MobileServices.extensionVersion();\n")),(0,o.mdx)(p,{platform:"ios-aep",api:"extension-version",repeat:"4",mdxType:"Variant"}),(0,o.mdx)("h4",{id:"swift"},"Swift"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},"let mobileServicesExtensionVersion  = AEPMobileServices.extensionVersion()\n")),(0,o.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-objectivec"},"NSString *mobileServicesExtensionVersion = [AEPMobileServices extensionVersion];\n")),(0,o.mdx)(p,{platform:"ios-acp",api:"extension-version",repeat:"4",mdxType:"Variant"}),(0,o.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-objectivec"},"NSString *mobileServicesExtensionVersion = [ACPMobileServices extensionVersion];\n")),(0,o.mdx)("h4",{id:"swift-1"},"Swift"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},"let mobileServicesExtensionVersion  = ACPMobileServices.extensionVersion()\n")),(0,o.mdx)(p,{platform:"android",api:"track-adobe-deep-link",repeat:"5",mdxType:"Variant"}),(0,o.mdx)("h4",{id:"java-1"},"Java"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Syntax")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},"public static void trackAdobeDeepLink(final Uri uri)\n")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Example")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-java"},'Uri testUri = new Uri.Builder()\n        .scheme("adobelinktest")\n        .appendQueryParameter("a.deeplink.id", "test_deeplinkId")\n        .appendQueryParameter("a.launch.campaign.trackingcode", "code")\n        .appendQueryParameter("test_key", "test_value")        \n        .build();\n\n        MobileServices.trackAdobeDeepLink(testUri);\n')),(0,o.mdx)(p,{platform:"ios-aep",api:"track-adobe-deep-link",repeat:"7",mdxType:"Variant"}),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Syntax")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) trackAdobeDeepLink: (NSURL* _Nonnull) deeplink;\n")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Example")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Swift")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},'let url = URL(string: "adobelinktest://x?a.deeplink.id=test_deeplinkId&a.launch.campaign.trackingcode=code&test_key=test_value")!\nAEPMobileServices.trackAdobeDeepLink(url)\n')),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Objective-C")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSURL* url = [NSURL URLWithString:@"adobelinktest://x?a.deeplink.id=test_deeplinkId&a.launch.campaign.trackingcode=code&test_key=test_value"];\n\n[AEPMobileServices trackAdobeDeepLink:url];\n')),(0,o.mdx)(p,{platform:"ios-acp",api:"track-adobe-deep-link",repeat:"7",mdxType:"Variant"}),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Syntax")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-objectivec"},"+ (void) trackAdobeDeepLink: (NSURL*) url;\n")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Example")),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Swift")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-swift"},'let url = URL(string: "adobelinktest://x?a.deeplink.id=test_deeplinkId&a.launch.campaign.trackingcode=code&test_key=test_value")!\nACPMobileServices.trackAdobeDeepLink(url)\n')),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"Objective-C")),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-objectivec"},'NSURL* url = [NSURL URLWithString:@"adobelinktest://x?a.deeplink.id=test_deeplinkId&a.launch.campaign.trackingcode=code&test_key=test_value"];\n\n[ACPMobileServices trackAdobeDeepLink:url];\n')))}x.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-documentation-adobe-analytics-mobile-services-api-reference-md-5c5c20e657a2925fd26c.js.map