{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-public-classes-content-card-md-0f4555f9af57b1f0a476.js","mappings":"oTAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGC,GAAK,YAER,OAAO,SAACJ,GAAS,UAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,eAAa,gBAErB,iHACA,4HAA6G,cAAGC,WAAW,IACvH,KAAQ,6BACP,uBAAYA,WAAW,KAAG,gCAAiD,UAChF,eACE,GAAM,iBAAe,kBAEvB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBAAgB,gqBAsBjC,eACE,GAAM,oBAAkB,qBAE1B,qBACA,eACE,GAAM,2BAAyB,gCAEjC,2DAA4C,uBAAYA,WAAW,KAAG,eAA6B,MACnG,eACE,GAAM,UAAQ,WAEhB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBAAgB,4GAGjC,eACE,GAAM,cAAY,eAEpB,oBACE,eAAIA,WAAW,OAAK,eAAIA,WAAW,MAAI,eAAqB,gBAAgB,uBAAYA,WAAW,MAAI,UAAwB,6CAC/H,eAAIA,WAAW,OAAK,eAAIA,WAAW,MAAI,aAAmB,WAAW,cAAGA,WAAW,KAC/E,KAAQ,mCACP,uBAAYA,WAAW,KAAG,2BAA4C,4CAE7E,eACE,GAAM,WAAS,YAEjB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBAAgB,gNASjC,eACE,GAAM,qBAAmB,sBAE3B,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,+3BA8BhC,eACE,GAAM,sBAAoB,qBAE5B,qBACA,eACE,GAAM,SAAO,UAEf,2DAA4C,uBAAYA,WAAW,KAAG,eAA6B,MACnG,eACE,GAAM,YAAU,WAElB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,4FAGhC,eACE,GAAM,gBAAc,eAEtB,oBACE,eAAIA,WAAW,OAAK,eAAIA,WAAW,MAAI,eAAqB,gBAAgB,uBAAYA,WAAW,MAAI,UAAwB,6CAC/H,eAAIA,WAAW,OAAK,eAAIA,WAAW,MAAI,aAAmB,WAAW,cAAGA,WAAW,KAC/E,KAAQ,mCACP,uBAAYA,WAAW,KAAG,2BAA4C,4CAE7E,eACE,GAAM,aAAW,YAEnB,eACE,GAAM,UAAQ,WAEhB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,mBAAiB,kWAWlC,eACE,GAAM,QAAM,SAEd,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,qYAapC,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/public-classes/content-card.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"contentcard\"\n    }}>{`ContentCard`}</h1>\n    <p>{`An object representing the default content card created in the Adobe Journey Optimizer UI.`}</p>\n    <p>{`Content cards must be rendered by the app developer. Tracking a content card is done via calls to the `}<a parentName=\"p\" {...{\n        \"href\": \"#track_withedgeeventtype\"\n      }}><inlineCode parentName=\"a\">{`track(_:withEdgeEventType:)`}</inlineCode></a>{` API.`}</p>\n    <h2 {...{\n      \"id\": \"ios-interface\"\n    }}>{`iOS Interface`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`@objc(AEPContentCard)\n@objcMembers\npublic class ContentCard: NSObject, Codable {\n    /// Plain-text title for the content card\n    public let title: String\n\n    /// Plain-text body representing the content for the content card\n    public let body: String\n\n    /// String representing a URI that contains an image to be used for this content card\n    public let imageUrl: String?\n\n    /// Contains a URL to be opened if the user interacts with the content card\n    public let actionUrl: String?\n\n    /// Required if \\`actionUrl\\` is provided. Text to be used in title of button or link in content card\n    public let actionTitle: String?\n\n    ...\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"public-functions\"\n    }}>{`Public functions`}</h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"track_withedgeeventtype\"\n    }}>{`track(_:withEdgeEventType:)`}</h3>\n    <p>{`Tracks an interaction with the given `}<inlineCode parentName=\"p\">{`ContentCard`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"syntax\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`public func track(_ interaction: String? = nil, withEdgeEventType eventType: MessagingEdgeEventType)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"parameters\"\n    }}>{`Parameters`}</h4>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`interaction`}</em>{` - a custom `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{` value to be recorded in the interaction`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`eventType`}</em>{` - the `}<a parentName=\"li\" {...{\n          \"href\": \"./messaging-edge-event-type.md\"\n        }}><inlineCode parentName=\"a\">{`MessagingEdgeEventType`}</inlineCode></a>{` to be used for the ensuing Edge Event`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`var contentCard: ContentCard\n\n// tracking a display\ncontentCard.track(withEdgeEventType: .display)\n\n// tracking a user interaction\ncontentCard.track(\"itemSelected\", withEdgeEventType: .interact)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"android-interface\"\n    }}>{`Android Interface`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class ContentCard {\n    // Plain-text title for the content card\n    private String title;\n\n    // Plain-text body representing the content for the content card\n    private String body;\n\n    // String representing a URI that contains an image to be used for this content card\n    private String imageUrl;\n\n    // Contains a URL to be opened if the user interacts with the content card\n    private String actionUrl;\n\n    // Required if actionUrl is provided. Text to be used in title of button or link in content card\n    private String actionTitle;\n\n    public String getTitle() { return title; }\n\n    public String getBody() { return body; }\n\n    @Nullable public String getImageUrl() { return imageUrl; }\n\n    @Nullable public String getActionUrl() { return actionUrl; }\n\n    @Nullable public String getActionTitle() { return actionTitle; }\n\n    ...\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"public-functions-1\"\n    }}>{`Public functions`}</h3>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"track\"\n    }}>{`track`}</h3>\n    <p>{`Tracks an interaction with the given `}<inlineCode parentName=\"p\">{`ContentCard`}</inlineCode>{`.`}</p>\n    <h4 {...{\n      \"id\": \"syntax-1\"\n    }}>{`Syntax`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public void track(final String interaction, final MessagingEdgeEventType eventType);\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"parameters-1\"\n    }}>{`Parameters`}</h4>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`interaction`}</em>{` - a custom `}<inlineCode parentName=\"li\">{`String`}</inlineCode>{` value to be recorded in the interaction`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`eventType`}</em>{` - the `}<a parentName=\"li\" {...{\n          \"href\": \"./messaging-edge-event-type.md\"\n        }}><inlineCode parentName=\"a\">{`MessagingEdgeEventType`}</inlineCode></a>{` to be used for the ensuing Edge Event`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"example-1\"\n    }}>{`Example`}</h4>\n    <h4 {...{\n      \"id\": \"kotlin\"\n    }}>{`Kotlin`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`// Get content card schema data from a PropositionItem object\nval contentCardData = item?.contentCardSchemaData\nval contentCard = contentCardData?.contentCard\n\n// tracking a display\ncontentCard?.track(null, MessagingEdgeEventType.DISPLAY)\n\n// tracking a user interaction\ncontentCard?.track(\"itemSelected\", MessagingEdgeEventType.INTERACT)\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// Get content card schema data from a PropositionItem object\nContentCardSchemaData contentCardData = item.getContentCardSchemaData();\nContentCard contentCard = contentCardData.getContentCard();\n\n// tracking a display\ncontentCard.track(null, MessagingEdgeEventType.DISPLAY);\n\n// tracking a user interaction\ncontentCard.track(\"itemSelected\", MessagingEdgeEventType.INTERACT);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}