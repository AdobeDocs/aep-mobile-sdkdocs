"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[613],{56174:function(e,n,i){i.r(n),i.d(n,{_frontmatter:function(){return d},default:function(){return f}});var t=i(87462),o=i(63366),a=(i(15007),i(64983)),s=i(91515),r=["components"],d={},c=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.mdx)("div",n)}},p=c("CodeBlock"),l=c("InlineAlert"),m={_frontmatter:d},u=s.Z;function f(e){var n=e.components,i=(0,o.Z)(e,r);return(0,a.mdx)(u,(0,t.Z)({},m,i,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"push-notification---api-reference"},"Push Notification - API reference"),(0,a.mdx)("p",null,"This document details how to use the APIs provided by the AEPMessaging framework for tracking and displaying push notifications."),(0,a.mdx)("h2",{id:"pre-requisites"},"Pre-requisites"),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"../../index.md#implement-extension-in-mobile-app"},"Integrate and register AEPMessaging extension")," in your app."),(0,a.mdx)("h2",{id:"sync-the-push-token"},"Sync the push token"),(0,a.mdx)("p",null,"To retrieve the push token in iOS, refer to the ",(0,a.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/usernotifications/registering_your_app_with_apns"},"Apple documentation for registering your app with APNs"),". Then add the following code to the ",(0,a.mdx)("inlineCode",{parentName:"p"},"application(_: didRegisterForRemoteNotificationsWithDeviceToken:)")," method in the ",(0,a.mdx)("inlineCode",{parentName:"p"},"AppDelegate")," to sync the device's push token with profile in Adobe Experience Platform."),(0,a.mdx)(p,{slots:"heading, code",repeat:"2",languages:"Swift, Objective-C",mdxType:"CodeBlock"}),(0,a.mdx)("h4",{id:"swift"},"Swift"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-swift"},"func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    MobileCore.setPushIdentifier(deviceToken)\n}\n")),(0,a.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-objc"},"- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n    [AEPMobileCore setPushIdentifier:deviceToken];\n}\n")),(0,a.mdx)("h2",{id:"track-push-notification-interactions"},"Track push notification interactions"),(0,a.mdx)("p",null,"Use ",(0,a.mdx)("inlineCode",{parentName:"p"},"handleNotificationResponse")," API to send push notification interaction data to Adobe Experience Platform."),(0,a.mdx)("p",null,"In iOS, ",(0,a.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/usernotifications/unusernotificationcenterdelegate"},"UNUserNotificationCenterDelegate")," is the interface for processing incoming notifications and responding to notification actions. Once the delegate is implemented, handle push notification responses in ",(0,a.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/usernotifications/unusernotificationcenterdelegate/1649501-usernotificationcenter"},"userNotificationCenter(_:didReceive:withCompletionHandler:)")," method."),(0,a.mdx)(p,{slots:"heading, code",repeat:"2",languages:"Swift, Objective-C",mdxType:"CodeBlock"}),(0,a.mdx)("h4",{id:"swift-1"},"Swift"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-swift"},"func userNotificationCenter(_: UNUserNotificationCenter,\n                            didReceive response: UNNotificationResponse,\n                            withCompletionHandler completionHandler: @escaping () -> Void) {                                \n    Messaging.handleNotificationResponse(response)\n    completionHandler()\n}\n")),(0,a.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-objc"},"- (void)userNotificationCenter:(UNUserNotificationCenter *)center\ndidReceiveNotificationResponse:(UNNotificationResponse *)response\n         withCompletionHandler:(void (^)(void))completionHandler {\n\n    [AEPMobileMessaging handleNotificationResponse:response closure:nil];\n}\n")),(0,a.mdx)(l,{variant:"info",slots:"text",mdxType:"InlineAlert"}),(0,a.mdx)("p",null,"This API method will automatically handle click behaviour defined for the push notification in Adobe Journey Optimizer."),(0,a.mdx)("h4",{id:"reading-push-tracking-status"},"Reading push tracking status"),(0,a.mdx)("p",null,"Implement the callback in ",(0,a.mdx)("inlineCode",{parentName:"p"},"handleNotificationResponse")," API to read ",(0,a.mdx)("a",{parentName:"p",href:"../enum-push-tracking-status.md"},"PushTrackingStatus")," enum representing tracking status of the push notification."),(0,a.mdx)(p,{slots:"heading, code",repeat:"2",languages:"Swift, Objective-C",mdxType:"CodeBlock"}),(0,a.mdx)("h4",{id:"swift-2"},"Swift"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-swift"},"    Messaging.handleNotificationResponse(response) { trackingStatus in\n        // handle the different values of trackingStatus\n    }\n")),(0,a.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-objc"},'    [AEPMobileMessaging handleNotificationResponse:response closure:^(AEPPushTrackingStatus status){\n        if (status == AEPPushTrackingStatusTrackingInitiated) {\n            NSLog(@"Successfully started push notification tracking");\n        }\n    }];\n')))}f.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-edge-adobe-journey-optimizer-push-notification-ios-api-reference-md-ee19b6b58b03ad93f3f1.js.map