{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-content-card-ui-android-tutorial-listening-content-card-events-md-0b9fd39a6ae015acf925.js","mappings":"2OAOsBA,E,wEADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAIU,YAJF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EAClB,GAEMG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGP,GAAK,YAER,OAAO,SAACI,GAAS,UAAKD,EAAiBH,EAAK,CAAEO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,oCAAkC,qCAE1C,uGACA,eACE,GAAM,YAAU,aAElB,sMAAuL,uBAAYC,WAAW,KAAG,8BAA4C,gBAC7P,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAI,eAC/C,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAI,eAC/C,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAI,iBAEjD,eACE,GAAM,wCAAsC,yCAE9C,gFACA,oBACE,eAAIA,WAAW,MAAI,kBAAmB,cAAGA,WAAW,KAChD,KAAQ,mDAAiD,8BACtB,+BAEzC,SAACV,EAAS,CAACW,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,SAASJ,QAAQ,eACvE,eACE,GAAM,UAAQ,WAEhB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,mBAAiB,yhBAqBlC,eACE,MAAS,IAET,eAAIA,WAAW,MAAI,6BAA8B,cAAGA,WAAW,KAC3D,KAAQ,2DAAyD,6BAC/B,iDAExC,SAACV,EAAS,CAACW,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,SAASJ,QAAQ,eACvE,eACE,GAAM,YAAU,WAElB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,mBAAiB,2xCA4BlC,eACE,GAAM,4BAA0B,6BAElC,0BAAW,uBAAYA,WAAW,KAAG,cAA4B,iCAAiC,uBAAYA,WAAW,KAAG,aAA2B,yHACvJ,oBACE,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAI,YAAa,uBAAYA,WAAW,KAAG,QAAsB,wHAEjF,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAI,YAAa,uBAAYA,WAAW,KAAG,SAAuB,4CAGpF,SAACV,EAAS,CAACW,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,SAASJ,QAAQ,eACvE,eACE,GAAM,YAAU,WAElB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,mBAAiB,kNAetC,CAEAH,EAAWO,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/content-card-ui/Android/tutorial/listening-content-card-events.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"listening-to-content-card-events\"\n    }}>{`Listening to Content Card Events`}</h1>\n    <p>{`This tutorial explains how to listen to content card events in your application.`}</p>\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`The Messaging extension provides a way to listen to events from content cards displayed in your application. The following functions can be implemented in conformance with the `}<inlineCode parentName=\"p\">{`ContentCardUIEventListener`}</inlineCode>{` interface:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onDisplay`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onDismiss`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`onInteract`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"implement-contentcarduieventlistener\"\n    }}>{`Implement ContentCardUIEventListener`}</h2>\n    <p>{`Complete the following steps to hear content card events:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Implement the `}<a parentName=\"li\" {...{\n          \"href\": \"../public-classes/contentcarduieventlistener.md\"\n        }}>{`ContentCardUIEventListener`}</a>{` interface in your class.`}</li>\n    </ol>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Kotlin\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"kotlin\"\n    }}>{`Kotlin`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`class ContentCardCallback: ContentCardUIEventListener {\n  override fun onDisplay(aepUI: AepUI<*, *>) {\n    Log.d(\"ContentCardCallback\", \"onDisplay\")\n  }\n\n  override fun onDismiss(aepUI: AepUI<*, *>) {\n    Log.d(\"ContentCardCallback\", \"onDismiss\")\n  }\n\n  override fun onInteract(\n    aepUI: AepUI<*, *>,\n    interactionId: String?,\n    actionUrl: String?\n  ): Boolean {\n    Log.d(\"ContentCardCallback\", \"onInteract $interactionId $actionUrl\")\n    // If the url is handled here, return true\n    return false\n  }\n}\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Pass the listener to the `}<a parentName=\"li\" {...{\n          \"href\": \"../public-classes/observers/contentcardeventobserver.md\"\n        }}>{`ContentCardEventObservers`}</a>{` class when retrieving the card composable.`}</li>\n    </ol>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Kotlin\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"kotlin-1\"\n    }}>{`Kotlin`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`@Composable\nprivate fun AepContentCardList(viewModel: AepContentCardViewModel) {\n  // Create the ContentCardUIEventListener\n  val contentCardCallback = ContentCardCallback()\n  // Collect the state from ViewModel\n  val aepUiList by viewModel.aepUIList.collectAsStateWithLifecycle()\n  \n  // Create row with composables from AepUI instances\n  LazyRow {\n    items(aepUiList) { aepUI ->\n                               when (aepUI) {\n                                 is SmallImageUI -> {\n                                   val state = aepUI.getState()\n                                   if (!state.dismissed) {\n                                     SmallImageCard(\n                                       ui = aepUI,\n                                       style = smallImageCardStyleRow,\n                                       // provide the ContentCardUIEventListener as a parameter to the                                                                                   // ContentCardEventObserver\n                                       observer = ContentCardEventObserver(contentCardCallback)\n                                     )\n                                   }\n                                 }\n                               }\n                              }\n  }\n}    \n`}</code></pre>\n    <h2 {...{\n      \"id\": \"handling-actionable-urls\"\n    }}>{`Handling actionable URLs`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`onInteract`}</inlineCode>{` method provides an optional `}<inlineCode parentName=\"p\">{`actionURL`}</inlineCode>{` parameter associated with the interaction event. The return value of this method determines how the URL is handled.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Returns `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` if your application has successfully handled the URL. This indicates to the SDK that no further action is needed.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Returns `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` to allow the SDK to process the URL.`}</p>\n      </li>\n    </ul>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Kotlin\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"kotlin-2\"\n    }}>{`Kotlin`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`override fun onInteract(\n  aepUI: AepUI<*, *>,\n  interactionId: String?,\n  actionUrl: String?\n): Boolean {\n  actionUrl?.let { \n    // handle action url here\n    return true\n  }\n  return false\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","CodeBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","slots","repeat","languages","isMDXComponent"],"sourceRoot":""}