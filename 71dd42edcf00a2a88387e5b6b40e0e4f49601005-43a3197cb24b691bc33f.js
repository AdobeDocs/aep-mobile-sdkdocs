"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[1614],{15156:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return d},default:function(){return u}});var i,t=a(87462),o=a(63366),l=(a(15007),a(64983)),r=a(91515),p=["components"],d={},c=(i="Variant",function(e){return console.warn("Component "+i+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.mdx)("div",e)}),m={_frontmatter:d},s=r.Z;function u(e){var n=e.components,a=(0,o.Z)(e,p);return(0,l.mdx)(s,(0,t.Z)({},m,a,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)(c,{platform:"android",task:"add",repeat:"2",mdxType:"Variant"}),(0,l.mdx)("p",null,"Import the library:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"   import com.adobe.marketing.mobile.*;\n")),(0,l.mdx)(c,{platform:"ios-aep",task:"add",repeat:"8",mdxType:"Variant"}),(0,l.mdx)("p",null,"Add the AEPLifecycle extension and its dependency, the ",(0,l.mdx)("a",{parentName:"p",href:"../index.md"},"Mobile Core")," extension, to your project using Cocoapods."),(0,l.mdx)("p",null,"Add the following pods in your ",(0,l.mdx)("inlineCode",{parentName:"p"},"Podfile"),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-pod"},"pod 'AEPCore','~>3.0'\npod 'AEPLifecycle','~>3.0'\n")),(0,l.mdx)("p",null,"Import the Lifecycle library:"),(0,l.mdx)("h4",{id:"swift"},"Swift"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"import AEPCore\nimport AEPLifecycle\n")),(0,l.mdx)("h4",{id:"objective-c"},"Objective-C"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"@import AEPCore;\n@import AEPLifecycle;\n")),(0,l.mdx)(c,{platform:"ios-acp",task:"add",repeat:"9",mdxType:"Variant"}),(0,l.mdx)("p",null,"The Lifecycle extension is included in the Mobile Core extension. Add the ",(0,l.mdx)("a",{parentName:"p",href:"../index.md"},"Mobile Core")," extension to your project using Cocoapods."),(0,l.mdx)("p",null,"Add the following pod in your ",(0,l.mdx)("inlineCode",{parentName:"p"},"Podfile"),":"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-pod"},"pod 'ACPCore','~>2.0'\n")),(0,l.mdx)("p",null,"Import the Lifecycle library:"),(0,l.mdx)("h4",{id:"swift-1"},"Swift"),(0,l.mdx)("p",null,"In Swift, importing ",(0,l.mdx)("inlineCode",{parentName:"p"},"ACPCore")," also imports the necessary Lifecycle APIs:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"import ACPCore\n")),(0,l.mdx)("h4",{id:"objective-c-1"},"Objective-C"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},' #import "ACPLifecycle.h"\n #import "ACPCore.h"\n')),(0,l.mdx)(c,{platform:"react-native",task:"add",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"javascript"},"JavaScript"),(0,l.mdx)("p",null,"Import the Lifecycle extension"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-jsx"},"import {ACPLifecycle} from '@adobe/react-native-acpcore';\n")),(0,l.mdx)(c,{platform:"flutter",task:"add",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"dart"},"Dart"),(0,l.mdx)("p",null,"Import the Lifecycle extension"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter_acpcore/flutter_acplifecycle.dart';\n")),(0,l.mdx)(c,{platform:"cordova",task:"add",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"cordova"},"Cordova"),(0,l.mdx)("p",null,"After creating your Cordova app and adding the Android and iOS platforms, the Lifecycle extension for Cordova can be added with this command:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-cordova"},"cordova plugin add https://github.com/adobe/cordova-acpcore.git\n")),(0,l.mdx)(c,{platform:"unity",task:"add",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"c"},"C#"),(0,l.mdx)("p",null,"After importing the ",(0,l.mdx)("a",{parentName:"p",href:"https://github.com/adobe/unity-acpcore/blob/master/bin/ACPCore-0.0.1-Unity.zip"},"ACPCore.unitypackage"),", the Lifecycle extension for Unity can be added with following code in the MainScript"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},"using com.adobe.marketing.mobile;\n")),(0,l.mdx)(c,{platform:"xamarin",task:"add",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"c-1"},"C#"),(0,l.mdx)("p",null,"After adding the iOS ACPCore NuGet package or the Android ACPLifecycle NuGet package, the Lifecycle extension can be added by this import statement"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},"using Com.Adobe.Marketing.Mobile;\n")),(0,l.mdx)(c,{platform:"android",task:"register",repeat:"8",mdxType:"Variant"}),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Register the Lifecycle extension:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'public class TargetApp extends Application {\n\n@Override\npublic void onCreate() {\n    super.onCreate();\n    MobileCore.setApplication(this);\n\n    try {\n        Lifecycle.registerExtension();\n        // register other extensions\n        MobileCore.start(new AdobeCallback () {\n            @Override\n            public void call(Object o) {\n                MobileCore.configureWithAppID("yourAppId");\n            }\n        });    \n    } catch (Exception e) {\n        //Log the exception\n    }\n}\n}\n')),(0,l.mdx)("ol",{start:2},(0,l.mdx)("li",{parentName:"ol"},"In the ",(0,l.mdx)("inlineCode",{parentName:"li"},"onResume")," function, start the lifecycle data collection:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"    @Override  \n    public void onResume() {  \n        MobileCore.setApplication(getApplication());\n        MobileCore.lifecycleStart(null);\n    }\n")),(0,l.mdx)("p",null,"Setting the application is only necessary on activities that are entry points for your application. However, setting the application on each Activity has no negative impact and ensures that the SDK always has the necessary reference to your application. We recommend that you call ",(0,l.mdx)("inlineCode",{parentName:"p"},"setApplication"),"in each of your activities."),(0,l.mdx)("ol",{start:3},(0,l.mdx)("li",{parentName:"ol"},"In the ",(0,l.mdx)("inlineCode",{parentName:"li"},"onPause")," function, pause the lifecycle data collection:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"    @Override\n    public void onPause() {\n        MobileCore.lifecyclePause();\n    }\n")),(0,l.mdx)("p",null,"To ensure accurate session and crash reporting, this call must be added to every activity."),(0,l.mdx)(c,{platform:"ios-aep",task:"register",repeat:"32",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"swift-2"},"Swift"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Register the Lifecycle extension with the SDK Core by adding the following to your app's ",(0,l.mdx)("inlineCode",{parentName:"li"},"application:didFinishLaunchingWithOptions:")," delegate method. This will register the extension with Core and begin Lifecycle event processing:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    MobileCore.registerExtensions([Lifecycle.self, ...], {\n        ...\n    }\n}\n")),(0,l.mdx)("ol",{start:2},(0,l.mdx)("li",{parentName:"ol"},"Start Lifecycle data collection by calling ",(0,l.mdx)("inlineCode",{parentName:"li"},"lifecycleStart:")," from within the callback of the ",(0,l.mdx)("inlineCode",{parentName:"li"},"MobileCore.registerExtensions")," method in your app's ",(0,l.mdx)("inlineCode",{parentName:"li"},"application:didFinishLaunchingWithOptions:")," delegate method.")),(0,l.mdx)("p",null,"If your iOS application supports background capabilities, your ",(0,l.mdx)("inlineCode",{parentName:"p"},"application:didFinishLaunchingWithOptions:")," method might be called when iOS launches your app in the background. If you do not want background launches to count towards your lifecycle metrics, then ",(0,l.mdx)("inlineCode",{parentName:"p"},"lifecycleStart:")," should only be called when the application state is not equal to ",(0,l.mdx)("inlineCode",{parentName:"p"},"UIApplicationStateBackground"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n    let appState = application.applicationState            \n    MobileCore.registerExtensions([Lifecycle.self, ...], {\n        if appState != .background {\n        // only start lifecycle if the application is not in the background\n        MobileCore.lifecycleStart(additionalContextData: nil)\n        }\n    }\n}\n")),(0,l.mdx)("ol",{start:3},(0,l.mdx)("li",{parentName:"ol"},"When launched, if your app is resuming from a backgrounded state, iOS might call your ",(0,l.mdx)("inlineCode",{parentName:"li"},"applicationWillEnterForeground:")," delegate method. You also need to call ",(0,l.mdx)("inlineCode",{parentName:"li"},"lifecycleStart:"),", but this time you do not need all of the supporting code that you used in ",(0,l.mdx)("inlineCode",{parentName:"li"},"application:didFinishLaunchingWithOptions:"),":")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"func applicationWillEnterForeground(_ application: UIApplication) {    \n    MobileCore.lifecycleStart(additionalContextData: nil)\n}\n")),(0,l.mdx)("p",null,"In iOS 13 and later, for a scene-based application, use the ",(0,l.mdx)("inlineCode",{parentName:"p"},"UISceneDelegate"),"'s ",(0,l.mdx)("inlineCode",{parentName:"p"},"sceneWillEnterForeground")," method as follows:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"func sceneWillEnterForeground(_ scene: UIScene) {\n    MobileCore.lifecycleStart(additionalContextData: nil)\n}\n")),(0,l.mdx)("p",null,"For more information on handling foregrounding applications with Scenes, refer to Apple's documentation ",(0,l.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_foreground"},"here")),(0,l.mdx)("ol",{start:4},(0,l.mdx)("li",{parentName:"ol"},"When the app enters the background, pause Lifecycle data collection from your app's ",(0,l.mdx)("inlineCode",{parentName:"li"},"applicationDidEnterBackground:")," delegate method:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"func applicationDidEnterBackground(_ application: UIApplication) {    \n    MobileCore.lifecyclePause()\n}\n")),(0,l.mdx)("p",null,"In iOS 13 and later, for a scene-based application, use the ",(0,l.mdx)("inlineCode",{parentName:"p"},"UISceneDelegate"),"'s ",(0,l.mdx)("inlineCode",{parentName:"p"},"sceneDidEnterBackground")," method as follows:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"func sceneDidEnterBackground(_ scene: UIScene) {\n    MobileCore.lifecyclePause()\n}\n")),(0,l.mdx)("p",null,"For more information on handling backgrounding applications with Scenes, refer to Apple's documentation ",(0,l.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background"},"here")),(0,l.mdx)("h4",{id:"objective-c-2"},"Objective-C"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Register the Lifecycle extension with the SDK Core by adding the following to your app's ",(0,l.mdx)("inlineCode",{parentName:"li"},"application:didFinishLaunchingWithOptions:")," delegate method. This will register the extension with Core and begin Lifecycle event processing:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    // register the lifecycle extension\n[AEPMobileCore registerExtensions:@[AEPMobileLifecycle.class, ...] completion:^{\n    ...\n}];\nreturn YES;\n}\n")),(0,l.mdx)("ol",{start:2},(0,l.mdx)("li",{parentName:"ol"},"Start Lifecycle data collection by calling ",(0,l.mdx)("inlineCode",{parentName:"li"},"lifecycleStart:")," from within the callback of the ",(0,l.mdx)("inlineCode",{parentName:"li"},"AEPMobileCore::registerExtensions:")," method in your app's ",(0,l.mdx)("inlineCode",{parentName:"li"},"application:didFinishLaunchingWithOptions:")," delegate method.")),(0,l.mdx)("p",null,"If your iOS application supports background capabilities, your ",(0,l.mdx)("inlineCode",{parentName:"p"},"application:didFinishLaunchingWithOptions:")," method might be called when iOS launches your app in the background. If you do not want background launches to count towards your lifecycle metrics, then ",(0,l.mdx)("inlineCode",{parentName:"p"},"lifecycleStart:")," should only be called when the application state is not equal to ",(0,l.mdx)("inlineCode",{parentName:"p"},"UIApplicationStateBackground"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (BOOL) application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    // register the lifecycle extension, and begin event processing with Core\n    const UIApplicationState appState = application.applicationState;\n    [AEPMobileCore registerExtensions:@[AEPMobileLifecycle.class, ...] completion:^{\n    // only start lifecycle if the application is not in the background\n    if (appState != UIApplicationStateBackground) {\n        [AEPMobileCore lifecycleStart:nil];\n    }\n    }];\n}\n")),(0,l.mdx)("ol",{start:3},(0,l.mdx)("li",{parentName:"ol"},"When launched, if your app is resuming from a backgrounded state, iOS might call your ",(0,l.mdx)("inlineCode",{parentName:"li"},"applicationWillEnterForeground:")," delegate method. You also need to call ",(0,l.mdx)("inlineCode",{parentName:"li"},"lifecycleStart:"),", but this time you do not need all of the supporting code that you used in ",(0,l.mdx)("inlineCode",{parentName:"li"},"application:didFinishLaunchingWithOptions:"),":")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (void) applicationWillEnterForeground:(UIApplication *)application {\n    [AEPMobileCore lifecycleStart:nil];\n}\n")),(0,l.mdx)("p",null,"In iOS 13 and later, for a scene-based application, use the ",(0,l.mdx)("inlineCode",{parentName:"p"},"UISceneDelegate"),"'s ",(0,l.mdx)("inlineCode",{parentName:"p"},"sceneWillEnterForeground")," method as follows:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (void) sceneWillEnterForeground:(UIScene *)scene {\n    [AEPMobileCore lifecycleStart:nil];\n}\n")),(0,l.mdx)("p",null,"For more information on handling foregrounding applications with Scenes, refer to Apple's documentation ",(0,l.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_foreground"},"here")),(0,l.mdx)("ol",{start:4},(0,l.mdx)("li",{parentName:"ol"},"When the app enters the background, pause Lifecycle data collection from your app's ",(0,l.mdx)("inlineCode",{parentName:"li"},"applicationDidEnterBackground:")," delegate method:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (void) applicationDidEnterBackground:(UIApplication *)application {\n    [AEPMobileCore lifecyclePause];\n}\n")),(0,l.mdx)("p",null,"In iOS 13 and later, for a scene-based application, use the ",(0,l.mdx)("inlineCode",{parentName:"p"},"UISceneDelegate"),"'s ",(0,l.mdx)("inlineCode",{parentName:"p"},"sceneDidEnterBackground")," method as follows:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (void) sceneDidEnterBackground:(UIScene *)scene {\n    [AEPMobileCore lifecyclePause];\n}\n")),(0,l.mdx)("p",null,"For more information on handling backgrounding applications with Scenes, refer to Apple's documentation ",(0,l.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background"},"here")),(0,l.mdx)(c,{platform:"ios-acp",task:"register",repeat:"32",mdxType:"Variant"}),(0,l.mdx)("h4",{id:"swift-3"},"Swift"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Register the Lifecycle extension with the SDK Core by adding the following to your app's ",(0,l.mdx)("inlineCode",{parentName:"li"},"application:didFinishLaunchingWithOptions:")," delegate method:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    // register the lifecycle extension\n    ACPLifecycle.registerExtension();\n}\n")),(0,l.mdx)("ol",{start:2},(0,l.mdx)("li",{parentName:"ol"},"Start Lifecycle data collection by calling ",(0,l.mdx)("inlineCode",{parentName:"li"},"lifecycleStart:")," from within the callback of the ",(0,l.mdx)("inlineCode",{parentName:"li"},"ACPCore::start:")," method in your app's ",(0,l.mdx)("inlineCode",{parentName:"li"},"application:didFinishLaunchingWithOptions:")," delegate method.")),(0,l.mdx)("p",null,"If your iOS application supports background capabilities, your ",(0,l.mdx)("inlineCode",{parentName:"p"},"application:didFinishLaunchingWithOptions:")," method might be called when iOS launches your app in the background. If you do not want background launches to count towards your lifecycle metrics, then ",(0,l.mdx)("inlineCode",{parentName:"p"},"lifecycleStart:")," should only be called when the application state is not equal to ",(0,l.mdx)("inlineCode",{parentName:"p"},"UIApplicationStateBackground"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool {\n    // register the lifecycle extension\n    ACPLifecycle.registerExtension();\n\n    let appState = application.applicationState;            \n    ACPCore.start {\n        // only start lifecycle if the application is not in the background    \n        if appState != .background {\n            ACPCore.lifecycleStart(nil)\n        }    \n    }    \n}\n")),(0,l.mdx)("ol",{start:3},(0,l.mdx)("li",{parentName:"ol"},"When launched, if your app is resuming from a backgrounded state, iOS might call your ",(0,l.mdx)("inlineCode",{parentName:"li"},"applicationWillEnterForeground:")," delegate method. You also need to call ",(0,l.mdx)("inlineCode",{parentName:"li"},"lifecycleStart:"),", but this time you do not need all of the supporting code that you used in ",(0,l.mdx)("inlineCode",{parentName:"li"},"application:didFinishLaunchingWithOptions:"),":")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"func applicationWillEnterForeground(_ application: UIApplication) {    \n    ACPCore.lifecycleStart(nil)\n}\n")),(0,l.mdx)("p",null,"In iOS 13 and later, for a scene-based application, use the ",(0,l.mdx)("inlineCode",{parentName:"p"},"UISceneDelegate"),"'s ",(0,l.mdx)("inlineCode",{parentName:"p"},"sceneWillEnterForeground")," method as follows:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"func sceneWillEnterForeground(_ scene: UIScene) {\n    ACPCore.lifecycleStart(nil)\n}\n")),(0,l.mdx)("p",null,"For more information on handling foregrounding applications with Scenes, refer to Apple's documentation ",(0,l.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_foreground"},"here")),(0,l.mdx)("ol",{start:4},(0,l.mdx)("li",{parentName:"ol"},"When the app enters the background, pause Lifecycle data collection from your app's ",(0,l.mdx)("inlineCode",{parentName:"li"},"applicationDidEnterBackground:")," delegate method:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"func applicationDidEnterBackground(_ application: UIApplication) {    \n    ACPCore.lifecyclePause()\n}\n")),(0,l.mdx)("p",null,"In iOS 13 and later, for a scene-based application, use the ",(0,l.mdx)("inlineCode",{parentName:"p"},"UISceneDelegate"),"'s ",(0,l.mdx)("inlineCode",{parentName:"p"},"sceneDidEnterBackground")," method as follows:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},"func sceneDidEnterBackground(_ scene: UIScene) {\n    ACPCore.lifecyclePause()\n}\n")),(0,l.mdx)("p",null,"For more information on handling backgrounding applications with Scenes, refer to Apple's documentation ",(0,l.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background"},"here")),(0,l.mdx)("h4",{id:"objective-c-3"},"Objective-C"),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Register the Lifecycle extension with the SDK Core by adding the following to your app's ",(0,l.mdx)("inlineCode",{parentName:"li"},"application:didFinishLaunchingWithOptions:")," delegate method:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    // register the lifecycle extension\n[ACPLifecycle registerExtension];\n    return YES;\n}\n")),(0,l.mdx)("ol",{start:2},(0,l.mdx)("li",{parentName:"ol"},"Start Lifecycle data collection by calling ",(0,l.mdx)("inlineCode",{parentName:"li"},"lifecycleStart:")," from within the callback of the ",(0,l.mdx)("inlineCode",{parentName:"li"},"ACPCore::start:")," method in your app's ",(0,l.mdx)("inlineCode",{parentName:"li"},"application:didFinishLaunchingWithOptions:")," delegate method.")),(0,l.mdx)("p",null,"If your iOS application supports background capabilities, your ",(0,l.mdx)("inlineCode",{parentName:"p"},"application:didFinishLaunchingWithOptions:")," method might be called when iOS launches your app in the background. If you do not want background launches to count towards your lifecycle metrics, then ",(0,l.mdx)("inlineCode",{parentName:"p"},"lifecycleStart:")," should only be called when the application state is not equal to ",(0,l.mdx)("inlineCode",{parentName:"p"},"UIApplicationStateBackground"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (BOOL) application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    // register the lifecycle extension\n    [ACPLifecycle registerExtension];\n\n    const UIApplicationState appState = application.applicationState;\n    [ACPCore start:^{\n        // only start lifecycle if the application is not in the background\n        if (appState != UIApplicationStateBackground) {\n            [ACPCore lifecycleStart:nil];\n        }\n    }];\n}\n")),(0,l.mdx)("ol",{start:3},(0,l.mdx)("li",{parentName:"ol"},"When launched, if your app is resuming from a backgrounded state, iOS might call your ",(0,l.mdx)("inlineCode",{parentName:"li"},"applicationWillEnterForeground:")," delegate method. You also need to call ",(0,l.mdx)("inlineCode",{parentName:"li"},"lifecycleStart:"),", but this time you do not need all of the supporting code that you used in ",(0,l.mdx)("inlineCode",{parentName:"li"},"application:didFinishLaunchingWithOptions:"),":")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (void) applicationWillEnterForeground:(UIApplication *)application {\n    [ACPCore lifecycleStart:nil];\n}\n")),(0,l.mdx)("p",null,"In iOS 13 and later, for a scene-based application, use the ",(0,l.mdx)("inlineCode",{parentName:"p"},"UISceneDelegate"),"'s ",(0,l.mdx)("inlineCode",{parentName:"p"},"sceneWillEnterForeground")," method as follows:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (void) sceneWillEnterForeground:(UIScene *)scene {\n    [ACPCore lifecycleStart:nil];\n}\n")),(0,l.mdx)("p",null,"For more information on handling foregrounding applications with Scenes, refer to Apple's documentation ",(0,l.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_foreground?language=objc"},"here")),(0,l.mdx)("ol",{start:4},(0,l.mdx)("li",{parentName:"ol"},"When the app enters the background, pause Lifecycle data collection from your app's ",(0,l.mdx)("inlineCode",{parentName:"li"},"applicationDidEnterBackground:")," delegate method:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (void) applicationDidEnterBackground:(UIApplication *)application {\n    [ACPCore lifecyclePause];\n}\n")),(0,l.mdx)("p",null,"In iOS 13 and later, for a scene-based application, use the ",(0,l.mdx)("inlineCode",{parentName:"p"},"UISceneDelegate"),"'s ",(0,l.mdx)("inlineCode",{parentName:"p"},"sceneDidEnterBackground")," method as follows:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-objectivec"},"- (void) sceneDidEnterBackground:(UIScene *)scene {\n    [ACPCore lifecyclePause];\n}\n")),(0,l.mdx)("p",null,"For more information on handling backgrounding applications with Scenes, refer to Apple's documentation ",(0,l.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/uikit/app_and_environment/scenes/preparing_your_ui_to_run_in_the_background?language=objc"},"here")),(0,l.mdx)(c,{platform:"react-native",task:"register",repeat:"2",mdxType:"Variant"}),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Registering the extension with Core")),(0,l.mdx)("p",null,"When using React Native, registering Lifecycle with Mobile Core should be done in native code which is shown under the Android and iOS (ACP 2.x) tabs."),(0,l.mdx)(c,{platform:"cordova",task:"register",repeat:"1",mdxType:"Variant"}),(0,l.mdx)("p",null,"When using Cordova, registering Lifecycle with Mobile Core must be done in native code which is shown under the Android and iOS tabs."),(0,l.mdx)(c,{platform:"unity",task:"register",repeat:"3",mdxType:"Variant"}),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Starting and Pausing a lifecycle event")," "),(0,l.mdx)("p",null,"Add the OnApplicationPause in the MainScript with the following code:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},'private void OnApplicationPause(bool pauseStatus)\n{\n  if (pauseStatus)\n  {\n    ACPCore.LifecyclePause();\n  }\n  else\n  {\n    var cdata = new Dictionary<string, string>();\n    cdata.Add("launch.data", "added");\n    ACPCore.LifecycleStart(cdata);\n  }\n}\n')),(0,l.mdx)(c,{platform:"xamarin",task:"register",repeat:"19",mdxType:"Variant"}),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"iOS")),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Register the Lifecycle extension with the SDK Core by adding the following to your app's ",(0,l.mdx)("inlineCode",{parentName:"li"},"FinishedLaunching:")," delegate method:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},"public override bool FinishedLaunching(UIApplication app, NSDictionary options)\n{\n    ACPLifecycle.RegisterExtension();\n    return base.FinishedLaunching(app, options);\n}\n")),(0,l.mdx)("ol",{start:2},(0,l.mdx)("li",{parentName:"ol"},"Start Lifecycle data collection by calling ",(0,l.mdx)("inlineCode",{parentName:"li"},"LifecycleStart:")," from within the callback of the ",(0,l.mdx)("inlineCode",{parentName:"li"},"ACPCore::start:")," method in your app's ",(0,l.mdx)("inlineCode",{parentName:"li"},"FinishedLaunching:")," delegate method.")),(0,l.mdx)("p",null,"If your iOS application supports background capabilities, your ",(0,l.mdx)("inlineCode",{parentName:"p"},"FinishedLaunching:")," method might be called when iOS launches your app in the background. If you do not want background launches to count towards your lifecycle metrics, then ",(0,l.mdx)("inlineCode",{parentName:"p"},"LifecycleStart:")," should only be called when the application state is not equal to ",(0,l.mdx)("inlineCode",{parentName:"p"},"UIApplicationState.Background"),"."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},"public override bool FinishedLaunching(UIApplication app, NSDictionary options)\n{\n    ACPLifecycle.RegisterExtension();\n\n    // only start lifecycle if the application is not in the background\n    var appstate = app.ApplicationState;\n    if(appstate != UIApplicationState.Background)\n    {\n    ACPCore.LifecycleStart(null);\n    }\n    return base.FinishedLaunching(app, options);\n}\n")),(0,l.mdx)("ol",{start:3},(0,l.mdx)("li",{parentName:"ol"},"When launched, if your app is resuming from a backgrounded state, iOS might call your ",(0,l.mdx)("inlineCode",{parentName:"li"},"WillEnterForeground:")," delegate method. You also need to call ",(0,l.mdx)("inlineCode",{parentName:"li"},"LifecycleStart:"),", but this time you do not need all of the supporting code that you used in ",(0,l.mdx)("inlineCode",{parentName:"li"},"FinishedLaunching:"),":")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},"public override void WillEnterForeground(UIApplication uiApplication)\n{\n    base.WillEnterForeground(uiApplication);\n    ACPCore.LifecycleStart(null);\n}\n")),(0,l.mdx)("ol",{start:4},(0,l.mdx)("li",{parentName:"ol"},"When the app enters the background, pause Lifecycle data collection from your app's ",(0,l.mdx)("inlineCode",{parentName:"li"},"DidEnterBackground:")," delegate method:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},"public override void DidEnterBackground(UIApplication uiApplication)\n{\n    base.DidEnterBackground(uiApplication);\n    ACPCore.LifecyclePause();\n}\n")),(0,l.mdx)("p",null,(0,l.mdx)("strong",{parentName:"p"},"Android")),(0,l.mdx)("ol",null,(0,l.mdx)("li",{parentName:"ol"},"Register the Lifecycle extension:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},"protected override void OnCreate(Bundle savedInstanceState)\n{\n    base.OnCreate(savedInstanceState);\nLoadApplication(new App());\n    ACPCore.Application = this.Application;\n    ACPLifecycle.RegisterExtension();\n}\n")),(0,l.mdx)("ol",{start:2},(0,l.mdx)("li",{parentName:"ol"},"In the ",(0,l.mdx)("inlineCode",{parentName:"li"},"onResume")," function, start the lifecycle data collection:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},"protected override void OnResume()\n{\n    base.OnResume();\n    ACPCore.LifecycleStart(null);\n}\n")),(0,l.mdx)("p",null,"Setting the application is only necessary on activities that are entry points for your application. However, setting the application on each Activity has no negative impact and ensures that the SDK always has the necessary reference to your application. You should set the application (",(0,l.mdx)("inlineCode",{parentName:"p"},"ACPCore.Application = this.Application;"),") in each of your activities."),(0,l.mdx)("ol",{start:3},(0,l.mdx)("li",{parentName:"ol"},"In the ",(0,l.mdx)("inlineCode",{parentName:"li"},"onPause")," function, pause the lifecycle data collection:")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-csharp"},"protected override void OnPause()\n{\n    base.OnPause();\n    ACPCore.LifecyclePause();\n}\n")),(0,l.mdx)("p",null,"To ensure accurate session and crash reporting, this call must be added to every activity."))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=71dd42edcf00a2a88387e5b6b40e0e4f49601005-43a3197cb24b691bc33f.js.map