"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[9586,4656],{22572:function(e,a,n){n.r(a),n.d(a,{_frontmatter:function(){return m},default:function(){return h}});var t,s=n(87462),i=n(63366),l=(n(15007),n(64983)),o=n(91515),r=n(80599),p=["components"],m={},d=(t="TabsBlock",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.mdx)("div",e)}),c={_frontmatter:m},g=o.Z;function h(e){var a=e.components,n=(0,i.Z)(e,p);return(0,l.mdx)(g,(0,s.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"native-handling-of-javascript-events"},"Native handling of JavaScript events"),(0,l.mdx)("p",null,"You can handle events from in-app message interactions natively within your application by completing the following steps:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#implement-and-assign-a-messagingdelegate"},"Implement and assign a ",(0,l.mdx)("inlineCode",{parentName:"a"},"MessagingDelegate"))),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#register-a-javascript-handler-for-your-in-app-message"},"Register a JavaScript handler for your In-App Message")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"#post-the-javascript-message-from-your-in-app-message"},"Post the JavaScript message from your In-App Message"))),(0,l.mdx)("h2",{id:"implement-and-assign-a-messagingdelegate"},"Implement and assign a ",(0,l.mdx)("inlineCode",{parentName:"h2"},"MessagingDelegate")),(0,l.mdx)("p",null,"To register a JavaScript event handler with a ",(0,l.mdx)("inlineCode",{parentName:"p"},"Message")," object, you will first need to implement and set a ",(0,l.mdx)("inlineCode",{parentName:"p"},"MessagingDelegate"),"."),(0,l.mdx)("p",null,"For more detailed instructions on implementing and using a MessagingDelegate, please read the ",(0,l.mdx)("a",{parentName:"p",href:"./messaging-delegate.md"},"tutorial on using MessagingDelegate"),"."),(0,l.mdx)("h2",{id:"register-a-javascript-handler-for-your-in-app-message"},"Register a JavaScript handler for your In-App Message"),(0,l.mdx)(d,{orientation:"horizontal",slots:"heading, content",repeat:"2",mdxType:"TabsBlock"}),(0,l.mdx)("p",null,"Android"),(0,l.mdx)(r.default,{query:"platform=android&function=register",mdxType:"Tabs"}),(0,l.mdx)("p",null,"iOS"),(0,l.mdx)(r.default,{query:"platform=ios&function=register",mdxType:"Tabs"}),(0,l.mdx)("h2",{id:"post-the-javascript-message-from-your-in-app-message"},"Post the JavaScript message from your In-App Message"),(0,l.mdx)("p",null,"Now that the in-app message has been displayed, the final step is to post the JavaScript message."),(0,l.mdx)("p",null,"Continuing from the previous example, the developer is going to post the ",(0,l.mdx)("inlineCode",{parentName:"p"},"myInappCallback")," message from their HTML, which will in turn call the handler previously configured:"),(0,l.mdx)("h3",{id:"html"},"HTML"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-html"},'<html>\n    <head>\n        <script type="text/javascript">\n            function callNative(action) {\n                try {\n                    // the name of the message handler is the same name that must be registered in native code.\n                    // in this case the message name is "myInappCallback"\n                    webkit.messageHandlers.myInappCallback.postMessage(action);\n                } catch(err) {\n                    console.log(\'The native context does not exist yet\'); }\n                }\n            <\/script>\n    </head>\n    <body>\n        <button onclick="callNative(\'native callbacks are cool!\')">Native callback!</button>\n    </body>\n</html>\n')),(0,l.mdx)("p",null,"(The above HTML is not representative of a valid in-app message, and is intended only to demonstrate how to post the JavaScript message)."),(0,l.mdx)("p",null,"When the user clicks the button inside of this in-app message, the handler configured in the previous step will be called. The handler will send an Experience Event tracking the interaction, and print the following message to the console:"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-text"},"JavaScript body passed to native callback: native callbacks are cool!\n")),(0,l.mdx)("h2",{id:"examples"},"Examples"),(0,l.mdx)("p",null,"The test apps in this repository demonstrate calling native code from JavaScript:"),(0,l.mdx)("ul",null,(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"https://github.com/adobe/aepsdk-messaging-ios/tree/main/TestApps/MessagingDemoApp"},"Swift")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"https://github.com/adobe/aepsdk-messaging-ios/tree/main/TestApps/MessagingDemoAppObjC"},"Objective-C")),(0,l.mdx)("li",{parentName:"ul"},(0,l.mdx)("a",{parentName:"li",href:"https://github.com/adobe/aepsdk-messaging-android/tree/main/code/app"},"Java"))))}h.isMDXComponent=!0},80599:function(e,a,n){n.r(a),n.d(a,{_frontmatter:function(){return p},default:function(){return g}});var t,s=n(87462),i=n(63366),l=(n(15007),n(64983)),o=n(91515),r=["components"],p={},m=(t="Variant",function(e){return console.warn("Component "+t+" was not imported, exported, or provided by MDXProvider as global scope"),(0,l.mdx)("div",e)}),d={_frontmatter:p},c=o.Z;function g(e){var a=e.components,n=(0,i.Z)(e,r);return(0,l.mdx)(c,(0,s.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,l.mdx)(m,{platform:"android",function:"register",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("p",null,"In the ",(0,l.mdx)("inlineCode",{parentName:"p"},"shouldShowMessage")," function of the ",(0,l.mdx)("inlineCode",{parentName:"p"},"MessagingDelegate"),", call ",(0,l.mdx)("inlineCode",{parentName:"p"},"public void handleJavascriptMessage(final String name, final AdobeCallback<String> callback)")," to register your handler."),(0,l.mdx)("p",null,"The name of the message you intend to pass from the JavaScript side should be specified in the first parameter."),(0,l.mdx)("p",null,"The following example shows a handler that dispatches a ",(0,l.mdx)("inlineCode",{parentName:"p"},"decisioning.propositionInteract")," Experience Event natively when the JavaScript of the in-app message posts a ",(0,l.mdx)("inlineCode",{parentName:"p"},"myInappCallback")," message:"),(0,l.mdx)("h4",{id:"java"},"Java"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'@Override\npublic boolean shouldShowMessage(FullscreenMessage fullscreenMessage) {\n  Message message = (Message) fullscreenMessage.getParent();\n  \n  // in-line handling of JavaScript calls\n  message.handleJavascriptMessage("myInappCallback", new AdobeCallback<String>() {\n    @Override\n    public void call(String content) {\n      System.out.println("JavaScript body passed to native callback: " + content);\n      message.track(content, MessagingEdgeEventType.IN_APP_INTERACT);\n    }\n  });\n}\n')),(0,l.mdx)(m,{platform:"ios",function:"register",repeat:"5",mdxType:"Variant"}),(0,l.mdx)("p",null,"In the ",(0,l.mdx)("inlineCode",{parentName:"p"},"shouldShowMessage")," function of the ",(0,l.mdx)("inlineCode",{parentName:"p"},"MessagingDelegate"),", call ",(0,l.mdx)("a",{parentName:"p",href:"./class-message.md#handlejavascriptmessage_withhandler"},(0,l.mdx)("inlineCode",{parentName:"a"},"handleJavascriptMessage(_:withHandler)"))," to register your handler."),(0,l.mdx)("p",null,"The name of the message you intend to pass from the JavaScript side should be specified in the first parameter."),(0,l.mdx)("p",null,"The following example shows a handler that dispatches a ",(0,l.mdx)("inlineCode",{parentName:"p"},"decisioning.propositionInteract")," Experience Event natively when the JavaScript of the in-app message posts a ",(0,l.mdx)("inlineCode",{parentName:"p"},"myInappCallback")," message:"),(0,l.mdx)("h4",{id:"swift"},"Swift"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-swift"},'func shouldShowMessage(message: Showable) -> Bool {    \n    let fullscreenMessage = message as? FullscreenMessage\n    let message = fullscreenMessage?.parent\n\n    // in-line handling of JavaScript calls\n    message?.handleJavascriptMessage("myInappCallback") { content\n\n        print("JavaScript body passed to native callback: \\(content ?? "empty")")\n\n        message?.track(content as? String, withEdgeEventType: .inappInteract)\n    }\n\n    return true\n}\n')))}g.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-edge-adobe-journey-optimizer-in-app-message-tutorials-native-from-javascript-md-72dea42e31eb007d75d9.js.map