{"version":3,"file":"component---src-pages-home-base-assurance-tabs-index-md-4ab4713815366f48c51d.js","mappings":"4OAQsBA,E,mFADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAIQ,UAJA,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EAClB,GAEMG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGP,GAAK,YAER,OAAO,SAACI,GAAS,UAAKD,EAAiBH,EAAK,CAAEO,WAAYA,EAAYC,QAAQ,eAI5E,SAACT,EAAO,CAACU,SAAS,iBAAiBC,KAAK,MAAMC,OAAO,IAAIH,QAAQ,aACjE,gHACA,qBAAK,iBAAMI,WAAW,MAClB,UAAa,mBAAiB,qLAKlC,SAAC,UAAM,CAACC,MAAM,2DAA2DL,QAAQ,YACjF,SAACT,EAAO,CAACU,SAAS,iBAAiBC,KAAK,MAAMC,OAAO,IAAIH,QAAQ,aACjE,gHACA,qBAAK,iBAAMI,WAAW,MAClB,UAAa,iBAAe,kLAKhC,SAAC,UAAM,CAACC,MAAM,2DAA2DL,QAAQ,YACjF,SAACT,EAAO,CAACU,SAAS,WAAWC,KAAK,MAAMC,OAAO,IAAIH,QAAQ,aAC3D,gHAAiG,uBAAYI,WAAW,KAAG,WAAyB,MACpJ,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBAAgB,kHAQjC,SAACb,EAAO,CAACU,SAAS,UAAUC,KAAK,sBAAsBC,OAAO,IAAIH,QAAQ,aAC1E,6MAA8L,cAAGI,WAAW,IACxM,KAAQ,iEAA+D,uDACX,iEAAiE,uBAAYA,WAAW,KAAG,gBAA8B,SAAS,uBAAYA,WAAW,KAAG,kBAAgC,qBAAqB,uBAAYA,WAAW,KAAG,qBAAmC,wFAAwF,cAAGA,WAAW,IAChb,KAAQ,0CAAwC,4CAEpD,SAACb,EAAO,CAACU,SAAS,MAAMC,KAAK,sBAAsBC,OAAO,KAAKH,QAAQ,aACvE,0BAAW,cAAGI,WAAW,IACrB,KAAQ,mCAAiC,gBACpB,qQACzB,eACE,GAAM,SAAO,UAEf,mBAAG,mBAAQA,WAAW,KAAG,aACzB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBAAgB,wMAMjC,kFAAmE,uBAAYA,WAAW,KAAG,mBAAiC,OAAO,uBAAYA,WAAW,KAAG,6BAA2C,wBAC1M,qBAAK,iBAAMA,WAAW,MAClB,UAAa,kBAAgB,unBAejC,eACE,GAAM,eAAa,gBAErB,mBAAG,mBAAQA,WAAW,KAAG,YACzB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBAAqB,2CAGtC,mBAAG,mBAAQA,WAAW,KAAG,aACzB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBAAqB,kOAMtC,kFAAmE,uBAAYA,WAAW,KAAG,mBAAiC,OAAO,uBAAYA,WAAW,KAAG,6BAA2C,wBAC1M,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBAAqB,4dAc1C,CAEAN,EAAWQ,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/home/base/assurance/tabs/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Alerts from '/src/pages/resources/alerts.md';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Variant platform=\"android-kotlin\" task=\"add\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`Add the required dependencies to your project by including them in the app's Gradle file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`implementation(platform(\"com.adobe.marketing.mobile:sdk-bom:3.+\"))\nimplementation(\"com.adobe.marketing.mobile:core\")\nimplementation(\"com.adobe.marketing.mobile:assurance\")\n`}</code></pre>\n    <Alerts query=\"platform=android-gradle&componentClass=InlineNestedAlert\" mdxType=\"Alerts\" />\n    <Variant platform=\"android-groovy\" task=\"add\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`Add the required dependencies to your project by including them in the app's Gradle file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`implementation platform('com.adobe.marketing.mobile:sdk-bom:3.+')\nimplementation 'com.adobe.marketing.mobile:core'\nimplementation 'com.adobe.marketing.mobile:assurance'\n`}</code></pre>\n    <Alerts query=\"platform=android-gradle&componentClass=InlineNestedAlert\" mdxType=\"Alerts\" />\n    <Variant platform=\"ios-pods\" task=\"add\" repeat=\"2\" mdxType=\"Variant\" />\n    <p>{`Add the required dependencies to your project using CocoaPods. Add following pods in your `}<inlineCode parentName=\"p\">{`Podfile`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`use_frameworks!\n\ntarget 'YourTargetApp' do\n  pod 'AEPCore','~> 5.0'\n  pod 'AEPAssurance','~> 5.0'\nend\n`}</code></pre>\n    <Variant platform=\"android\" task=\"implement-assurance\" repeat=\"1\" mdxType=\"Variant\" />\n    <p>{`Deep linking is the best way to connnect to an Assurance session when using the Android SDK. Assurance SDK on Android is already setup to handle incoming intents to your app. You can `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.android.com/training/app-links/deep-linking\"\n      }}>{`add an intent filter for incoming links in your app`}</a>{` to complete the deep link configuration. The combination of `}<inlineCode parentName=\"p\">{`android:host`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`android:scheme`}</inlineCode>{` (in the form of `}<inlineCode parentName=\"p\">{`<host>://<scheme>`}</inlineCode>{`) for this intent filter will serve as the Base URL while creating a session in the `}<a parentName=\"p\" {...{\n        \"href\": \"https://experience.adobe.com/assurance\"\n      }}>{`Adobe Experience Platform Assurance UI`}</a></p>\n    <Variant platform=\"ios\" task=\"implement-assurance\" repeat=\"13\" mdxType=\"Variant\" />\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"./api-reference.md#startsession\"\n      }}>{`startSession`}</a>{` API needs to be called to begin an Adobe Experience Platform Assurance session. You should call this API when the app launches with a URL (see code snippet below for sample usage). When called, SDK displays a PIN authentication overlay to begin a session.`}</p>\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {\n        Assurance.startSession(url: url)\n        return true\n    }\n`}</code></pre>\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`scene(_:openURLContexts:)`}</inlineCode>{` method as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`    func scene(_ scene: UIScene, openURLContexts URLContexts: Set<UIOpenURLContext>) {\n        // Called when the app in background is opened with a deep link.\n        if let deepLinkURL = URLContexts.first?.url {\n            Assurance.startSession(url: deepLinkURL)\n        }\n    }\n\n    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n        // Called when the app launches with the deep link\n        if let deepLinkURL = connectionOptions.urlContexts.first?.url {\n            Assurance.startSession(url: deepLinkURL)\n        }\n    }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`static func startSession(url: URL?)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (BOOL)application:(UIApplication *)app openURL:(nonnull NSURL *)url options:(nonnull NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {\n    [AEPMobileAssurance startSessionWithUrl:url];\n    return true;\n}\n`}</code></pre>\n    <p>{`In iOS 13 and later, for a scene-based application, use the `}<inlineCode parentName=\"p\">{`UISceneDelegate`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`scene(_:openURLContexts:)`}</inlineCode>{` method as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`\n- (void)scene:(UIScene *)scene willConnectToSession:(UISceneSession *)session options:(UISceneConnectionOptions *)connectionOptions {    \n    NSURL *deepLinkURL = connectionOptions.URLContexts.allObjects.firstObject.URL;\n    [AEPMobileAssurance startSessionWithUrl:deepLinkURL];\n}\n\n\n- (void)scene:(UIScene *)scene openURLContexts:(NSSet<UIOpenURLContext *> *)URLContexts {\n    [AEPMobileAssurance startSessionWithUrl:URLContexts.allObjects.firstObject.URL];\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Variant","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","platform","task","repeat","parentName","query","isMDXComponent"],"sourceRoot":""}