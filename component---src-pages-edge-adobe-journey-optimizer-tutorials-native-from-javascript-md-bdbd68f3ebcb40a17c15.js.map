{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-tutorials-native-from-javascript-md-bdbd68f3ebcb40a17c15.js","mappings":"2OAQsBA,E,mFADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAIU,YAJF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EAClB,GAEMG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGP,GAAK,YAER,OAAO,SAACI,GAAS,UAAKD,EAAiBH,EAAK,CAAEO,WAAYA,EAAYC,QAAQ,eAI5E,eACE,GAAM,wCAAsC,yCAE9C,iJACA,oBACE,eAAIC,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,6CAA2C,2BACvB,uBAAYA,WAAW,KAAG,wBAC1D,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,0DAAwD,2DAEpE,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,yDAAuD,2DAGrE,eACE,GAAM,4CAA0C,2BACpB,uBAAYA,WAAW,MAAI,uBACzD,oEAAqD,uBAAYA,WAAW,KAAG,WAAyB,wDAAwD,uBAAYA,WAAW,KAAG,qBAAmC,MAC7N,oHAAqG,cAAGA,WAAW,IAC/G,KAAQ,2BAAyB,uCACW,MAChD,eACE,GAAM,yDAAuD,0DAE/D,SAACV,EAAS,CAACW,YAAY,aAAaC,MAAM,mBAAmBC,OAAO,IAAIJ,QAAQ,eAChF,8BACA,SAAC,UAAI,CAACK,MAAM,qCAAqCL,QAAQ,UACzD,0BACA,SAAC,UAAI,CAACK,MAAM,iCAAiCL,QAAQ,UACrD,eACE,GAAM,wDAAsD,yDAE9D,wHACA,+FAAgF,uBAAYC,WAAW,KAAG,mBAAiC,yFAC3I,eACE,GAAM,QAAM,SAEd,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,2rBAmBhC,gKACA,qQACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,6EAGhC,eACE,GAAM,YAAU,aAElB,wGACA,oBACE,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,qFAAmF,WAE/F,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,yFAAuF,iBAEnG,eAAIA,WAAW,OAAK,cAAGA,WAAW,KAC9B,KAAQ,4EAA0E,YAK5F,CAEAH,EAAWQ,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/tutorials/native-from-javascript.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Tabs from './tabs/native-from-javascript.md';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst TabsBlock = makeShortcode(\"TabsBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"native-handling-of-javascript-events\"\n    }}>{`Native handling of JavaScript events`}</h1>\n    <p>{`You can handle events from in-app message interactions natively within your application by completing the following steps:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#implement-and-assign-a-messagingdelegate\"\n        }}>{`Implement and assign a `}<inlineCode parentName=\"a\">{`MessagingDelegate`}</inlineCode></a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#register-a-javascript-handler-for-your-in-app-message\"\n        }}>{`Register a JavaScript handler for your In-App Message`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"#post-the-javascript-message-from-your-in-app-message\"\n        }}>{`Post the JavaScript message from your In-App Message`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"implement-and-assign-a-messagingdelegate\"\n    }}>{`Implement and assign a `}<inlineCode parentName=\"h2\">{`MessagingDelegate`}</inlineCode></h2>\n    <p>{`To register a JavaScript event handler with a `}<inlineCode parentName=\"p\">{`Message`}</inlineCode>{` object, you will first need to implement and set a `}<inlineCode parentName=\"p\">{`MessagingDelegate`}</inlineCode>{`.`}</p>\n    <p>{`For more detailed instructions on implementing and using a MessagingDelegate, please read the `}<a parentName=\"p\" {...{\n        \"href\": \"./messaging-delegate.md\"\n      }}>{`tutorial on using MessagingDelegate`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"register-a-javascript-handler-for-your-in-app-message\"\n    }}>{`Register a JavaScript handler for your In-App Message`}</h2>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&function=register\" mdxType=\"Tabs\" />\n    <p>{`iOS`}</p>\n    <Tabs query=\"platform=ios&function=register\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"post-the-javascript-message-from-your-in-app-message\"\n    }}>{`Post the JavaScript message from your In-App Message`}</h2>\n    <p>{`Now that the in-app message has been displayed, the final step is to post the JavaScript message.`}</p>\n    <p>{`Continuing from the previous example, the developer is going to post the `}<inlineCode parentName=\"p\">{`myInappCallback`}</inlineCode>{` message from their HTML, which will in turn call the handler previously configured:`}</p>\n    <h3 {...{\n      \"id\": \"html\"\n    }}>{`HTML`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<html>\n    <head>\n        <script type=\"text/javascript\">\n            function callNative(action) {\n                try {\n                    // the name of the message handler is the same name that must be registered in native code.\n                    // in this case the message name is \"myInappCallback\"\n                    webkit.messageHandlers.myInappCallback.postMessage(action);\n                } catch(err) {\n                    console.log('The native context does not exist yet'); }\n                }\n            </script>\n    </head>\n    <body>\n        <button onclick=\"callNative('native callbacks are cool!')\">Native callback!</button>\n    </body>\n</html>\n`}</code></pre>\n    <p>{`(The above HTML is not representative of a valid in-app message, and is intended only to demonstrate how to post the JavaScript message).`}</p>\n    <p>{`When the user clicks the button inside of this in-app message, the handler configured in the previous step will be called. The handler will send an Experience Event tracking the interaction, and print the following message to the console:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\"\n      }}>{`JavaScript body passed to native callback: native callbacks are cool!\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`The test apps in this repository demonstrate calling native code from JavaScript:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/aepsdk-messaging-ios/tree/main/TestApps/MessagingDemoApp\"\n        }}>{`Swift`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/aepsdk-messaging-ios/tree/main/TestApps/MessagingDemoAppObjC\"\n        }}>{`Objective-C`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/aepsdk-messaging-android/tree/main/code/testapp\"\n        }}>{`Kotlin`}</a></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","TabsBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","orientation","slots","repeat","query","isMDXComponent"],"sourceRoot":""}