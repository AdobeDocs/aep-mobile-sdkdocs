{"version":3,"file":"component---src-pages-edge-adobe-journey-optimizer-content-card-ui-android-tutorial-displaying-content-cards-md-fb5206112739a6487360.js","mappings":"kTAMaA,EAAe,CAAC,EACvBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,eAASC,EAClB,CAAC,EACKG,EAAYL,EAAc,aAC1BM,EAAcN,EAAc,eAC5BO,EAAc,CAClBR,aAAAA,GAEIS,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGT,GAAK,YAER,OAAO,SAACM,GAAS,UAAKD,EAAiBL,EAAK,CAAES,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,mCAAiC,oCAEzC,yGACA,eACE,GAAM,kBAAgB,mBAExB,mBAAG,cAAGC,WAAW,IACb,KAAQ,2GAAyG,iDAC3D,kBAC1D,eACE,GAAM,uBAAqB,wBAE7B,gFAAiE,cAAGA,WAAW,IAC3E,KAAQ,sFAAoF,2BAC5D,yBAAyB,cAAGA,WAAW,IACvE,KAAQ,gIAA8H,iCAChG,0NAC1C,SAACR,EAAS,CAACS,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,SAASJ,QAAQ,eACvE,eACE,GAAM,UAAQ,WAEhB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,mBAAiB,qIAKlC,eACE,GAAM,0BAAwB,2BAEhC,iFAAkE,uBAAYA,WAAW,KAAG,qBAAmC,yBAAyB,cAAGA,WAAW,IAClK,KAAQ,6CAA2C,QACtC,QAAQ,cAAGA,WAAW,IACnC,KAAQ,8BAA4B,SACtB,yEAClB,mBAAG,uBAAYA,WAAW,KAAG,SAAuB,kHAAkH,uBAAYA,WAAW,KAAG,SAAuB,+DACvN,SAACR,EAAS,CAACS,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,SAASJ,QAAQ,eACvE,eACE,GAAM,YAAU,WAElB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,mBAAiB,k4BAyBlC,SAACP,EAAW,CAACW,QAAQ,OAAOH,MAAM,OAAOF,QAAQ,iBACjD,2LACA,eACE,GAAM,yBAAuB,0BAE/B,qMAAsL,uBAAYC,WAAW,KAAG,SAAuB,6BAA6B,uBAAYA,WAAW,KAAG,oBAAkC,8FAChU,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAI,kBAAgC,oBAAoB,uBAAYA,WAAW,MAAI,mBAEhI,eACE,GAAM,mDAAiD,oDAEzD,uGACA,SAACR,EAAS,CAACS,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,SAASJ,QAAQ,eACvE,eACE,GAAM,YAAU,WAElB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,mBAAiB,isBAwBlC,oCAAqB,cAAGA,WAAW,IAC/B,KAAQ,6FAA2F,WACnF,kIACpB,eACE,GAAM,+DAA6D,gEAErE,2CAA4B,uBAAYA,WAAW,KAAG,yBAAuC,uDAAuD,cAAGA,WAAW,IAC9J,KAAQ,0CAAwC,qBACtB,MAC9B,SAACR,EAAS,CAACS,MAAM,gBAAgBC,OAAO,IAAIC,UAAU,SAASJ,QAAQ,eACvE,eACE,GAAM,YAAU,WAElB,qBAAK,iBAAMC,WAAW,MAClB,UAAa,mBAAiB,ieAiBtC,CAEAH,EAAWQ,gBAAiB,C","sources":["webpack://dev-site-documentation-template/./src/pages/edge/adobe-journey-optimizer/content-card-ui/Android/tutorial/displaying-content-cards.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst CodeBlock = makeShortcode(\"CodeBlock\");\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"fetch-and-display-content-cards\"\n    }}>{`Fetch and Display Content Cards`}</h1>\n    <p>{`This tutorial explains how to fetch and display content cards in your application.`}</p>\n    <h2 {...{\n      \"id\": \"pre-requisites\"\n    }}>{`Pre-requisites`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/client-sdks/edge/adobe-journey-optimizer/#implement-extension-in-mobile-app\"\n      }}>{`Integrate and register AEPMessaging extension`}</a>{` in your app.`}</p>\n    <h2 {...{\n      \"id\": \"fetch-content-cards\"\n    }}>{`Fetch Content Cards`}</h2>\n    <p>{`To fetch the content cards for the surfaces configured in `}<a parentName=\"p\" {...{\n        \"href\": \"https://business.adobe.com/products/journey-optimizer/adobe-journey-optimizer.html\"\n      }}>{`Adobe Journey Optimizer`}</a>{` campaigns, call the `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.adobe.com/client-sdks/edge/adobe-journey-optimizer/code-based/api-reference/#updatepropositionsforsurfaces\"\n      }}>{`updatePropositionsForSurfaces`}</a>{` API. You should batch requests for multiple surfaces in a single API call when possible. The returned content cards are cached in-memory by the Messaging extension and persist through the application's lifecycle.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Kotlin\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"kotlin\"\n    }}>{`Kotlin`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`val surfaces = mutableListOf<Surface>()\nval surface = Surface(\"homepage\")\nMessaging.updatePropositionsForSurfaces(surfaces)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"retrieve-content-cards\"\n    }}>{`Retrieve Content Cards`}</h2>\n    <p>{`To retrieve the content cards for a specific surface, call `}<inlineCode parentName=\"p\">{`getContentCardsUI`}</inlineCode>{`. This API returns a `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.android.com/kotlin/flow\"\n      }}>{`flow`}</a>{` of `}<a parentName=\"p\" {...{\n        \"href\": \"../public-classes/aepui.md\"\n      }}>{`AepUI`}</a>{` objects representing content cards for which the user is qualified.`}</p>\n    <p><inlineCode parentName=\"p\">{`AepUI`}</inlineCode>{` objects are created only for content cards with templates recognized by the Messaging extension. The flow of `}<inlineCode parentName=\"p\">{`AepUI`}</inlineCode>{` objects may contain multiple content card template types.`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Kotlin\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"kotlin-1\"\n    }}>{`Kotlin`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`// create a view model or reuse existing one to hold the aepUIList\nclass AepContentCardViewModel(private val contentCardUIProvider: ContentCardUIProvider) : ViewModel() {\n    // State to hold AepUI list\n    private val _aepUIList = MutableStateFlow<List<AepUI<*, *>>>(emptyList())\n    val aepUIList: StateFlow<List<AepUI<*, *>>> = _aepUIList.asStateFlow()\n\n    init {\n        // Launch a coroutine to fetch the aepUIList from the ContentCardUIProvider\n        // when the ViewModel is created\n        viewModelScope.launch {\n            contentCardUIProvider.getContentCardUI().collect { aepUi ->\n                _aepUIList.value = aepUi\n            }\n        }\n    }\n\n    // Function to refresh the aepUIList from the ContentCardUIProvider\n    fun refreshContent() {\n        viewModelScope.launch {\n            contentCardUIProvider.refreshContent()\n        }\n    }\n}\n`}</code></pre>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Only content cards for which the user has qualified are returned by the getContentCardUI API. Client-side rules are defined in the Adobe Journey Optimizer campaign.`}</p>\n    <h2 {...{\n      \"id\": \"display-content-cards\"\n    }}>{`Display Content Cards`}</h2>\n    <p>{`The Content Card user interface is implemented using Jetpack Compose, which is the recommended toolkit for Android development. To display content cards in your app, pass the `}<inlineCode parentName=\"p\">{`AepUI`}</inlineCode>{` objects returned by the `}<inlineCode parentName=\"p\">{`getContentCardUI`}</inlineCode>{` API to the appropriate Content Card composable. The currently supported composables are:`}</p>\n    <ol>\n      <li parentName=\"ol\"><inlineCode parentName=\"li\">{`SmallImageCard`}</inlineCode>{` composable for `}<inlineCode parentName=\"li\">{`SmallImageUI`}</inlineCode></li>\n    </ol>\n    <h3 {...{\n      \"id\": \"display-content-cards-in-compose-ui-application\"\n    }}>{`Display Content Cards in Compose UI application`}</h3>\n    <p>{`Below is an example of how to display content cards in a Compose UI application:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Kotlin\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"kotlin-2\"\n    }}>{`Kotlin`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`@Composable\nprivate fun AepContentCardList(viewModel: AepContentCardViewModel) {\n  // Collect the state from ViewModel\n  val aepUiList by viewModel.aepUIList.collectAsStateWithLifecycle()\n  \n  // Create row with composables from AepUI instances\n  LazyRow {\n    items(reorderedAepUIList) { aepUI ->                   \n      when (aepUI) {\n        is SmallImageUI -> {\n          val state = aepUI.getState()\n          if (!state.dismissed) \n          {\n            SmallImageCard(ui = aepUI, \n                         style = smallImageCardStyleRow,\n                         observer = ContentCardEventObserver(contentCardCallback))\n          }\n        }\n      }\n    }\n  }\n}    \n`}</code></pre>\n    <p>{`Refer to this `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/aepsdk-messaging-android/tree/feature/content-cards/code/testapp\"\n      }}>{`TestApp`}</a>{` for a complete example of how to display, customize, and listen to UI events from content cards in a Compose UI application.`}</p>\n    <h3 {...{\n      \"id\": \"retrieve-contentcardschemadata-from-the-messaging-extension\"\n    }}>{`Retrieve ContentCardSchemaData from the Messaging extension`}</h3>\n    <p>{`You may retrieve the `}<inlineCode parentName=\"p\">{`ContentCardSchemaData`}</inlineCode>{` for a Content Card with the template ID using the `}<a parentName=\"p\" {...{\n        \"href\": \"../public-classes/contentcardmapper.md\"\n      }}>{`ContentCardMapper`}</a>{`:`}</p>\n    <CodeBlock slots=\"heading, code\" repeat=\"1\" languages=\"Kotlin\" mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"kotlin-3\"\n    }}>{`Kotlin`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-kotlin\"\n      }}>{`private fun AepContentCardList(viewModel: AepContentCardViewModel) {\n  // Collect the state from ViewModel\n  val aepUiList by viewModel.aepUIList.collectAsStateWithLifecycle()\n  \n  // Get the ContentCardSchemaData for the AepUI list if needed\n  val contentCardSchemaDataList = aepUiList.map {\n    when (it) {\n      is SmallImageUI ->\n        ContentCardMapper.Companion.instance.getContentCardSchemaData(it.getTemplate().id)\n      \n        else -> null\n    }\n  }\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","CodeBlock","InlineAlert","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","slots","repeat","languages","variant","isMDXComponent"],"sourceRoot":""}