"use strict";(self.webpackChunkdev_site_documentation_template=self.webpackChunkdev_site_documentation_template||[]).push([[8580],{4229:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return s},default:function(){return u}});var a,l=t(87462),i=t(63366),o=(t(15007),t(64983)),r=t(91515),d=["components"],s={},m=(a="CodeBlock",function(e){return console.warn("Component "+a+" was not imported, exported, or provided by MDXProvider as global scope"),(0,o.mdx)("div",e)}),p={_frontmatter:s},c=r.Z;function u(e){var n=e.components,t=(0,i.Z)(e,d);return(0,o.mdx)(c,(0,l.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"listening-to-content-card-events"},"Listening to Content Card Events"),(0,o.mdx)("p",null,"This tutorial explains how to listen to content card events in your application."),(0,o.mdx)("h2",{id:"overview"},"Overview"),(0,o.mdx)("p",null,"The Messaging extension provides a way to listen to events from content cards displayed in your application. The following functions can be implemented in conformance with the ",(0,o.mdx)("inlineCode",{parentName:"p"},"ContentCardUIEventListener")," interface:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"onDisplay")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"onDismiss")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("inlineCode",{parentName:"li"},"onInteract"))),(0,o.mdx)("h2",{id:"implement-contentcarduieventlistener"},"Implement ContentCardUIEventListener"),(0,o.mdx)("p",null,"Complete the following steps to hear content card events:"),(0,o.mdx)("ol",null,(0,o.mdx)("li",{parentName:"ol"},"Implement the ",(0,o.mdx)("a",{parentName:"li",href:"../public-classes/contentcarduieventlistener.md"},"ContentCardUIEventListener")," interface in your class.")),(0,o.mdx)(m,{slots:"heading, code",repeat:"1",languages:"Kotlin",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"kotlin"},"Kotlin"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-kotlin"},'class ContentCardCallback: ContentCardUIEventListener {\n  override fun onDisplay(aepUI: AepUI<*, *>) {\n    Log.d("ContentCardCallback", "onDisplay")\n  }\n\n  override fun onDismiss(aepUI: AepUI<*, *>) {\n    Log.d("ContentCardCallback", "onDismiss")\n  }\n\n  override fun onInteract(\n    aepUI: AepUI<*, *>,\n    interactionId: String?,\n    actionUrl: String?\n  ): Boolean {\n    Log.d("ContentCardCallback", "onInteract $interactionId $actionUrl")\n    // If the url is handled here, return true\n    return false\n  }\n}\n')),(0,o.mdx)("ol",{start:2},(0,o.mdx)("li",{parentName:"ol"},"Pass the listener to the ",(0,o.mdx)("a",{parentName:"li",href:"../public-classes/observers/contentcardeventobserver.md"},"ContentCardEventObservers")," class when retrieving the card composable.")),(0,o.mdx)(m,{slots:"heading, code",repeat:"1",languages:"Kotlin",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"kotlin-1"},"Kotlin"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-kotlin"},"@Composable\nprivate fun AepContentCardList(viewModel: AepContentCardViewModel) {\n  // Create the ContentCardUIEventListener\n  val contentCardCallback = ContentCardCallback()\n  // Collect the state from ViewModel\n  val aepUiList by viewModel.aepUIList.collectAsStateWithLifecycle()\n  \n  // Create row with composables from AepUI instances\n  LazyRow {\n    items(aepUiList) { aepUI ->\n      when (aepUI) {\n        is SmallImageUI -> {\n          val state = aepUI.getState()\n          if (!state.dismissed) {\n            SmallImageCard(\n                ui = aepUI,\n                style = SmallImageUIStyle.Builder().build(),\n                observer = ContentCardEventObserver(contentCardCallback)\n            )\n          }\n        }\n        is LargeImageUI -> {\n          val state = aepUI.getState()\n          if (!state.dismissed) {\n            LargeImageCard(\n                ui = aepUI,\n                style = LargeImageUIStyle.Builder().build(),\n                observer = ContentCardEventObserver(contentCardCallback)\n            )\n          }\n        }\n        is ImageOnlyUI -> {\n          val state = aepUI.getState()\n          if (!state.dismissed) {\n            ImageOnlyCard(\n                ui = aepUI,\n                style = ImageOnlyUIStyle.Builder().build(),\n                observer = ContentCardEventObserver(contentCardCallback)\n            )\n          }\n        }\n      }\n    }\n  }\n}    \n")),(0,o.mdx)("h2",{id:"handling-actionable-urls"},"Handling actionable URLs"),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},"onInteract")," method provides an optional ",(0,o.mdx)("inlineCode",{parentName:"p"},"actionURL")," parameter associated with the interaction event. The return value of this method determines how the URL is handled."),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"Returns ",(0,o.mdx)("inlineCode",{parentName:"p"},"true")," if your application has successfully handled the URL. This indicates to the SDK that no further action is needed.")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},"Returns ",(0,o.mdx)("inlineCode",{parentName:"p"},"false")," to allow the SDK to process the URL."))),(0,o.mdx)(m,{slots:"heading, code",repeat:"1",languages:"Kotlin",mdxType:"CodeBlock"}),(0,o.mdx)("h4",{id:"kotlin-2"},"Kotlin"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-kotlin"},"override fun onInteract(\n  aepUI: AepUI<*, *>,\n  interactionId: String?,\n  actionUrl: String?\n): Boolean {\n  actionUrl?.let { \n    // handle action url here\n    return true\n  }\n  return false\n}\n")))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-edge-adobe-journey-optimizer-content-card-ui-android-tutorial-listening-content-card-events-md-d87b414b6fd3eea1a02b.js.map