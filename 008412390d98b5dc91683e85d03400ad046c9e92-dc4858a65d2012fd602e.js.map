{"version":3,"file":"008412390d98b5dc91683e85d03400ad046c9e92-dc4858a65d2012fd602e.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/documentation/mobile-core/identity/tabs/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" task=\"add\" repeat=\"3\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <p>{`Import the library:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import com.adobe.marketing.mobile.*;\n`}</code></pre>\n    <Variant platform=\"ios-aep\" task=\"add\" repeat=\"4\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import AEPCore\nimport AEPIdentity\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`@import AEPCore;\n@import AEPIdentity;\n`}</code></pre>\n    <Variant platform=\"ios-acp\" task=\"add\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <p>{`In Swift, the ACPCore library includes ACPIdentity:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import ACPCore\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-1\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`#import  \"ACPIdentity.h\"\n`}</code></pre>\n    <Variant platform=\"react-native\" task=\"add\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"javascript\"\n    }}>{`JavaScript`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`import {ACPIdentity} from '@adobe/react-native-acpcore';\n`}</code></pre>\n    <Variant platform=\"flutter\" task=\"add\" repeat=\"2\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"dart\"\n    }}>{`Dart`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-dart\"\n      }}>{`import 'package:flutter_acpcore/flutter_acpidentity.dart';\n`}</code></pre>\n    <Variant platform=\"cordova\" task=\"add\" repeat=\"3\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"cordova\"\n    }}>{`Cordova`}</h4>\n    <p>{`After creating your Cordova app and adding the Android and iOS platforms, the Identity extension for Cordova can be added with this command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-cordova\"\n      }}>{`cordova plugin add https://github.com/adobe/cordova-acpcore.git\n`}</code></pre>\n    <Variant platform=\"unity\" task=\"add\" repeat=\"3\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"c\"\n    }}>{`C#`}</h4>\n    <p>{`After importing the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/adobe/unity-acpcore/blob/master/bin/ACPCore-0.0.1-Unity.zip\"\n      }}>{`ACPCore.unitypackage`}</a>{`, the Identity extension for Unity can be added with following code in the MainScript`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`using com.adobe.marketing.mobile;\n`}</code></pre>\n    <Variant platform=\"xamarin\" task=\"add\" repeat=\"3\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"c-1\"\n    }}>{`C#`}</h4>\n    <p>{`After adding the iOS ACPCore NuGet package or the Android ACPIdentity NuGet package, the Identity extension can be added by this import statement`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`using Com.Adobe.Marketing.Mobile;\n`}</code></pre>\n    <Variant platform=\"android\" task=\"register\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`After calling the `}<inlineCode parentName=\"p\">{`setApplication()`}</inlineCode>{` method in the `}<inlineCode parentName=\"p\">{`onCreate()`}</inlineCode>{` method, register the extension. If the registration was not successful, an `}<inlineCode parentName=\"p\">{`InvalidInitException`}</inlineCode>{` is thrown.`}</p>\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class MobiletApp extends Application {\n@Override\npublic void onCreate() {\nsuper.onCreate();\n     MobileCore.setApplication(this);\n     try {\n         Identity.registerExtension();\n     } catch (Exception e) {\n         //Log the exception\n     }\n  }\n}\n`}</code></pre>\n    <Variant platform=\"ios-aep\" task=\"register\" repeat=\"6\" mdxType=\"Variant\" />\n    <p>{`Register the Identity extension in your app's `}<inlineCode parentName=\"p\">{`didFinishLaunchingWithOptions`}</inlineCode>{` function:`}</p>\n    <h4 {...{\n      \"id\": \"swift-2\"\n    }}>{`Swift`}</h4>\n    <p>{`When including both Identity and Identity for Edge Network extensions, register the extensions using their full Swift module names, such as `}<inlineCode parentName=\"p\">{`AEPIdentity.Identity.self`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n     MobileCore.registerExtensions([Identity.self, ...], {\n       ...\n     })\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-2\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n [AEPMobileCore registerExtensions:@[AEPMobileIdentity.class, ...] completion:^{\n   ...\n }];\n return YES;\n}\n`}</code></pre>\n    <Variant platform=\"ios-acp\" task=\"register\" repeat=\"5\" mdxType=\"Variant\" />\n    <p>{`Register the Identity extension in your app's `}<inlineCode parentName=\"p\">{`didFinishLaunchingWithOptions`}</inlineCode>{` function:`}</p>\n    <h4 {...{\n      \"id\": \"swift-3\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n  ACPIdentity.registerExtension();\n  // Override point for customization after application launch.\n  return true;\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-3\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  [ACPIdentity registerExtension];\n  // Override point for customization after application launch.\n  return YES;\n}\n`}</code></pre>\n    <Variant platform=\"react-native\" task=\"register\" repeat=\"1\" mdxType=\"Variant\" />\n    <p>{`When using React Native, registering Identity with Mobile Core should be done in native code, which is shown under the Android and iOS tabs.`}</p>\n    <Variant platform=\"flutter\" task=\"register\" repeat=\"1\" mdxType=\"Variant\" />\n    <p>{`When using Flutter, registering Identity with Mobile Core should be done in native code, which is shown under the Android and iOS tabs.`}</p>\n    <Variant platform=\"cordova\" task=\"register\" repeat=\"1\" mdxType=\"Variant\" />\n    <p>{`When using React Native, registering Identity with Mobile Core should be done in native code, which is shown under the Android and iOS tabs.`}</p>\n    <Variant platform=\"unity\" task=\"register\" repeat=\"3\" mdxType=\"Variant\" />\n    <p>{`Register the Identity extension in your app's `}<inlineCode parentName=\"p\">{`Start()`}</inlineCode>{` function:`}</p>\n    <h4 {...{\n      \"id\": \"c-2\"\n    }}>{`C#`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`void Start() {\n  ACPIdentity.RegisterExtension();\n}\n`}</code></pre>\n    <Variant platform=\"xamarin\" task=\"register\" repeat=\"7\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"c-3\"\n    }}>{`C#`}</h4>\n    <p><strong parentName=\"p\">{`iOS`}</strong></p>\n    <p>{`Register the Identity extension in your app's `}<inlineCode parentName=\"p\">{`FinishedLaunching()`}</inlineCode>{` function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`public override bool FinishedLaunching(UIApplication app, NSDictionary options)\n{\n  global::Xamarin.Forms.Forms.Init();\n  LoadApplication(new App());\n    ACPIdentity.RegisterExtension();\n\n  // start core\n  ACPCore.Start(startCallback);\n\n  return base.FinishedLaunching(app, options);\n}\n\nprivate void startCallback()\n{\n  // set launch config\n  ACPCore.ConfigureWithAppID(\"yourAppId\");\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Android`}</strong></p>\n    <p>{`Register the Identity extension in your app's `}<inlineCode parentName=\"p\">{`OnCreate()`}</inlineCode>{` function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`protected override void OnCreate(Bundle savedInstanceState)\n{\n  base.OnCreate(savedInstanceState);\n  global::Xamarin.Forms.Forms.Init(this, savedInstanceState);\n  LoadApplication(new App());\n\n  ACPIdentity.RegisterExtension();\n\n  // start core\n  ACPCore.Start(new CoreStartCompletionCallback());\n}\n\nclass CoreStartCompletionCallback : Java.Lang.Object, IAdobeCallback\n{\n  public void Call(Java.Lang.Object callback)\n  {\n    // set launch config\n    ACPCore.ConfigureWithAppID(\"yourAppId\");\n  }\n}\n`}</code></pre>\n    <Variant platform=\"android\" task=\"implement\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-2\"\n    }}>{`Java`}</h4>\n    <p>{`To append visitor information to the URL that is being used to open the web view, call `}<a parentName=\"p\" {...{\n        \"href\": \"#appendtourl-appendvisitorinfoforurl\"\n      }}>{`appendVisitorInfoForUrl`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Identity.appendVisitorInfoForURL(\"https://example.com\", new AdobeCallback<String>() {    \n    @Override    \n    public void call(String urlWithAdobeVisitorInfo) {        \n        //handle the new URL here        \n        //For example, open the URL on the device browser        \n        //        \n        Intent i = new Intent(Intent.ACTION_VIEW);        \n        i.setData(Uri.parse(urlWithAdobeVisitorInfo));        \n        startActivity(i);    \n    }\n});\n`}</code></pre>\n    <p>{`Alternately, starting in SDK version 1.4.0 (Identity version 1.1.0), you can call `}<a parentName=\"p\" {...{\n        \"href\": \"#geturlvariables\"\n      }}>{`getUrlVariables`}</a>{` and build your own URL:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Identity.getUrlVariables(new AdobeCallback<String>() {    \n    @Override    \n    public void call(String stringWithAdobeVisitorInfo) {        \n        //handle the URL query parameter string here \n        //For example, open the URL on the device browser        \n        //        \n        Intent i = new Intent(Intent.ACTION_VIEW);        \n        i.setData(Uri.parse(\"https://example.com?\" + urlWithAdobeVisitorInfo));        \n        startActivity(i);    \n    }\n});\n`}</code></pre>\n    <Variant platform=\"ios-aep\" task=\"implement\" repeat=\"10\" mdxType=\"Variant\" />\n    <p>{`To append visitor information to the URL that is being used to open the web view, call `}<a parentName=\"p\" {...{\n        \"href\": \"./api-reference.md#appendtourl-appendvisitorinfoforurl\"\n      }}>{`appendToUrl`}</a>{`: `}</p>\n    <h4 {...{\n      \"id\": \"swift-4\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let url = URL(string: \"https://example.com\")\nIdentity.appendTo(url: url) { appendedUrl, error in\n    if error != nil {\n        // handle error here\n    } else {\n        // handle appended url here\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-4\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`NSURL *sampleUrl = [NSURL URLWithString:@\"https://example.com\"];\n[AEPMobileIdentity appendToUrl:sampleUrl completion:^(NSURL * _Nullable appendedUrl, NSError *error) {\n    if (error != nil) {\n        // Handle error here\n    } else {\n        // Handle appended url here\n    }\n}];\n`}</code></pre>\n    <p>{`Alternately, you can call `}<a parentName=\"p\" {...{\n        \"href\": \"api-reference.md#geturlvariables\"\n      }}>{`getUrlVariables`}</a>{` and build your own URL:`}</p>\n    <h4 {...{\n      \"id\": \"swift-5\"\n    }}>{`Swift`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`Identity.getUrlVariables { urlVariables, error in\n    if error != nil {\n        // handle error here\n    } else {\n        if let url = URL(string: \"https://example.com?\\\\(urlVariables ?? \"\")\") {\n            DispatchQueue.main.async {\n                UIApplication.shared.open(url)\n            }\n        }\n    }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-5\"\n    }}>{`Objective-C`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`[AEPMobileIdentity getUrlVariables:^(NSString * _Nullable urlVariables, NSError *error) {\n    NSString *sampleURLString = @\"https://example.com\";\n    if (error != nil) {\n        // Handle variables being nil\n    } else {\n        NSString *stringWithData = [NSString stringWithFormat:@\"%@?%@\", sampleURLString, urlVariables];\n        NSURL *appendedUrl = [NSURL URLWithString:stringWithData];\n        dispatch_async(dispatch_get_main_queue(), ^{\n            [[UIApplication sharedApplication] openURL:appendedUrl options:@{} completionHandler:nil];\n        });\n    }\n}];\n`}</code></pre>\n    <Variant platform=\"ios-acp\" task=\"implement\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"objective-c-6\"\n    }}>{`Objective-C`}</h4>\n    <p>{`To append visitor information to the URL that is being used to open the web view, call `}<a parentName=\"p\" {...{\n        \"href\": \"./api-reference.md#appendtourl-appendvisitorinfoforurl\"\n      }}>{`appendToUrl`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`NSURL* url = [[NSURL alloc] initWithString:@\"www.example.com\"];\n[ACPIdentity appendToUrl:url withCallback:^(NSURL * _Nullable urlWithVisitorData) {    \n// handle the appended url here\n}];\n`}</code></pre>\n    <p>{`Alternately, starting with SDK version 2.3.0 (ACPIdentity version 2.1.0), you can call `}<a parentName=\"p\" {...{\n        \"href\": \"api-reference.md#geturlvariables\"\n      }}>{`getUrlVariables`}</a>{` and build your own URL:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`[ACPIdentity getUrlVariables:^(NSString * _Nullable urlVariables) {    \n  // handle the URL query parameter string here\n  NSString* urlString = @\"https://example.com\";\n  NSString* urlStringWithVisitorData = [NSString stringWithFormat:@\"%@?%@\", urlString, urlVariables];\n  NSURL* urlWithVisitorData = [NSURL URLWithString:urlStringWithVisitorData];\n  [[UIApplication sharedApplication] openURL:urlWithVisitorData options:@{} completionHandler:^(BOOL success) {\n    // handle openURL success\n  }];\n}];\n`}</code></pre>\n    <Variant platform=\"react-native\" task=\"implement\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"javascript-1\"\n    }}>{`JavaScript`}</h4>\n    <p>{`To append visitor information to the URL that is being used to open the web view, call `}<a parentName=\"p\" {...{\n        \"href\": \"api-reference.md#appendtourl-appendvisitorinfoforurl\"\n      }}>{`appendVisitorInfoForUrl`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`ACPIdentity.appendVisitorInfoForURL(\"www.example.com\").then(urlWithVistorData => console.log(\"Url with Visitor Data = \" + urlWithVisitorData));\n`}</code></pre>\n    <p>{`Alternately, starting with SDK version 1.0.5, you can call `}<a parentName=\"p\" {...{\n        \"href\": \"api-reference.md#geturlvariables\"\n      }}>{`getUrlVariables`}</a>{` and build your own URL:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`ACPIdentity.getUrlVariables().then(urlVariables => console.log(\"query params = \" + urlVariables));\n`}</code></pre>\n    <Variant platform=\"flutter\" task=\"implement\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"dart-1\"\n    }}>{`Dart`}</h4>\n    <p>{`To append visitor information to the URL that is being used to open the web view, call `}<a parentName=\"p\" {...{\n        \"href\": \"api-reference.md#appendtourl-appendvisitorinfoforurl\"\n      }}>{`appendVisitorInfoForUrl`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-dart\"\n      }}>{`String result = \"\";\n\ntry {\n  result = await FlutterACPIdentity.appendToUrl(\"www.example.com\");\n} on PlatformException {\n  log(\"Failed to append URL\");\n}\n`}</code></pre>\n    <p>{`Alternately, starting with SDK version 1.0.0-beta.1, you can call `}<a parentName=\"p\" {...{\n        \"href\": \"api-reference.md#geturlvariables\"\n      }}>{`getUrlVariables`}</a>{` and build your own URL:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-dart\"\n      }}>{`String result = \"\";\n\ntry {\n  result = await FlutterACPIdentity.urlVariables;\n} on PlatformException {\n  log(\"Failed to get url variables\");\n}\n`}</code></pre>\n    <Variant platform=\"cordova\" task=\"implement\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"cordova-1\"\n    }}>{`Cordova`}</h4>\n    <p>{`To append visitor information to the URL that is being used to open the web view, call `}<a parentName=\"p\" {...{\n        \"href\": \"api-reference.md#appendtourl-appendvisitorinfoforurl\"\n      }}>{`appendVisitorInfoForUrl`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`ACPIdentity.appendVisitorInfoForUrl(\"https://example.com\", function(handleCallback) {\n  console.log(\"AdobeExperenceSDK: Url with Visitor Data = \" + handleCallback);\n}, function(handleError) {\n  console.log(\"AdobeExperenceSDK: Failed to append URL : \" + handleError);\n});\n`}</code></pre>\n    <p>{`Alternately, you can call `}<a parentName=\"p\" {...{\n        \"href\": \"api-reference.md#geturlvariables\"\n      }}>{`getUrlVariables`}</a>{` and build your own URL:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`ACPIdentity.getUrlVariables(function (handleCallback) {\n  console.log(\"AdobeExperienceSDK: Url variables: \" + handleCallback);\n}, function (handleError) {\n  console.log(\"AdobeExperenceSDK: Failed to retrieve url variables : \" + handleError);\n});\n`}</code></pre>\n    <Variant platform=\"unity\" task=\"implement\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"c-4\"\n    }}>{`C#`}</h4>\n    <p>{`To append visitor information to the URL that is being used to open the web view, call `}<a parentName=\"p\" {...{\n        \"href\": \"api-reference.md#appendtourl-appendvisitorinfoforurl\"\n      }}>{`AppendToUrl`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`[MonoPInvokeCallback(typeof(AdobeIdentityAppendToUrlCallback))]\npublic static void HandleAdobeIdentityAppendToUrlCallback(string url)\n{\n    print(\"Url is : \" + url);\n}\nACPIdentity.AppendToUrl(\"https://www.adobe.com\", HandleAdobeIdentityAppendToUrlCallback);\n`}</code></pre>\n    <p>{`Alternately, you can call `}<a parentName=\"p\" {...{\n        \"href\": \"api-reference.md#geturlvariables\"\n      }}>{`GetUrlVariables`}</a>{` and build your own URL:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`[MonoPInvokeCallback(typeof(AdobeGetUrlVariables))]\npublic static void HandleAdobeGetUrlVariables(string urlVariables)\n{\n    print(\"Url variables are : \" + urlVariables);\n}\nACPIdentity.GetUrlVariables(HandleAdobeGetUrlVariables);\n`}</code></pre>\n    <Variant platform=\"xamarin\" task=\"implement\" repeat=\"12\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"c-5\"\n    }}>{`C#`}</h4>\n    <p>{`To append visitor information to the URL that is being used to open the web view, call `}<a parentName=\"p\" {...{\n        \"href\": \"api-reference.md#appendtourl-appendvisitorinfoforurl\"\n      }}>{`AppendToUrl`}</a>{`:`}</p>\n    <p><strong parentName=\"p\">{`iOS`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`ACPIdentity.AppendToUrl(url, callback => {\n  Console.WriteLine(\"Appended url: \" + callback);\n});\n`}</code></pre>\n    <p>{`To append visitor information to the URL that is being used to open the web view, call `}<a parentName=\"p\" {...{\n        \"href\": \"api-reference.md#appendtourl-appendvisitorinfoforurl\"\n      }}>{`AppendVisitorInfoForUrl`}</a>{`:`}</p>\n    <p><strong parentName=\"p\">{`Android`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`ACPIdentity.AppendVisitorInfoForURL(\"https://example.com\", new StringCallback());\n\nclass StringCallback : Java.Lang.Object, IAdobeCallback\n{\n  public void Call(Java.Lang.Object stringContent)\n  {\n    if (stringContent != null)\n    {\n      Console.WriteLine(\"Appended url: \" + stringContent);\n    } \n    else \n    {\n      Console.WriteLine(\"null content in string callback\");\n    }\n  }\n}\n`}</code></pre>\n    <p>{`Alternately, you can call `}<a parentName=\"p\" {...{\n        \"href\": \"api-reference.md#geturlvariables\"\n      }}>{`GetUrlVariables`}</a>{` and build your own URL:`}</p>\n    <p><strong parentName=\"p\">{`iOS`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`ACPIdentity.GetUrlVariables(callback => {\n  Console.WriteLine(\"Url variables: \" + callback);\n});\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Android`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-csharp\"\n      }}>{`ACPIdentity.GetUrlVariables(new StringCallback());\n\nclass StringCallback : Java.Lang.Object, IAdobeCallback\n{\n  public void Call(Java.Lang.Object stringContent)\n  {\n    if (stringContent != null)\n    {\n      Console.WriteLine(\"Url variables: \" + stringContent);\n    } \n    else \n    {\n      Console.WriteLine(\"null content in string callback\");\n    }\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Variant","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","platform","task","repeat","parentName","isMDXComponent"],"sourceRoot":""}