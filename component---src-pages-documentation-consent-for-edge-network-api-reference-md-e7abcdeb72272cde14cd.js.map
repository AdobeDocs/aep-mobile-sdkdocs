{"version":3,"file":"component---src-pages-documentation-consent-for-edge-network-api-reference-md-e7abcdeb72272cde14cd.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/documentation/consent-for-edge-network/api-reference.md","webpack://dev-site-documentation-template/./src/pages/documentation/consent-for-edge-network/tabs/api-reference.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nimport Tabs from './tabs/api-reference.md';\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst TabsBlock = makeShortcode(\"TabsBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"api-reference\"\n    }}>{`API Reference`}</h1>\n    <h2 {...{\n      \"id\": \"extensionversion\"\n    }}>{`extensionVersion`}</h2>\n    <p>{`The extensionVersion() API returns the version of the client-side Consent extension.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=extension-version\" mdxType=\"Tabs\" />\n    <p>{`iOS (AEP 3.x)`}</p>\n    <Tabs query=\"platform=ios-aep&api=extension-version\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"getconsents\"\n    }}>{`getConsents`}</h2>\n    <p>{`Retrieves the current consent preferences stored in the Consent extension.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=get-consents\" mdxType=\"Tabs\" />\n    <p>{`iOS (AEP 3.x)`}</p>\n    <Tabs query=\"platform=ios-aep&api=get-consents\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"registerextension\"\n    }}>{`registerExtension`}</h2>\n    <p>{`Registers the Edge Consent extension with the Mobile Core SDK.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=register-extension\" mdxType=\"Tabs\" />\n    <p>{`iOS (AEP 3.x)`}</p>\n    <Tabs query=\"platform=ios-aep&api=register-extension\" mdxType=\"Tabs\" />\n    <h2 {...{\n      \"id\": \"updateconsents\"\n    }}>{`updateConsents`}</h2>\n    <p>{`Merges the existing consents with the given consents. Duplicate keys will take the value of those passed in the API.`}</p>\n    <TabsBlock orientation=\"horizontal\" slots=\"heading, content\" repeat=\"2\" mdxType=\"TabsBlock\" />\n    <p>{`Android`}</p>\n    <Tabs query=\"platform=android&api=update-consents\" mdxType=\"Tabs\" />\n    <p>{`iOS (AEP 3.x)`}</p>\n    <Tabs query=\"platform=ios-aep&api=update-consents\" mdxType=\"Tabs\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" api=\"extension-version\" repeat=\"5\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static String extensionVersion();\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`String extensionVersion = Consent.extensionVersion();\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"extension-version\" repeat=\"10\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static var extensionVersion: String\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let extensionVersion = Consent.extensionVersion\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (nonnull NSString*) extensionVersion;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`NSString *extensionVersion = [AEPMobileEdgeConsent extensionVersion];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"get-consents\" repeat=\"6\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void getConsents(final AdobeCallback<Map<String, Object>> callback);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`callback`}</em>{` - callback invoked with the current consents of the extension. If an `}<inlineCode parentName=\"li\">{`AdobeCallbackWithError`}</inlineCode>{` is provided, an `}<inlineCode parentName=\"li\">{`AdobeError`}</inlineCode>{`, can be returned in the eventuality of any error that occurred while getting the user consents. The callback may be invoked on a different thread.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Consent.getConsents(new AdobeCallback<Map<String, Object>>() {\n    @Override\n    public void call(Map<String, Object> currentConsents) {\n        // handle currentConsents\n    }\n});\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"get-consents\" repeat=\"11\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func getConsents(completion: @escaping ([String: Any]?, Error?) -> Void)\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`completion`}</em>{` - Invoked with the current consent preferences or an `}<inlineCode parentName=\"li\">{`AEPError`}</inlineCode>{` if an unexpected error occurs or the request timed out. It may be invoked on a different thread.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`Consent.getConsents { currentConsents, error in\n    // handle currentConsents\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) getConsents:^ (NSDictionary<NSString *,id> * _Nullable, NSError * _Nullable)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`[AEPMobileEdgeConsent getConsents:^(NSDictionary *currentConsents, NSError *error){\n    // handle currentConsents\n}];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"register-extension\" repeat=\"5\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void registerExtension();\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`Consent.registerExtension();\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"register-extension\" repeat=\"12\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <p>{`Use the MobileCore API to register the Edge Consent extension.`}</p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func registerExtensions(_ extensions: [NSObject.Type], \n                               _ completion: (() -> Void)? = nil)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`import AEPEdgeConsent\n\n...\nMobileCore.registerExtensions([Consent.self])\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <p>{`Use the AEPMobileCore API to register the Edge Consent extension.`}</p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) registerExtensions: (NSArray<Class*>* _Nonnull) extensions \n                  completion: (void (^ _Nullable)(void)) completion;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`@import AEPEdgeConsent;\n\n...\n[AEPMobileCore registerExtensions:@[AEPMobileEdgeConsent.class] completion:nil];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"update-consents\" repeat=\"6\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Java`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void update(final Map<String, Object> consents);\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`consents`}</em>{` - A `}<inlineCode parentName=\"li\">{`Map`}</inlineCode>{` of consents defined based on `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/xdm/blob/master/docs/reference/mixins/profile/profile-consents.schema.md\"\n        }}>{`Privacy/Personalization/Marketing Preferences `}{`(`}{`Consents`}{`)`}{` XDM Schema`}</a>{`.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`// example 1, updating users collect consent to 'yes'\nfinal Map<String, Object> collectConsents = new HashMap<>();\ncollectConsents.put(\"collect\", new HashMap<String, String>() {\n    {\n        put(\"val\", \"y\");\n    }\n});\n\nfinal Map<String, Object> consents = new HashMap<>();\nconsents.put(\"consents\", collectConsents);\n\nConsent.update(consents);\n\n// example 2, updating users collect consent to 'no'\nfinal Map<String, Object> collectConsents = new HashMap<>();\ncollectConsents.put(\"collect\", new HashMap<String, String>() {\n    {\n        put(\"val\", \"n\");\n    }\n});\n\nfinal Map<String, Object> consents = new HashMap<>();\nconsents.put(\"consents\", collectConsents);\n\nConsent.update(consents);\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"update-consents\" repeat=\"11\" mdxType=\"Variant\" />\n    <p><strong parentName=\"p\">{`Swift`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func update(with consents: [String: Any])\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`consents`}</em>{` - A `}<inlineCode parentName=\"li\">{`[String: Any]`}</inlineCode>{` of consents defined based on `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/adobe/xdm/blob/master/docs/reference/mixins/profile/profile-consents.schema.md\"\n        }}>{`Privacy/Personalization/Marketing Preferences `}{`(`}{`Consents`}{`)`}{` XDM Schema`}</a>{`.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`// example 1, updating users collect consent to 'yes'\nlet collectConsent = [\"collect\": [\"val\": \"y\"]]\nlet currentConsents = [\"consents\": collectConsent]\nConsent.update(with: currentConsents)\n\n// example 2, updating users collect consent to 'no'\nlet collectConsent = [\"collect\": [\"val\": \"n\"]]\nlet currentConsents = [\"consents\": collectConsent]\nConsent.update(with: currentConsents)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Objective-C`}</strong></p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) updateWithConsents:(NSDictionary<NSString *,id> * _Nonnull)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`// example 1, updating users collect consent to 'yes'\nNSDictionary *collectConsent = @{ @\"collect\": @{@\"val\": @\"y\"};\n[AEPMobileEdgeConsent updateWithConsents:@{@\"consents\": collectConsent}];\n\n// example 2, updating users collect consent to 'no'\nNSDictionary *collectConsent = @{ @\"collect\": @{@\"val\": @\"n\"};\n[AEPMobileEdgeConsent updateWithConsents:@{@\"consents\": collectConsent}];\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","TabsBlock","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","orientation","slots","repeat","query","isMDXComponent","Variant","platform","api","parentName"],"sourceRoot":""}