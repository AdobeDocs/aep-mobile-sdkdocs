{"version":3,"file":"11e2e569cfad33bdf5e875f55f914d0f95ceaaee-5e57bbd4a5b01e969c33.js","mappings":"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","sources":["webpack://dev-site-documentation-template/./src/pages/documentation/adobe-campaign-classic/tabs/api-reference.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/aep-mobile-sdkdocs/aep-mobile-sdkdocs/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Variant = makeShortcode(\"Variant\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <Variant platform=\"android\" api=\"extension-version\" repeat=\"5\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static String extensionVersion();\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`String campaignClassicExtensionVersion = CampaignClassic.extensionVersion();\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"extension-version\" repeat=\"10\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static var extensionVersion: String\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let campaignClassicVersion = CampaignClassic.extensionVersion\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objective-c\"\n      }}>{`+ (nonnull NSString *)extensionVersion\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objective-c\"\n      }}>{`NSString *campaignClassicVersion = [AEPMobileCampaignClassic extensionVersion];\n`}</code></pre>\n    <Variant platform=\"ios-acp\" api=\"extension-version\" repeat=\"10\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"swift-1\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func extensionVersion() -> String\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`let campaignClassicExtensionVersion  = ACPCampaignClassic.extensionVersion()\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-1\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objc\"\n      }}>{`+(NSString) extensionVersion;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`NSString *campaignClassicExtensionVersion = [ACPCampaignClassic extensionVersion];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"register-device\" repeat=\"7\" mdxType=\"Variant\" />\n    <p>{`To prepare your app to handle push notifications, see the tutorial on `}<a parentName=\"p\" {...{\n        \"href\": \"https://firebase.google.com/docs/cloud-messaging/android/client\"\n      }}>{`setting up a Firebase Cloud Messaging client app on Android`}</a>{`. After you receive the Firebase Cloud Messaging (FCM) SDK registration token, send this token and the device information to Campaign Classic by using the `}<inlineCode parentName=\"p\">{`registerDevice`}</inlineCode>{` API.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`registerDevice`}</inlineCode>{` API registers a device with your Campaign Classic registration server. It takes the FCM registration token as a parameter with a user key that identifies a user, such as an email address or a login name. You can also provide a map of the custom key-value pairs that you want to associate with the registration. A boolean value is returned in the callback, which signals whether the registration was successful.`}</p>\n    <h4 {...{\n      \"id\": \"java-1\"\n    }}>{`Java`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void registerDevice(final String token, final String userKey, final Map<String, Object> additionalParams, final AdobeCallback<Boolean> callback)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic void onNewToken(String token) {\n    Log.d(\"TestApp\", \"Refreshed token: \" + token);\n\n    // If you want to send messages to this application instance or\n    // manage this app's subscriptions on the server side, send the\n    // Instance ID token to your app server.\n    if (token != null) {\n                Log.d(\"TestApp\", \"FCM SDK registration token received : \" + token);\n                // Create a map of additional parameters\n                Map<String, Object> additionalParams = new HashMap<String, Object>();\n                additionalParams.put(\"name\", \"John\");\n                additionalParams.put(\"serial\", 12345);\n                additionalParams.put(\"premium\", true);\n                // Send the registration info\n                CampaignClassic.registerDevice(token, \"john@example.com\",additionalParams,new AdobeCallback<Boolean>() {\n                    @Override\n                    public void call(final Boolean status) {\n                        Log.d(\"TestApp\", \"Registration Status: \" + status);\n                    }\n                });\n      }\n}\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"register-device\" repeat=\"12\" mdxType=\"Variant\" />\n    <p>{`To get your app ready to handle push notifications, see the tutorial on `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/HandlingRemoteNotifications.html#//apple_ref/doc/uid/TP40008194-CH6-SW1\"\n      }}>{`configuring remote notification support`}</a>{`. After you receive the Apple Push Notification service (APNs) token, send this token and the device information to Campaign Classic using the `}<inlineCode parentName=\"p\">{`registerDevice`}</inlineCode>{` API.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`registerDevice`}</inlineCode>{` API registers a device with your Campaign Classic registration server. It takes the APNS token as a parameter with a user key that identifies a user, such as an email address or a login name. You can also provide a map of the custom key-value pairs that you want to associate with the registration.`}</p>\n    <h4 {...{\n      \"id\": \"swift-2\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func registerDevice(token: Data, userKey: String?, additionalParameters: [String: Any]?)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n  let params: [String: Any] = [\n    \"name\": \"John\",\n    \"serial\": 12345,\n    \"premium\": true\n  ]\n  CampaignClassic.registerDevice(token: deviceToken, userKey: \"johnDoe@example.com\", additionalParameters: params)\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-2\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) registerDeviceWithToken:(nonnull NSData*)token userKey:(nullable NSString*)userKey additionalParams:(nullable NSDictionary<NSString *, id> *)additionalParams;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n  NSMutableDictionary *params = [[NSMutableDictionary alloc] initWithObjectsAndKeys:  @\"John\", @\"name\", nil];\n  [params setObject: [NSNumber numberWithInt:12345] forKey: @\"serial\"];\n  [params setObject: [NSNumber numberWithBool:YES]  forKey: @\"premium\"];\n\n[AEPMobileCampaignClassic registerDeviceWithToken:deviceToken userKey:@\"john@example.com\" additionalParameters:params];\n}\n`}</code></pre>\n    <Variant platform=\"ios-acp\" api=\"register-device\" repeat=\"12\" mdxType=\"Variant\" />\n    <p>{`To get your app ready to handle push notifications, see the tutorial on `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/HandlingRemoteNotifications.html#//apple_ref/doc/uid/TP40008194-CH6-SW1\"\n      }}>{`configuring remote notification support`}</a>{`. After you receive the Apple Push Notification service (APNs) token, send this token and the device information to Campaign Classic using the `}<inlineCode parentName=\"p\">{`registerDevice`}</inlineCode>{` API.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`registerDevice`}</inlineCode>{` API registers a device with your Campaign Classic registration server. It takes the APNS token as a parameter with a user key that identifies a user, such as an email address or a login name. You can also provide a map of the custom key-value pairs that you want to associate with the registration. A boolean value is returned in the callback, which signals whether the registration was successful.`}</p>\n    <h4 {...{\n      \"id\": \"swift-3\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func registerDevice(_ token: Data, userKey: String?, additionalParams: [String: Any]?, callback: ((Bool) -> Void)?)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n  let params: [String: Any] = [\n    \"name\": \"John\",\n    \"serial\": 12345,\n    \"premium\": true\n  ]\n  ACPCampaignClassic.registerDevice(deviceToken, userKey: \"john@example.com\", additionalParams: params) {\n    result in\n    print(\"Registration status: \\\\(result)\")\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-3\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) registerDevice: (nonnull NSData*) token userKey: (nullable NSString*) userKey additionalParams: (nullable NSDictionary*) additionalParams callback: (nullable void (^) (BOOL success)) callback;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void) application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n  // Set the deviceToken that the APNS has assigned to the device\n  NSMutableDictionary *params = [[NSMutableDictionary alloc] initWithObjectsAndKeys:          @\"John\", @\"name\", nil];\n  [params setObject: [NSNumber numberWithInt:12345] forKey: @\"serial\"];\n  [params setObject: [NSNumber numberWithBool:YES]  forKey: @\"premium\"];\n\n[ACPCampaignClassic registerDevice:deviceToken userKey:@\"john@example.com\" additionalParams:params callback:^(BOOL success) {\n    NSLog(@\"Registration Status: %d\", success);\n}];\n`}</code></pre>\n    <Variant platform=\"android\" api=\"track-notification-click\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-2\"\n    }}>{`Java`}</h4>\n    <p>{`If `}<inlineCode parentName=\"p\">{`trackInfo`}</inlineCode>{` is null, or does not contain the necessary tracking identifiers, `}<inlineCode parentName=\"p\">{`messageId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_mId`}</inlineCode>{`) and `}<inlineCode parentName=\"p\">{`deliveryId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_dId`}</inlineCode>{`), a track request is `}<strong parentName=\"p\">{`not`}</strong>{` sent.`}</p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void trackNotificationClick(final Map<String, String> trackInfo)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`@Override\npublic void onResume() {\n  super.onResume();\n  // Perform any other app related tasks\n  // The messageId (_mId) and deliveryId (_dId) can be passed in the intent extras.\n  // This is assuming you extract the messageId and deliveryId from the\n  // received push message and are including it in the intent (intent.putExtra())\n  // of the displayed notification.\n\n  Bundle extras = getIntent().getExtras();\n  if (extras != null) {\n    String deliveryId = extras.getString(\"_dId\");\n    String messageId = extras.getString(\"_mId\");\n    if (deliveryId != null && messageId != null) {\n      Map<String,String> trackInfo = new HashMap<>();\n      trackInfo.put(\"_mId\", messageId);\n      trackInfo.put(\"_dId\", deliveryId);\n\n      // Send the tracking information for message opening\n      CampaignClassic.trackNotificationClick(trackInfo);\n    }\n  }\n}\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"track-notification-click\" repeat=\"11\" mdxType=\"Variant\" />\n    <p>{`You can pass the `}<inlineCode parentName=\"p\">{`launchOptions`}</inlineCode>{` that were received upon opening the application or `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{`, which contains the received push payload in `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{`. If `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{` is null or does not contain the necessary tracking identifiers, `}<inlineCode parentName=\"p\">{`broadlogId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_mId`}</inlineCode>{`) and `}<inlineCode parentName=\"p\">{`deliveryId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_dId`}</inlineCode>{`), a track request is `}<strong parentName=\"p\">{`not`}</strong>{` sent.`}</p>\n    <h4 {...{\n      \"id\": \"swift-4\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func trackNotificationClick(withUserInfo userInfo: [AnyHashable: Any])\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n        CampaignClassic.trackNotificationClick(withUserInfo: response.notification.request.content.userInfo)\n    }\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-4\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) trackNotificationClickWithUserInfo: (nonnull NSDictionary*) userInfo;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`-(void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler{\n    NSDictionary *userInfo = response.notification.request.content.userInfo;\n    [AEPMobileCampaignClassic trackNotificationClickWithUserInfo:userInfo];\n    completionHandler();\n}\n`}</code></pre>\n    <Variant platform=\"ios-acp\" api=\"track-notification-click\" repeat=\"11\" mdxType=\"Variant\" />\n    <p>{`You can pass the `}<inlineCode parentName=\"p\">{`launchOptions`}</inlineCode>{` that were received upon opening the application or `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{`, which contains the received push payload in `}<inlineCode parentName=\"p\">{`trackInfo`}</inlineCode>{`. If `}<inlineCode parentName=\"p\">{`trackInfo`}</inlineCode>{` is null or does not contain the necessary tracking identifiers, `}<inlineCode parentName=\"p\">{`broadlogId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_mId`}</inlineCode>{`) and `}<inlineCode parentName=\"p\">{`deliveryId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_dId`}</inlineCode>{`), a track request is `}<strong parentName=\"p\">{`not`}</strong>{` sent.`}</p>\n    <h4 {...{\n      \"id\": \"swift-5\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func trackNotificationClick(_ trackInfo: [String: String])\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n  guard let userInfo = response.notification.request.content.userInfo as? [String: String] else {\n    return;\n  }\n  ACPCampaignClassic.trackNotificationClick(userInfo);\n  completionHandler();\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-5\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) trackNotificationClick: (nonnull NSDictionary<NSString*, NSString*>*) trackInfo;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`-(void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler\n{\n  NSLog(@\"User Info : %@\",response.notification.request.content.userInfo);\n  // Track action selected by the user for a given notification\n  [ACPCampaignClassic trackNotificationClick:response.notification.request.content.userInfo];\n  completionHandler();\n}\n`}</code></pre>\n    <Variant platform=\"android\" api=\"track-notification-receive\" repeat=\"6\" mdxType=\"Variant\" />\n    <h4 {...{\n      \"id\": \"java-3\"\n    }}>{`Java`}</h4>\n    <p>{`If `}<inlineCode parentName=\"p\">{`trackInfo`}</inlineCode>{` is null or does not contain the necessary tracking identifiers, `}<inlineCode parentName=\"p\">{`messageId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_mId`}</inlineCode>{`) and `}<inlineCode parentName=\"p\">{`deliveryId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_dId`}</inlineCode>{`), a track request is `}<strong parentName=\"p\">{`not`}</strong>{` sent.`}</p>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public static void trackNotificationReceive(final Map<String, String> trackInfo)\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`public class MyFirebaseMessagingService extends FirebaseMessagingService {\n  @Override\n  public void onMessageReceived(RemoteMessage remoteMessage) {\n    Log.d(\"TestApp\", \"Receive message from: \" + remoteMessage.getFrom());\n    Map<String,String> payloadData = message.getData();\n\n    // Check if message contains data payload.\n    if (payloadData.size() > 0) {\n      Map<String,String> trackInfo = new HashMap<>();\n      trackInfo.put(\"_mId\", payloadData.get(\"_mId\"));\n      trackInfo.put(\"_dId\", payloadData.get(\"_dId\"));\n\n      // Send the tracking information for message received\n      CampaignClassic.trackNotificationReceive(trackInfo);\n    }\n  }\n}\n`}</code></pre>\n    <Variant platform=\"ios-aep\" api=\"track-notification-receive\" repeat=\"11\" mdxType=\"Variant\" />\n    <p>{`You can pass the `}<inlineCode parentName=\"p\">{`launchOptions`}</inlineCode>{` that were received upon opening the application or `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{`, which contains the received push payload in `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{`. If `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{` is null or does not contain the necessary tracking identifiers, `}<inlineCode parentName=\"p\">{`broadlogId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_mId`}</inlineCode>{`) and `}<inlineCode parentName=\"p\">{`deliveryId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_dId`}</inlineCode>{`), a track request is `}<strong parentName=\"p\">{`not`}</strong>{` sent.`}</p>\n    <h4 {...{\n      \"id\": \"swift-6\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func trackNotificationReceive(withUserInfo userInfo: [AnyHashable: Any])\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n\n  guard let aps = userInfo[\"aps\"] as? [String: Any] else {\n    completionHandler(.failed)\n    return\n  }\n  if aps[\"content-available\"] as? Int == 1 {\n    // Track silent push notification receive\n    CampaignClassic.trackNotificationReceive(withUserInfo: userInfo)\n    completionHandler(.noData)\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-6\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) trackNotificationReceiveWithUserInfo:(nonnull NSDictionary*) userInfo;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)launchOptions fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler\n{\n  if ( launchOptions) NSLog(@\"launchOptions: %@\", [launchOptions description]);\n  // Tracking silent push notification receive\n  if ( [launchOptions[@\"aps\"][@\"content-available\"] intValue] == 1 ) {\n    NSLog(@\"Silent Push Notification\");\n    [AEPMobileCampaignClassic trackNotificationReceiveWithUserInfo:userInfo];\n    completionHandler(UIBackgroundFetchResultNoData);\n  }\n}\n`}</code></pre>\n    <Variant platform=\"ios-acp\" api=\"track-notification-receive\" repeat=\"11\" mdxType=\"Variant\" />\n    <p>{`You can pass the `}<inlineCode parentName=\"p\">{`launchOptions`}</inlineCode>{` that were received upon opening the application or `}<inlineCode parentName=\"p\">{`userInfo`}</inlineCode>{` , which contains the received push payload in `}<inlineCode parentName=\"p\">{`trackInfo`}</inlineCode>{`. If `}<inlineCode parentName=\"p\">{`trackInfo`}</inlineCode>{` is null or does not contain the necessary tracking identifiers, `}<inlineCode parentName=\"p\">{`broadlogId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_mId`}</inlineCode>{`) and `}<inlineCode parentName=\"p\">{`deliveryId`}</inlineCode>{` (`}<inlineCode parentName=\"p\">{`_dId`}</inlineCode>{`), a track request is `}<strong parentName=\"p\">{`not`}</strong>{` sent.`}</p>\n    <h4 {...{\n      \"id\": \"swift-7\"\n    }}>{`Swift`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`static func trackNotificationReceive(_ trackInfo: [String: String])\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-swift\"\n      }}>{`func application(_ application: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable : Any], fetchCompletionHandler completionHandler: @escaping (UIBackgroundFetchResult) -> Void) {\n\n  guard let aps = userInfo[\"aps\"] as? [String: Any] else {\n    completionHandler(.failed)\n    return\n  }\n  if aps[\"content-available\"] as? Int == 1 {\n    // Track silent push notification receive\n    ACPCampaignClassic.trackNotificationReceive(userInfo)\n    completionHandler(.noData)\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"objective-c-7\"\n    }}>{`Objective-C`}</h4>\n    <p><strong parentName=\"p\">{`Syntax`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`+ (void) trackNotificationReceive: (nonnull NSDictionary<NSString*, NSString*>*) trackInfo;\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-objectivec\"\n      }}>{`- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)launchOptions fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler\n{\n  if ( launchOptions) NSLog(@\"launchOptions: %@\", [launchOptions description]);\n  // Tracking silent push notification receive\n  if ( [launchOptions[@\"aps\"][@\"content-available\"] intValue] == 1 ) {\n    NSLog(@\"Silent Push Notification\");\n    [ACPCampaignClassic trackNotificationReceive:launchOptions];\n    completionHandler(UIBackgroundFetchResultNoData);\n  }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","Variant","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","platform","api","repeat","parentName","isMDXComponent"],"sourceRoot":""}